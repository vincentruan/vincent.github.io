{"meta":{"title":"星辰大海","subtitle":"My Conquest Is the Sea of Stars.","description":"呜啦啦♪(^∇^*) Welcome to the Sea of Stars.","author":"Vincent Ruan","url":"https://vincentruan.github.io"},"pages":[{"title":"tags","date":"2018-05-26T09:22:14.000Z","updated":"2018-05-26T09:22:57.773Z","comments":false,"path":"tags/index.html","permalink":"https://vincentruan.github.io/tags/index.html","excerpt":"","text":""},{"title":"文章分类","date":"2018-05-26T09:18:05.000Z","updated":"2018-05-26T09:19:34.334Z","comments":false,"path":"categories/index.html","permalink":"https://vincentruan.github.io/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Hexo添加Gitalk评论插件","slug":"Hexo添加Gitalk评论插件","date":"2018-06-01T15:55:56.000Z","updated":"2018-06-01T15:55:56.104Z","comments":true,"path":"2018/06/01/Hexo添加Gitalk评论插件/","link":"","permalink":"https://vincentruan.github.io/2018/06/01/Hexo添加Gitalk评论插件/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"Hexo集成Algolia搜索插件","slug":"Hexo集成Algolia搜索插件","date":"2018-06-01T15:14:36.000Z","updated":"2018-06-01T15:17:31.107Z","comments":true,"path":"2018/06/01/Hexo集成Algolia搜索插件/","link":"","permalink":"https://vincentruan.github.io/2018/06/01/Hexo集成Algolia搜索插件/","excerpt":"","text":"本文转载自Hexo集成Algolia搜索插件 前言个人博客自从2016年10月21日搭建以来，迄今为止已经有49 篇日志了。虽然不是很多篇文章，但是搜索站内的内容已经力不从心了。 搜索了网上很多关于“Hexo 站内搜索”的内容，发现大部分都是使用Swiftype，但是发现Swiftype 搜索只有15 天的免费，之后就需要开始收费了。 因为只是为自己的个人博客 使用站内搜索，所以希望找一个类似与Swiftype 的，但是免费的站内搜索。最后找了Algolia 这个免费版本替代。 下面简单说下搭建过程： 搭建过程前提条件如果你的Next 版本为5.1.0 之后，可以使用Algolia。如果不是，请先升级到5.1.0 版本之后 一个Algolia 帐号官网地址 使用GitHub 或Google 帐号登录。 创建Index进入Dashboard，选择Indices 新建一个Index。 安装Hexo AlgoliaIndex 创建完成后，此时Index 为包含任何数据。需要安装Hexo Aloglia 扩展，这个扩展的功能是搜集站点的内容并通过API 发送给Aloglia。前往站点根目录，执行命令安装： 1npm install --save hexo-algolia 获取Key，更新站点信配置点击Dashborad 左侧的API Keys，其中的信息接下来将会被用到。包括Application ID 、Search-Only API Key 和 Admin API Key，其中Admin API Key需要保密保存 编辑站点配置文件，新增以下配置： 123456algolia: applicationID: &apos;SV57WJ53OS&apos; apiKey: &apos;c7d219504e44d09ab55f5f7a195fce98&apos; adminApiKey: &apos;adminApiKey&apos; indexName: &apos;dev_jobbymsblog&apos; chunkSize: 5000 更新Index当配置完成，在站点根目录下执行hexo algolia 来更新Index。请注意观察命令的输出。 主题集成更改主题配置文件，找到Algolia Search 配置部分： 123456789# Algolia Searchalgolia_search: enable: false hits: per_page: 10 labels: input_placeholder: Search for Posts hits_empty: &quot;We didn&apos;t find any results for the search: $&#123;query&#125;&quot; hits_stats: &quot;$&#123;hits&#125; results found in $&#123;time&#125; ms&quot; 将enable 改为true 即可，根据需要你可以调整labels 中的文本。 问题11. 点击搜索结果，结果跳转地址为： 1Cannot GET /undefined/ 按照5.1.0使用algolia搜索问题这里进行的处理，在这里总结一下： 因为hexo-aloglia 的作者没有把post.path 加入index，所以data.path 是undefined。 遇到这个问题，首先运行npm uninstll hexo-algolia 卸载之前的版本，再运行npm install hexo-algolia@0.2.0 --save,最后运行hexo algolia 命令重新index 就可以了。 参考文档 Swiftype站内搜索 Next 第三方服务集成","categories":[{"name":"Hexo使用攻略","slug":"Hexo使用攻略","permalink":"https://vincentruan.github.io/categories/Hexo使用攻略/"}],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"https://vincentruan.github.io/tags/Hexo/"},{"name":"Algolia","slug":"Algolia","permalink":"https://vincentruan.github.io/tags/Algolia/"}]},{"title":"Linux xmr-stak挖矿教程","slug":"Linux-xmr-stak挖矿教程","date":"2018-05-27T13:51:10.000Z","updated":"2018-06-01T15:13:17.545Z","comments":true,"path":"2018/05/27/Linux-xmr-stak挖矿教程/","link":"","permalink":"https://vincentruan.github.io/2018/05/27/Linux-xmr-stak挖矿教程/","excerpt":"","text":"Compile xmr-stak for LinuxInstall DependenciesAMD APP SDK 3.0 (only needed to use AMD GPUs) download and install the latest version from https://www.dropbox.com/sh/mpg882ekirnsfa7/AADWz5X-TgVdsmWt0QwMgTWLa/AMD-APP-SDKInstaller-v3.0.130.136-GA-linux64.tar.bz2?dl=0(do not wonder why it is a link to a dropbox but AMD has removed the SDK downloads, see https://community.amd.com/thread/228059) Cuda 8.0+ (only needed to use NVIDIA GPUs) download and install https://developer.nvidia.com/cuda-downloads for minimal install choose Custom installation options during the install and select CUDA/Develpment CUDA/Runtime Driver components GNU Compiler12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576# Ubuntu / Debiansudo apt install libmicrohttpd-dev libssl-dev cmake build-essential libhwloc-devgit clone https://github.com/fireice-uk/xmr-stak.gitmkdir xmr-stak/buildcd xmr-stak/buildcmake ..make install# Archsudo pacman -S --needed base-devel hwloc openssl cmake libmicrohttpdgit clone https://github.com/fireice-uk/xmr-stak.gitmkdir xmr-stak/buildcd xmr-stak/buildcmake ..make install# Fedorasudo dnf install gcc gcc-c++ hwloc-devel libmicrohttpd-devel libstdc++-static make openssl-devel cmakegit clone https://github.com/fireice-uk/xmr-stak.gitmkdir xmr-stak/buildcd xmr-stak/buildcmake ..make install# CentOSsudo yum install centos-release-scl epel-releasesudo yum install cmake3 devtoolset-4-gcc* hwloc-devel libmicrohttpd-devel openssl-devel makescl enable devtoolset-4 bashgit clone https://github.com/fireice-uk/xmr-stak.gitmkdir xmr-stak/buildcd xmr-stak/buildcmake3 ..make install# Ubuntu 14.04sudo add-apt-repository ppa:ubuntu-toolchain-r/testsudo apt updatesudo apt install gcc-5 g++-5 makesudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 1 --slave /usr/bin/g++ g++ /usr/bin/g++-5curl -L http://www.cmake.org/files/v3.4/cmake-3.4.1.tar.gz | tar -xvzf - -C /tmp/cd /tmp/cmake-3.4.1/ &amp;&amp; ./configure &amp;&amp; make &amp;&amp; sudo make install &amp;&amp; cd -sudo update-alternatives --install /usr/bin/cmake cmake /usr/local/bin/cmake 1 --forcesudo apt install libmicrohttpd-dev libssl-dev libhwloc-devgit clone https://github.com/fireice-uk/xmr-stak.gitmkdir xmr-stak/buildcd xmr-stak/buildcmake ..make install# TinyCore Linux 8.x# TinyCore is 32-bit only, but there is an x86-64 port, known as &quot;Pure 64,&quot;# hosted on the TinyCore home page, and it works well.# Beware that huge page support is not enabled in the kernel distributed# with Pure 64. Consider http://wiki.tinycorelinux.net/wiki:custom_kernel# Note that as of yet there are no distro packages for microhttpd or hwloc.# hwloc is easy enough to install manually though, shown below.# Also note that only CPU mining has been tested on this platform, thus the# disabling of CUDA and OpenCL shown below.tce-load -iw openssl-dev.tcz cmake.tcz make.tcz gcc.tcz git.tcz \\ glibc_base-dev.tcz linux-4.8.1_api_headers.tcz \\ glibc_add_lib.tczwget https://www.open-mpi.org/software/hwloc/v1.11/downloads/hwloc-1.11.8.tar.gztar xzvf hwloc-1.11.8.tar.gzcd hwloc-1.11.8./configure --prefix=/usr/localmakesudo make installcd ..git clone http://github.com/fireice-uk/xmr-stakcd xmr-stakmkdir buildcd buildCC=gcc cmake .. -DCUDA_ENABLE=OFF \\ -DOpenCL_ENABLE=OFF \\ -DMICROHTTPD_ENABLE=OFFmake install g++ version 5.1 or higher is required for full C++11 support.If you want to compile the binary without installing libraries / compiler or just compile binary for some other distribution, please check the build_xmr-stak_docker.sh script. Some newer gcc versions are not supported by CUDA (e.g. Ubuntu 17.10). It will require installing gcc 5 but you can avoid changing defaults. In that case you can force CUDA to use an older compiler in the following way:1cmake -DCUDA_HOST_COMPILER=/usr/bin/gcc-5 .. To do a generic and static build for a system without gcc 5.1+1234cmake -DCMAKE_LINK_STATIC=ON -DXMR-STAK_COMPILE=generic .make installcd bin\\Releasecopy C:\\xmr-stak-dep\\openssl\\bin\\* . Note - cmake caches variables, so if you want to do a dynamic build later you need to specify ‘-DCMAKE_LINK_STATIC=OFF’ Reference xmr-stak","categories":[{"name":"block-chain","slug":"block-chain","permalink":"https://vincentruan.github.io/categories/block-chain/"}],"tags":[{"name":"xmr","slug":"xmr","permalink":"https://vincentruan.github.io/tags/xmr/"}]},{"title":"Day 1: Bower —— 管理你的客户端依赖关系","slug":"Day-1-Bower-——-管理你的客户端依赖关系","date":"2018-05-26T14:27:38.000Z","updated":"2018-05-26T14:40:10.462Z","comments":true,"path":"2018/05/26/Day-1-Bower-——-管理你的客户端依赖关系/","link":"","permalink":"https://vincentruan.github.io/2018/05/26/Day-1-Bower-——-管理你的客户端依赖关系/","excerpt":"","text":"编者注：我们发现了比较有趣的系列文章《30天学习30种新技术》，准备翻译，一天一篇更新，年终礼包。以下是第一天技术的译文。 我决定将第一天的学习主题选为Bower。 什么是Bower？Bower是一个客户端技术的软件包管理器，它可用于搜索、安装和卸载如JavaScript、HTML、CSS之类的网络资源。其他一些建立在Bower基础之上的开发工具，如YeoMan和Grunt，这个会在以后的文章中介绍。 为什么我会在意Bower？ 节省时间。为什么要学习Bower的第一个原因，就是它会为你节省寻找客户端的依赖关系的时间。每次我需要安装jQuery的时候，我都需要去jQuery网站下载包或使用CDN版本。但是有了Bower，你只需要输入一个命令，jquery就会安装在本地计算机上，你不需要去记版本号之类的东西，你也可以通过Bower的info命令去查看任意库的信息。 脱机工作。Bower会在用户主目录下创建一个.bower的文件夹，这个文件夹会下载所有的资源、并安装一个软件包使它们可以离线使用。如果你熟悉Java，Bower即是一个类似于现在流行的Maven构建系统的.m2仓库。每次你下载任何资源库都将被安装在两个文件夹中 —— 一个在的应用程序文件夹，另一个在用户主目录下的.bower文件夹。因此，下一次你需要这个仓库时，就会用那个用户主目录下.bower中的版本。 可以很容易地展现客户端的依赖关系。你可以创建一个名为bower.json的文件，在这个文件里你可以指定所有客户端的依赖关系，任何时候你需要弄清楚你正在使用哪些库，你可以参考这个文件。 让升级变得简单。假设某个库的新版本发布了一个重要的安全修补程序，为了安装新版本，你只需要运行一个命令，bower会自动更新所有有关新版本的依赖关系。 前提准备为了安装bower，你首先需要安装如下文件： Node：下载最新版本的node.js NPM：NPM是node程序包管理器。它是捆绑在nodejs的安装程序上的，所以一旦你已经安装了node，NPM也就安装好了。 Git：你需要从git仓库获取一些代码包。 安装Bower一旦你已经安装了上面所说的所有必要文件，键入以下命令安装Bower： 1$ npm install -g bower 这行命令是Bower的全局安装，-g 操作表示全局。 开始使用Bower安装完bower之后就可以使用所有的bower命令了。可以键入help 命令来查看bower可以完成那些操作，如下： 1234567891011121314151617181920212223242526272829303132$ bower helpUsage: bower &lt;command&gt; [&lt;args&gt;] [&lt;options&gt;]Commands: cache Manage bower cache help Display help information about Bower home Opens a package homepage into your favorite browser info Info of a particular package init Interactively create a bower.json file install Install a package locally link Symlink a package folder list List local packages lookup Look up a package URL by name prune Removes local extraneous packages register Register a package search Search for a package by name update Update a local package uninstall Remove a local packageOptions: -f, --force Makes various commands more forceful -j, --json Output consumable JSON -l, --log-level What level of logs to report -o, --offline Do not hit the network -q, --quiet Only output important information -s, --silent Do not output anything, besides errors -V, --verbose Makes output more verbose --allow-root Allows running commands as root 包的安装Bower是一个软件包管理器，所以你可以在应用程序中用它来安装新的软件包。举例来看一下来如何使用Bower安装JQuery，在你想要安装该包的地方创建一个新的文件夹，键入如下命令： 1$ bower install jquery 上述命令完成以后，你会在你刚才创建的目录下看到一个bower_components的文件夹，其中目录如下： 123456789101112131415$ tree bower_components/bower_components/└── jquery ├── README.md ├── bower.json ├── component.json ├── composer.json ├── jquery-migrate.js ├── jquery-migrate.min.js ├── jquery.js ├── jquery.min.js ├── jquery.min.map └── package.json1 directory, 10 files 包的使用现在就可以在应用程序中使用jQuery包了，在jQuery里创建一个简单的html5文件： 12345678910111213141516171819202122&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Learning Bower&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;button&gt;Animate Me!!&lt;/button&gt;&lt;div style=&quot;background:red;height:100px;width:100px;position:absolute;&quot;&gt;&lt;/div&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;bower_components/jquery/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot;&gt; $(document).ready(function()&#123; $(&quot;button&quot;).click(function()&#123; $(&quot;div&quot;).animate(&#123;left:&apos;250px&apos;&#125;); &#125;); &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 正如你所看到的，你刚刚引用jquery.min.js文件，现阶段完成。 所有包的列表如果你想找出所有安装在应用程序中的包，可以使用list命令： 1234$ bower listbower check-new Checking for new versions of the project dependencies..blog /Users/shekhargulati/day1/blog└── jquery#2.0.3 extraneous 包的搜索假如你想在你的应用程序中使用twitter的bootstrap框架，但你不确定包的名字，这时你可以使用search 命令： 123456$ bower search bootstrapSearch results: bootstrap git://github.com/twbs/bootstrap.git angular-bootstrap git://github.com/angular-ui/bootstrap-bower.git sass-bootstrap git://github.com/jlong/sass-twitter-bootstrap.git 包的信息如果你想看到关于特定的包的信息，可以使用info 命令来查看该包的所有信息： 1234567891011121314151617181920212223242526272829$ bower info bootstrapbower bootstrap#* not-cached git://github.com/twbs/bootstrap.git#*bower bootstrap#* resolve git://github.com/twbs/bootstrap.git#*bower bootstrap#* download https://github.com/twbs/bootstrap/archive/v3.0.0.tar.gzbower bootstrap#* extract archive.tar.gzbower bootstrap#* resolved git://github.com/twbs/bootstrap.git#3.0.0&#123; name: &apos;bootstrap&apos;, version: &apos;3.0.0&apos;, main: [ &apos;./dist/js/bootstrap.js&apos;, &apos;./dist/css/bootstrap.css&apos; ], ignore: [ &apos;**/.*&apos; ], dependencies: &#123; jquery: &apos;&gt;= 1.9.0&apos; &#125;, homepage: &apos;https://github.com/twbs/bootstrap&apos;&#125;Available versions: - 3.0.0 - 3.0.0-rc1 - 3.0.0-rc.2 - 2.3.2 ..... 如果你想得到单个包的信息，也可以使用info 命令： 12345678910111213141516171819$ bower info bootstrap#3.0.0bower bootstrap#3.0.0 cached git://github.com/twbs/bootstrap.git#3.0.0bower bootstrap#3.0.0 validate 3.0.0 against git://github.com/twbs/bootstrap.git#3.0.0&#123; name: &apos;bootstrap&apos;, version: &apos;3.0.0&apos;, main: [ &apos;./dist/js/bootstrap.js&apos;, &apos;./dist/css/bootstrap.css&apos; ], ignore: [ &apos;**/.*&apos; ], dependencies: &#123; jquery: &apos;&gt;= 1.9.0&apos; &#125;, homepage: &apos;https://github.com/twbs/bootstrap&apos;&#125; 包的卸载卸载包可以使用uninstall 命令： 1$ bower uninstall jquery bower.json文件的使用bower.json文件的使用可以让包的安装更容易，你可以在应用程序的根目录下创建一个名为“bower.json”的文件，并定义它的依赖关系。使用bower init 命令来创建bower.json文件： 123456789101112131415161718192021222324252627282930313233$ bower init[?] name: blog[?] version: 0.0.1[?] description:[?] main file:[?] keywords:[?] authors: Shekhar Gulati &lt;shekhargulati84@gmail.com&gt;[?] license: MIT[?] homepage:[?] set currently installed components as dependencies? Yes[?] add commonly ignored files to ignore list? Yes[?] would you like to mark this package as private which prevents it from being accidentally published to the registry? No&#123; name: &apos;blog&apos;, version: &apos;0.0.1&apos;, authors: [ &apos;Shekhar Gulati &lt;shekhargulati84@gmail.com&gt;&apos; ], license: &apos;MIT&apos;, ignore: [ &apos;**/.*&apos;, &apos;node_modules&apos;, &apos;bower_components&apos;, &apos;test&apos;, &apos;tests&apos; ], dependencies: &#123; jquery: &apos;~2.0.3&apos; &#125;&#125;[?] Looks good? Yes 可以查看该文件： 123456789101112131415161718&#123; &quot;name&quot;: &quot;blog&quot;, &quot;version&quot;: &quot;0.0.1&quot;, &quot;authors&quot;: [ &quot;Shekhar Gulati &lt;shekhargulati84@gmail.com&gt;&quot; ], &quot;license&quot;: &quot;MIT&quot;, &quot;ignore&quot;: [ &quot;**/.*&quot;, &quot;node_modules&quot;, &quot;bower_components&quot;, &quot;test&quot;, &quot;tests&quot; ], &quot;dependencies&quot;: &#123; &quot;jquery&quot;: &quot;~2.0.3&quot; &#125;&#125; 注意看，它已经加入了jQuery依赖关系。 现在假设也想用twitter bootstrap，我们可以用下面的命令安装twitter bootstrap并更新bower.json文件： 1$ bower install bootstrap --save 它会自动安装最新版本的bootstrap并更新bower.json文件： 12345678910111213141516171819&#123; &quot;name&quot;: &quot;blog&quot;, &quot;version&quot;: &quot;0.0.1&quot;, &quot;authors&quot;: [ &quot;Shekhar Gulati &lt;shekhargulati84@gmail.com&gt;&quot; ], &quot;license&quot;: &quot;MIT&quot;, &quot;ignore&quot;: [ &quot;**/.*&quot;, &quot;node_modules&quot;, &quot;bower_components&quot;, &quot;test&quot;, &quot;tests&quot; ], &quot;dependencies&quot;: &#123; &quot;jquery&quot;: &quot;~2.0.3&quot;, &quot;bootstrap&quot;: &quot;~3.0.0&quot; &#125;&#125; 这就是今天的学习，希望能让你对bower有个足够的了解，最好可以自己尝试一下。 原文 Day 1: Bower–Manage Your Client Side Dependencies翻译 SegmentFault","categories":[{"name":"30天学习30种新技术系列","slug":"30天学习30种新技术系列","permalink":"https://vincentruan.github.io/categories/30天学习30种新技术系列/"}],"tags":[{"name":"30天学习30种新技术系列","slug":"30天学习30种新技术系列","permalink":"https://vincentruan.github.io/tags/30天学习30种新技术系列/"}]},{"title":"30天学习30种新技术系列","slug":"30-天学习-30-种新技术系列","date":"2018-05-26T14:27:27.000Z","updated":"2018-05-26T14:49:45.231Z","comments":true,"path":"2018/05/26/30-天学习-30-种新技术系列/","link":"","permalink":"https://vincentruan.github.io/2018/05/26/30-天学习-30-种新技术系列/","excerpt":"","text":"编者注：我们发现了比较有趣的系列文章《30 天学习 30 种新技术》，准备翻译，一天一篇更新，年终礼包。以下是译文，英文标题表示还未翻译，附原文链接；中文标题表示已翻译，附译文链接。 更新：全系列已经全部翻译完成。 让你 30 天学习 30 种新技术，你会觉得这是挑战吗？ 我已经接受了挑战，我会在一个月的时间内每天学习一门新技术，挑战开始于 2013 年 10 月 29 日。下面就是我将要学习的新技术的列表，我会把每天学到的内容写出来。在我每天正常的工作之后，我会花几个小时学习一门新技术，再用一小时将今天学到的写在博客上。这项活动的目的是熟悉许多在开发者社区所使用的新技术。 我会把重点放在 JavaScript 及其相关技术的学习上，当然也会去了解一下像 Java 这类我比较感兴趣的其他技术。我也可能会在一门技术上花费好几天的时间，但我每次会选择和这门技术相关的不同的主题来讲。只要是有意义的，我将尽量展示它如何与 OpenShift 工作，我希望这是一次充满乐趣并能学到很多东西的旅程。（你可以在 twitter 上follow 我） 下边是学习列表： 2013.10.29 - Day 1: Bower —— 管理你的客户端依赖关系 2013.10.30 - Day 2: AngularJS —— 对 AngularJS 的初步认识 2013.10.31 - Day 3: Flask —— 使用 Python 和 OpenShift 进行即时 Web 开发 2013.11.01 - Day 4: PredictionIO —— 如何创建一个博客推荐器 2013.11.02 - Day 5: GruntJS —— 重复乏味的工作总会有人做（反正我不做） 2013.11.03 - Day 6: 在 Java 虚拟机上使用 Grails 进行快速 Web 开发 2013.11.04 - Day 7: GruntJS 在线重载 提升生产率至新境界 2013.11.05 - Day 8: Harp.JS —— 现代静态 Web 服务器 2013.11.06 - Day 9: TextBlob —— 对文本进行情感分析 2013.11.07 - Day 10: PhoneGap —— 开发手机应用如此简单 2013.11.08 - Day 11: AeroGear 推送服务器：使应用的通知推送变得简单 2013.11.09 - Day 12: OpenCV —— Java 开发者的人脸检测 2013.11.10 - Day 13: Dropwizard —— 非常棒的 Java REST 服务器栈 2013.11.11 - Day14：使用斯坦福 NER 软件包实现你自己的命名实体识别器（Named Entity Recognition，NER） 2013.11.12 - Day 15：Meteor —— 从零开始创建一个 Web 应用 2013.11.13 - Day 16: Goose Extractor —— 好用的文章提取工具 2013.11.14 - Day 17: 使用 JBoss Forge 和 OpenShift 构建部署 JAVA EE 6 应用 2013.11.15 - Day 18: BoilerPipe —— Java开发者的文章提取工具 2013.11.16 - Day 19: EmberJS 入门指南 2013.11.17 - Day 20: 斯坦福CoreNLP —— 用 Java 给 Twitter 情感分析 2013.11.18 - Day 21：Docker 入门教程 2013.11.19 - Day 22： 使用 Spring、MongoDB 和 AngularJS 开发单页面应用 2013.11.20 - Day 23： 使用 TimelineJS 构建精美的时间轴 2013.11.21 - Day 24: 使用 Yeoman 自动构建 Ember 项目 2013.11.22 - Day 25: Tornado —— 联合 Tornado、MongoDB 和 AngularJS 进行应用开发 2013.11.23 - Day 26: TogetherJS —— 让我们一起来编程！ 2013.11.24 - Day 27: Restify —— 在Node.js中构建正确的REST Web服务 2013.11.25 - Day 28: OpenShift 的 Eclipse 集成 2013.11.26 - Day 29: 编写你的第一个 Google Chrome 扩展程序 2013.11.27 - Day 30: Play Framework —— Java 开发者的梦想框架 原文 Learning 30 Technologies in 30 Days: A Developer Challenge翻译 SegmentFault","categories":[{"name":"30天学习30种新技术系列","slug":"30天学习30种新技术系列","permalink":"https://vincentruan.github.io/categories/30天学习30种新技术系列/"}],"tags":[{"name":"30天学习30种新技术系列","slug":"30天学习30种新技术系列","permalink":"https://vincentruan.github.io/tags/30天学习30种新技术系列/"}]},{"title":"教你免费搭建个人博客，Hexo&Github","slug":"教你免费搭建个人博客，Hexo-Github","date":"2018-05-26T09:39:47.000Z","updated":"2018-05-26T10:11:28.716Z","comments":true,"path":"2018/05/26/教你免费搭建个人博客，Hexo-Github/","link":"","permalink":"https://vincentruan.github.io/2018/05/26/教你免费搭建个人博客，Hexo-Github/","excerpt":"","text":"什么是 Hexo？https://hexo.io/zh-cn/docs/ Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 一、配置Github首先注册、登录 https://github.com/ 记住自己的Username（很重要） 然后右上角选择 Create a new repository https://github.com/new Repository name （填自己的名字） yourname.github.io(yourname与你的注册用户名一致,这个就是你博客的域名了) 例如，我的域名是github.com/zhihuya，就填入zhihuya.github.io。成功后出现下面的画面 二、环境安装（node、git）1、安装 Node.js https://nodejs.org/en/ 2、安装 Git https://github.com/waylau/git-for-win Git教程 https://github.com/waylau/git-for-win廖雪峰老师的教程，非常好。 3、安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，名称和邮箱是Github上的 4、安装 Hexo。所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。 1$ npm install -g hexo-cli （使用的cmder，超级好用~~。等待时间可能有点长） 好了到这一步我们环境全部安装好了。 三、设置在电脑F盘（自己随意）目录下新建文件夹 test，进入test，按住Shift键点击鼠标右键 因为我有安装Cmder，没有安装的点击“在此处打开命令窗口”，输入 1hexo init blog 稍微等待下，速度有点慢。成功提示 1INFO Start blogging with Hexo! 因为你初始化hexo 之后source目录下自带一篇hello world文章, 所以直接执行下方命令 123456$ hexo generate# 启动本地服务器$ hexo server# 在浏览器输入 http://localhost:4000/就可以看见网页和模板了INFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 访问http://localhost:4000/，便可以看到网站初步的模样，不要激动，我们还要把网页发布到Github上去。 重新打开CMD，输入： 1ssh-keygen -t rsa -C &quot;Github的注册邮箱地址&quot; 一路Enter过来就好，得到信息： 1Your public key has been saved in /c/Users/user/.ssh/id_rsa.pub. 找到该文件，打开（sublime text），Ctrl + a复制里面的所有内容，然后进入Sign in to GitHub：https://github.com/settings/ssh New SSH key ——Title：blog —— Key：输入刚才复制的—— Add SSH key 四、配置博客在blog目录下，用sublime打开_config.yml文件，修改参数信息 特别提醒，在每个参数的：后都要加一个空格 修改网站相关信息 123456title: 崔斯特测试所用博客subtitle: 副标题description: 网页描述author: 崔斯特language: zh-CNtimezone: Asia/Shanghai 配置部署（我的是zhihuya，修改成自己的） 1234deploy: type: git repo: https://github.com/zhihuya/zhihuya.github.io.git branch: master 五、发表文章在CMD中输入 12$ hexo new &quot;崔斯特测试文章&quot;INFO Created: F:\\test\\blog\\source\\_posts\\崔斯特测试文章.md 找到该文章，打开，使用Markdown语法，该语法介绍可以查看https://zhangslob.github.io/2017/02/26/%E5%88%A9%E7%94%A8HEXO%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2/ 123456---title: 崔斯特测试文章date: 2017-02-28 13:03:44tags:---这是一篇测试文章，欢迎关注作者博客[1]: https://zhangslob.github.io/ 保存，然后执行下列步骤： 12345678910111213141516F:\\test\\blog$ hexo cleanINFO Deleted database.INFO Deleted public folder.F:\\test\\blog$ hexo generateINFO Start processingINFO Files loaded in 1.48 s#省略INFO 29 files generated in 4.27 sF:\\test\\blog$ hexo serverINFO Start processingINFO Hexo is running at http://localhost:4000/. Press Ctrl+C to stop. 这个时候，打开http://localhost:4000/，发现刚才的文章已经成功了 最后一步，发布到网上，执行： 123456F:\\test\\blog$ hexo deployINFO Deploying: gitINFO Clearing .deploy_git folder...INFO Copying files from public folder...#省略 其中会跳出Github登录，直接登录，如果没有问题输入zhihuya（换成你的）.github.io/ 崔斯特测试所用博客https://zhihuya.github.io/ 然后就可以看到已经发布了 六、总结发布文章的步骤： 1、hexo new 创建文章 2、Markdown语法编辑文章 3、部署（所有打开CMD都是在blog目录下） 1234hexo clean #清除缓存 网页正常情况下可以忽略此条命令hexo generate #生成hexo server #启动服务预览，非必要，可本地浏览网页hexo deploy #部署发布 简写Tips： hexo n “我的博客” == hexo new “我的博客” #新建文章 hexo p == hexo publish hexo g == hexo generate#生成 hexo s == hexo server #启动服务预览 hexo d == hexo deploy#部署 如果在执行 hexo deploy 后,出现 error deployer not found:github 的错误，执行： 1npm install hexo-deployer-git --save 出错是正常的，出错了自己先百度或google，实在不知道的可以询问我。 托管的话不仅有github可以用，还有个国内的https://coding.net/可选 引用说明 作者：zhangslob 链接：https://zhangslob.github.io/2017/02/28/教你免费搭建个人博客，Hexo-Github","categories":[{"name":"Hexo使用攻略","slug":"Hexo使用攻略","permalink":"https://vincentruan.github.io/categories/Hexo使用攻略/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://vincentruan.github.io/tags/hexo/"},{"name":"个人博客搭建","slug":"个人博客搭建","permalink":"https://vincentruan.github.io/tags/个人博客搭建/"},{"name":"github","slug":"github","permalink":"https://vincentruan.github.io/tags/github/"}]},{"title":"Hexo使用攻略-添加分类及标签","slug":"Hexo使用攻略-添加分类及标签","date":"2018-05-26T09:16:29.000Z","updated":"2018-05-26T09:33:48.943Z","comments":true,"path":"2018/05/26/Hexo使用攻略-添加分类及标签/","link":"","permalink":"https://vincentruan.github.io/2018/05/26/Hexo使用攻略-添加分类及标签/","excerpt":"","text":"1、创建“分类”选项1.1 生成“分类”页并添加tpye属性打开命令行，进入博客所在文件夹。执行命令 1$ hexo new page categories 成功后会提示： 1INFO Created: ~/Documents/blog/source/categories/index.md 根据上面的路径，找到index.md这个文件，打开后默认内容是这样的： 1234---title: 文章分类date: 2017-05-27 13:47:40--- 添加type: &quot;categories&quot;到内容中，添加后是这样的： 123456---title: 文章分类date: 2017-05-27 13:47:40type: &quot;categories&quot;comments: false--- 保存并关闭文件。 1.2 给文章添加“categories”属性打开需要添加分类的文章，为其添加categories属性。下方的categories: web前端表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。 123456---title: jQuery对表单的操作及更多应用date: 2017-05-26 12:12:57categories: - web前端--- 至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了categories: xxx的文章才会被收录到首页的“分类”中。 2、创建“标签”选项2.1 生成“标签”页并添加tpye属性打开命令行，进入博客所在文件夹。执行命令 1$ hexo new page tags 成功后会提示： 1INFO Created: ~/Documents/blog/source/tags/index.md 根据上面的路径，找到index.md这个文件，打开后默认内容是这样的： 1234---title: 标签date: 2017-05-27 14:22:08--- 添加type: &quot;tags&quot;到内容中，添加后是这样的： 123456---title: 文章分类date: 2017-05-27 13:47:40type: &quot;tags&quot;comments: false--- 保存并关闭文件。 2.2 给文章添加“tags”属性打开需要添加标签的文章，为其添加tags属性。下方的tags:下方的- jQuery - 表格 - 表单验证就是这篇文章的标签了 12345678910---title: jQuery对表单的操作及更多应用date: 2017-05-26 12:12:57categories: - web前端tags:- jQuery- 表格- 表单验证--- 至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了tags: xxx的文章才会被收录到首页的“标签”中。 细心的朋友可能已经发现，这两个的设置几乎一模一样！是的，没错，思路都是一样的。所以我们可以打开scaffolds/post.md文件，在tages:上面加入categories:,保存后，之后执行hexo new 文章名命令生成的文件，页面里就有categories:项了。 scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://vincentruan.github.io/tags/hexo/"}]},{"title":"Markdown吃了吗?","slug":"Markdown吃了吗","date":"2018-05-20T11:00:56.000Z","updated":"2018-05-26T09:38:15.933Z","comments":true,"path":"2018/05/20/Markdown吃了吗/","link":"","permalink":"https://vincentruan.github.io/2018/05/20/Markdown吃了吗/","excerpt":"","text":"markdown 介绍 Markdown 是一种轻量级标记语言，它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。 - wikipedia Daring Fireball: Markdown Project markdown Markdown wikipedia 介绍 MultiMarkdown 引入更多标记特性和输出选项的改进版Markdown why markdown 纯文本，兼容性极强，可以用任意文本编辑器打开. 语法简单（the syntax is so simple you can barely call it “syntax.”），零学习成本，极好的可读性，让你专注于文字写作而不是页面排版，并且兼容 HTML，simple but powerful . 格式转换方便，Markdown 的文本你可以轻松转换为 html、pdf、epub、电子书等。 适合团队协作，可以使用 git/svn 等进行版本控制管理。 阳志平：为什么 Markdown 成为科技界写作主流？ 图灵社区：用Markdown来写自由书籍-开源技术的方案 目前很多在线服务商均支持使用markdown编写： Github 最先支持，使用Markdown的一个分支版本来格式化评论、消息以及其它内容。 Stack Overflow 使用一种 Markdown 的分支作为它的文章格式化系统。 博客园 国内技术人的博客家园，每天活跃上万用户，高质量社区。 CSDN 号称全球最大中文IT社区，涵盖了多种语言、架构、博客、俱乐部等模块的技术论坛。 图灵社区 使用markdown语法供用户写作电子书. 简书 重拾文字的力量，交流故事，沟通想法，一个基于内容分享的社区。 为知笔记 国内顶尖笔记软件，支持使用Markdown语法编辑笔记。 有道云笔记 最新版本开始支持，并且支持一些扩展语法。 …… markdown 使用 Markdown: Basics （快速入门） Markdown 完整语法说明 (简体中文版) Github: Mastering Markdown GitHub 帮助中关于 Markdown 的语法帮助 MarkDown 语法团队规范 语法规范简洁版 Markdown Style Guide 语法规范复杂版 Markdown Cheatsheet GitHub Flavored Markdown GitHub 使用的 Markdown 语法，略微不同于标准 Markdown 语法。提供了一些更加简洁的语法，类似 URL autolinking, Strikethrough, Fenced code blocks, Syntax highlighting 等等 MultiMarkdown 介绍 对 markdown 进行的扩展功能 markdown 工具 马克飞象 web/chrome 离线客户端，markdown 全功能支持，最大特点内容能够同步到印象笔记（evernote）中，笔记的用户重度推荐，按年收费，目前作者 @weibo 正在开发跨平台的客户端。 StackEdit 在线 markdown 编辑器，可同步文档到Google Drive和 Dropbox，可发布文章到 Blogger，GitHub，Google Drive，Dropbox，Tumblr和WordPress。 cmd 作业部落 支持 win/mac/linux/web/chrome 全平台，支持实时同步预览，支持代码高亮、数学公式，区分写作和阅读模式，支持在线存储，分享文稿网址。 MacDown OSX 上的 Markdown 开源编辑器，支持代码高亮，实时预览等。 MarkdownPad Windows上的全功能Markdown编辑器，推荐win上使用，基本全部功能。 Marked2 多种 md 显示方案，不能够编辑文件，只用来展示文件，配合 subline text markdown edit 插件，完美使用； MWeb 专业的 Markdown 写作、记笔记、静态博客生成软件，由国内独立开发者@oulvhai开发，支持Toc、Table、代码高亮、支持发布到 Wordrpess 博客、支持 Metaweblog API 的博客服务、Wordpress.com、Evernote 和印象笔记、Blogger、Scriptogr.am、Tumblr等服务。 Haroopad 又一款简洁多功能的跨平台编辑器，全功能支持，再加上对社交网络友好的连接，多种主题等，感兴趣的可以看看。详情参考issue#1 Typora 不分栏，实时展示看到写出的内容，对于不喜欢「两栏」设计的人来说是一个选择 MarkEditor - ME MarkEditor以markdown为基础语法，多标签栏、文件夹结构，纯文本的方式带来优雅、高效的体验。 确实很棒的工具，带来很多新鲜的理念，支持、重构、提升 markdown，加快写作的体验。具体可以查看几篇评测文章： 简洁与强大，从不是矛盾的事物：写作工具 MarkEditor 功能详解 不止是一款简单的码字工具：MarkEditor 进阶功能介绍 码字必备：18 款优秀的 Markdown 写作工具 | 2015 年度盘点 喜欢哪一款，就看你的了。 这几款就够了，多了就有选择症 …… reference 参考 Why Markdown? A two-minute explanation 简书：献给写作者的 Markdown 新手指南 Markdown simple world","categories":[],"tags":[{"name":"markdown","slug":"markdown","permalink":"https://vincentruan.github.io/tags/markdown/"}]},{"title":"Hexo Hello World","slug":"hexo-hello-world","date":"2018-05-20T10:49:47.670Z","updated":"2018-05-26T09:38:05.135Z","comments":true,"path":"2018/05/20/hexo-hello-world/","link":"","permalink":"https://vincentruan.github.io/2018/05/20/hexo-hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[{"name":"Hexo使用攻略","slug":"Hexo使用攻略","permalink":"https://vincentruan.github.io/categories/Hexo使用攻略/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://vincentruan.github.io/tags/hexo/"}]}]}