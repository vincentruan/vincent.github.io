<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>zookeeper入门摘要</title>
    <url>/2020/02/14/zookeeper%E5%85%A5%E9%97%A8%E6%91%98%E8%A6%81/</url>
    <content><![CDATA[<h2 id="1-ZooKeeper是什么？"><a href="#1-ZooKeeper是什么？" class="headerlink" title="1.ZooKeeper是什么？"></a>1.ZooKeeper是什么？</h2><p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，它是集群的管理者，监视着集群中各个节点的状态根据节点提交的反馈进行下一步合理操作。最终，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</p>
<p>客户端的读请求可以被集群中的任意一台机器处理，如果读请求在节点上注册了监听器，这个监听器也是由所连接的zookeeper机器来处理。对于写请求，这些请求会同时发给其他zookeeper机器并且达成一致后，请求才会返回成功。因此，随着zookeeper的集群机器增多，读请求的吞吐会提高但是写请求的吞吐会下降。</p>
<p>有序性是zookeeper中非常重要的一个特性，所有的更新都是全局有序的，每个更新都有一个唯一的时间戳，这个时间戳称为zxid（Zookeeper Transaction Id）。而读请求只会相对于更新有序，也就是读请求的返回结果中会带有这个zookeeper最新的zxid。</p>
<h2 id="2-ZooKeeper提供了什么？"><a href="#2-ZooKeeper提供了什么？" class="headerlink" title="2.ZooKeeper提供了什么？"></a>2.ZooKeeper提供了什么？</h2><p>1、文件系统</p>
<p>2、通知机制</p>
<h2 id="3-Zookeeper文件系统"><a href="#3-Zookeeper文件系统" class="headerlink" title="3.Zookeeper文件系统"></a>3.Zookeeper文件系统</h2><p>Zookeeper提供一个多层级的节点命名空间（节点称为znode）。与文件系统不同的是，这些节点都可以设置关联的数据，而文件系统中只有文件节点可以存放数据而目录节点不行。Zookeeper为了保证高吞吐和低延迟，在内存中维护了这个树状的目录结构，这种特性使得Zookeeper不能用于存放大量的数据，每个节点的存放数据上限为1M。</p>
<h2 id="4-四种类型的znode"><a href="#4-四种类型的znode" class="headerlink" title="4.四种类型的znode"></a>4.四种类型的znode</h2><h3 id="1、PERSISTENT-持久化目录节点"><a href="#1、PERSISTENT-持久化目录节点" class="headerlink" title="1、PERSISTENT-持久化目录节点"></a>1、PERSISTENT-持久化目录节点</h3><p>客户端与zookeeper断开连接后，该节点依旧存在</p>
<h3 id="2、PERSISTENT-SEQUENTIAL-持久化顺序编号目录节点"><a href="#2、PERSISTENT-SEQUENTIAL-持久化顺序编号目录节点" class="headerlink" title="2、PERSISTENT_SEQUENTIAL-持久化顺序编号目录节点"></a>2、PERSISTENT_SEQUENTIAL-持久化顺序编号目录节点</h3><p>客户端与zookeeper断开连接后，该节点依旧存在，只是Zookeeper给该节点名称进行顺序编号</p>
<h3 id="3、EPHEMERAL-临时目录节点"><a href="#3、EPHEMERAL-临时目录节点" class="headerlink" title="3、EPHEMERAL-临时目录节点"></a>3、EPHEMERAL-临时目录节点</h3><p>客户端与zookeeper断开连接后，该节点被删除</p>
<h3 id="4、EPHEMERAL-SEQUENTIAL-临时顺序编号目录节点"><a href="#4、EPHEMERAL-SEQUENTIAL-临时顺序编号目录节点" class="headerlink" title="4、EPHEMERAL_SEQUENTIAL-临时顺序编号目录节点"></a>4、EPHEMERAL_SEQUENTIAL-临时顺序编号目录节点</h3><p>客户端与zookeeper断开连接后，该节点被删除，只是Zookeeper给该节点名称进行顺序编号</p>
<pre class="mermaid">graph TB;
    A["/"]---B["/NameServer"]---F["/Server1"];
    A---C["/Configuration"];
    A---D["/GroupMembers"]---M1["/Member1"];
    A---E["/Apps"]---A1["/App1"];
    B---G["/Server2"];
    D---M2["/Member2"];
    E---A2["/App2"];
    E---A3["/App3"]---SA1["/SubApp1"];
    A3---SA2["/SubApp2"];</pre>

<h2 id="5-Zookeeper通知机制"><a href="#5-Zookeeper通知机制" class="headerlink" title="5.Zookeeper通知机制"></a>5.Zookeeper通知机制</h2><p>client端会对某个znode建立一个watcher事件，当该znode发生变化时，这些client会收到zk的通知，然后client可以根据znode变化来做出业务上的改变等。</p>
<h2 id="6-Zookeeper做了什么？"><a href="#6-Zookeeper做了什么？" class="headerlink" title="6.Zookeeper做了什么？"></a>6.Zookeeper做了什么？</h2><p>1、命名服务</p>
<p>2、配置管理</p>
<p>3、集群管理</p>
<p>4、分布式锁</p>
<p>5、队列管理</p>
<h2 id="7-zk的命名服务（文件系统）"><a href="#7-zk的命名服务（文件系统）" class="headerlink" title="7.zk的命名服务（文件系统）"></a>7.zk的命名服务（文件系统）</h2><p>命名服务是指通过指定的名字来获取资源或者服务的地址，利用zk创建一个全局的路径，即是唯一的路径，这个路径就可以作为一个名字，指向集群中的集群，提供的服务的地址，或者一个远程的对象等等。</p>
<h2 id="8-zk的配置管理（文件系统、通知机制）"><a href="#8-zk的配置管理（文件系统、通知机制）" class="headerlink" title="8.zk的配置管理（文件系统、通知机制）"></a>8.zk的配置管理（文件系统、通知机制）</h2><p>程序分布式的部署在不同的机器上，将程序的配置信息放在zk的znode下，当有配置发生改变时，也就是znode发生变化时，可以通过改变zk中某个目录节点的内容，利用watcher通知给各个客户端，从而更改配置。</p>
<h2 id="9-Zookeeper集群管理（文件系统、通知机制）"><a href="#9-Zookeeper集群管理（文件系统、通知机制）" class="headerlink" title="9.Zookeeper集群管理（文件系统、通知机制）"></a>9.Zookeeper集群管理（文件系统、通知机制）</h2><p>所谓集群管理无在乎两点：是否有机器退出和加入、选举master。</p>
<p>对于第一点，所有机器约定在父目录下创建临时目录节点，然后监听父目录节点的子节点变化消息。一旦有机器挂掉，该机器与 zookeeper的连接断开，其所创建的临时目录节点被删除，所有其他机器都收到通知：某个兄弟目录被删除，于是，所有人都知道：它上船了。</p>
<p>新机器加入也是类似，所有机器收到通知：新兄弟目录加入，highcount又有了，对于第二点，我们稍微改变一下，所有机器创建临时顺序编号目录节点，每次选取编号最小的机器作为master就好。</p>
<h2 id="10-Zookeeper分布式锁（文件系统、通知机制）"><a href="#10-Zookeeper分布式锁（文件系统、通知机制）" class="headerlink" title="10.Zookeeper分布式锁（文件系统、通知机制）"></a>10.Zookeeper分布式锁（文件系统、通知机制）</h2><p>有了zookeeper的一致性文件系统，锁的问题变得容易。锁服务可以分为两类，一个是保持独占，另一个是控制时序。</p>
<p>对于第一类，我们将zookeeper上的一个znode看作是一把锁，通过createznode的方式来实现。所有客户端都去创建 /distribute_lock 节点，最终成功创建的那个客户端也即拥有了这把锁。用完删除掉自己创建的distribute_lock 节点就释放出锁。</p>
<p>对于第二类， /distribute_lock 已经预先存在，所有客户端在它下面创建临时顺序编号目录节点，和选master一样，编号最小的获得锁，用完删除，依次方便。</p>
<h2 id="11-获取分布式锁的流程"><a href="#11-获取分布式锁的流程" class="headerlink" title="11.获取分布式锁的流程"></a>11.获取分布式锁的流程</h2><p> <img src="/2020/02/14/zookeeper入门摘要/zookeeper_locker_directory.png" alt="获取分布式锁的流程"></p>
<p>在获取分布式锁的时候在locker节点下创建临时顺序节点，释放锁的时候删除该临时节点。客户端调用createNode方法在locker下创建临时顺序节点，然后调用getChildren(“locker”)来获取locker下面的所有子节点，注意此时不用设置任何Watcher。客户端获取到所有的子节点path之后，如果发现自己创建的节点在所有创建的子节点序号最小，那么就认为该客户端获取到了锁。如果发现自己创建的节点并非locker所有子节点中最小的，说明自己还没有获取到锁，此时客户端需要找到比自己小的那个节点，然后对其调用exist()方法，同时对其注册事件监听器。之后，让这个被关注的节点删除，则客户端的Watcher会收到相应通知，此时再次判断自己创建的节点是否是locker子节点中序号最小的，如果是则获取到了锁，如果不是则重复以上步骤继续获取到比自己小的一个节点并注册监听。当前这个过程中还需要许多的逻辑判断。</p>
<p> <img src="/2020/02/14/zookeeper入门摘要/zookeeper入门摘要-zookeeper_get_lock_flow.png" alt="获取分布式锁的流程"></p>
<p>代码的实现主要是基于互斥锁，获取分布式锁的重点逻辑在于BaseDistributedLock，实现了基于Zookeeper实现分布式锁的细节。</p>
<h2 id="12-Zookeeper队列管理（文件系统、通知机制）"><a href="#12-Zookeeper队列管理（文件系统、通知机制）" class="headerlink" title="12.Zookeeper队列管理（文件系统、通知机制）"></a>12.Zookeeper队列管理（文件系统、通知机制）</h2><p>两种类型的队列：</p>
<p>1、同步队列，当一个队列的成员都聚齐时，这个队列才可用，否则一直等待所有成员到达。</p>
<p>2、队列按照 FIFO 方式进行入队和出队操作。</p>
<p>第一类，在约定目录下创建临时目录节点，监听节点数目是否是我们要求的数目。</p>
<p>第二类，和分布式锁服务中的控制时序场景基本原理一致，入列有编号，出列按编号。在特定的目录下创建PERSISTENT_SEQUENTIAL节点，创建成功时Watcher通知等待的队列，队列删除序列号最小的节点用以消费。此场景下Zookeeper的znode用于消息存储，znode存储的数据就是消息队列中的消息内容，SEQUENTIAL序列号就是消息的编号，按序取出即可。由于创建的节点是持久化的，所以不必担心队列消息的丢失问题。</p>
<h2 id="13-Zookeeper数据复制"><a href="#13-Zookeeper数据复制" class="headerlink" title="13.Zookeeper数据复制"></a>13.Zookeeper数据复制</h2><p>Zookeeper作为一个集群提供一致的数据服务，自然，它要在所有机器间做数据复制。数据复制的好处：</p>
<p>1、容错：一个节点出错，不致于让整个系统停止工作，别的节点可以接管它的工作；</p>
<p>2、提高系统的扩展能力 ：把负载分布到多个节点上，或者增加节点来提高系统的负载能力；</p>
<p>3、提高性能：让客户端本地访问就近的节点，提高用户访问速度。</p>
<p>从客户端读写访问的透明度来看，数据复制集群系统分下面两种：</p>
<p>1、写主(WriteMaster) ：对数据的修改提交给指定的节点。读无此限制，可以读取任何一个节点。这种情况下客户端需要对读与写进行区别，俗称读写分离；</p>
<p>2、写任意(Write Any)：对数据的修改可提交给任意的节点，跟读一样。这种情况下，客户端对集群节点的角色与变化透明。</p>
<p>对zookeeper来说，它采用的方式是写任意。通过增加机器，它的读吞吐能力和响应能力扩展性非常好，而写，随着机器的增多吞吐能力肯定下降（这也是它建立observer的原因），而响应能力则取决于具体实现方式，是延迟复制保持最终一致性，还是立即复制快速响应。</p>
<h2 id="14-Zookeeper工作原理"><a href="#14-Zookeeper工作原理" class="headerlink" title="14.Zookeeper工作原理"></a>14.Zookeeper工作原理</h2><p>Zookeeper 的核心是原子广播，这个机制保证了各个Server之间的同步。实现这个机制的协议叫做Zab协议。Zab协议有两种模式，它们分别是恢复模式（选主）和广播模式（同步）。当服务启动或者在领导者崩溃后，Zab就进入了恢复模式，当领导者被选举出来，且大多数Server完成了和 leader的状态同步以后，恢复模式就结束了。状态同步保证了leader和Server具有相同的系统状态。</p>
<h2 id="15-zookeeper是如何保证事务的顺序一致性的？"><a href="#15-zookeeper是如何保证事务的顺序一致性的？" class="headerlink" title="15.zookeeper是如何保证事务的顺序一致性的？"></a>15.zookeeper是如何保证事务的顺序一致性的？</h2><p>zookeeper采用了递增的事务Id来标识，所有的proposal（提议）都在被提出的时候加上了zxid，zxid实际上是一个64位的数字，高32位是epoch（时期; 纪元; 世; 新时代）用来标识leader是否发生改变，如果有新的leader产生出来，epoch会自增，低32位用来递增计数。当新产生proposal的时候，会依据数据库的两阶段过程，首先会向其他的server发出事务执行请求，如果超过半数的机器都能执行并且能够成功，那么就会开始执行。</p>
<h2 id="16-Zookeeper-下-Server工作状态"><a href="#16-Zookeeper-下-Server工作状态" class="headerlink" title="16.Zookeeper 下 Server工作状态"></a>16.Zookeeper 下 Server工作状态</h2><p>每个Server在工作过程中有三种状态：</p>
<p>LOOKING：当前Server不知道leader是谁，正在搜寻</p>
<p>LEADING：当前Server即为选举出来的leader</p>
<p>FOLLOWING：leader已经选举出来，当前Server与之同步</p>
<h2 id="17-zookeeper是如何选取主leader的？"><a href="#17-zookeeper是如何选取主leader的？" class="headerlink" title="17.zookeeper是如何选取主leader的？"></a>17.zookeeper是如何选取主leader的？</h2><p>当leader崩溃或者leader失去大多数的follower，这时zk进入恢复模式，恢复模式需要重新选举出一个新的leader，让所有的Server都恢复到一个正确的状态。Zk的选举算法有两种：一种是基于basic paxos实现的，另外一种是基于fast paxos算法实现的。系统默认的选举算法为fast paxos。</p>
<p>1、Zookeeper选主流程(basic paxos)</p>
<p>（1）选举线程由当前Server发起选举的线程担任，其主要功能是对投票结果进行统计，并选出推荐的Server；</p>
<p>（2）选举线程首先向所有Server发起一次询问(包括自己)；</p>
<p>（3）选举线程收到回复后，验证是否是自己发起的询问(验证zxid是否一致)，然后获取对方的id(myid)，并存储到当前询问对象列表中，最后获取对方提议的leader相关信息(id,zxid)，并将这些信息存储到当次选举的投票记录表中；</p>
<p>（4）收到所有Server回复以后，就计算出zxid最大的那个Server，并将这个Server相关信息设置成下一次要投票的Server；</p>
<p>（5）线程将当前zxid最大的Server设置为当前Server要推荐的Leader，如果此时获胜的Server获得n/2 + 1的Server票数，设置当前推荐的leader为获胜的Server，将根据获胜的Server相关信息设置自己的状态，否则，继续这个过程，直到leader被选举出来。通过流程分析我们可以得出：要使Leader获得多数Server的支持，则Server总数必须是奇数2n+1，且存活的Server的数目不得少于n+1. 每个Server启动后都会重复以上流程。在恢复模式下，如果是刚从崩溃状态恢复的或者刚启动的server还会从磁盘快照中恢复数据和会话信息，zk会记录事务日志并定期进行快照，方便在恢复时进行状态恢复。</p>
<p><img src="/2020/02/14/zookeeper入门摘要/zookeeper入门摘要-zk_epoch.png" alt=""></p>
<p>2、Zookeeper选主流程(basic paxos) fast paxos流程是在选举过程中，某Server首先向所有Server提议自己要成为leader，当其它Server收到提议以后，解决epoch和 zxid的冲突，并接受对方的提议，然后向对方发送接受提议完成的消息，重复这个流程，最后一定能选举出Leader。</p>
<p><img src="/2020/02/14/zookeeper入门摘要/zookeeper入门摘要-zookeeper_elect_master.png" alt="img"></p>
<h2 id="18-Zookeeper同步流程"><a href="#18-Zookeeper同步流程" class="headerlink" title="18.Zookeeper同步流程"></a>18.Zookeeper同步流程</h2><p>选完Leader以后，zk就进入状态同步过程。</p>
<p>1、Leader等待server连接；</p>
<p>2、Follower连接leader，将最大的zxid发送给leader；</p>
<p>3、Leader根据follower的zxid确定同步点；</p>
<p>4、完成同步后通知follower 已经成为uptodate状态；</p>
<p>5、Follower收到uptodate消息后，又可以重新接受client的请求进行服务了。</p>
<pre class="mermaid">sequenceDiagram
    participant L as Leader
    participant F as Follower
    F->>L: 1.Fllower连接Leader，发送最大zxid
    L->>F: 2.Leader确定同步点，发送同步消息
    F->>L: 3.完成同步，通知Leader，并修改自身状态</pre>

<h2 id="19-分布式通知和协调"><a href="#19-分布式通知和协调" class="headerlink" title="19.分布式通知和协调"></a>19.分布式通知和协调</h2><p>对于系统调度来说：操作人员发送通知实际是通过控制台改变某个节点的状态，然后zk将这些变化发送给注册了这个节点的watcher的所有客户端。</p>
<p>对于执行情况汇报：每个工作进程都在某个目录下创建一个临时节点。并携带工作的进度数据，这样汇总的进程可以监控目录子节点的变化获得工作进度的实时的全局情况。</p>
<h2 id="20-机器中为什么会有leader？"><a href="#20-机器中为什么会有leader？" class="headerlink" title="20.机器中为什么会有leader？"></a>20.机器中为什么会有leader？</h2><p>在分布式环境中，有些业务逻辑只需要集群中的某一台机器进行执行，其他的机器可以共享这个结果，这样可以大大减少重复计算，提高性能，于是就需要进行leader选举。</p>
<h2 id="21-zk节点宕机如何处理？"><a href="#21-zk节点宕机如何处理？" class="headerlink" title="21.zk节点宕机如何处理？"></a>21.zk节点宕机如何处理？</h2><p>Zookeeper本身也是集群，推荐配置不少于3个服务器。Zookeeper自身也要保证当一个节点宕机时，其他节点会继续提供服务。</p>
<p>如果是一个Follower宕机，还有2台服务器提供访问，因为Zookeeper上的数据是有多个副本的，数据并不会丢失；</p>
<p>如果是一个Leader宕机，Zookeeper会选举出新的Leader。</p>
<p>ZK集群的机制是只要超过半数的节点正常，集群就能正常提供服务。只有在ZK节点挂得太多，只剩一半或不到一半节点能工作，集群才失效。</p>
<p>所以</p>
<p>3个节点的cluster可以挂掉1个节点(leader可以得到2票&gt;1.5)</p>
<p>2个节点的cluster就不能挂掉任何1个节点了(leader可以得到1票&lt;=1)</p>
<h2 id="22-zookeeper负载均衡和nginx负载均衡区别"><a href="#22-zookeeper负载均衡和nginx负载均衡区别" class="headerlink" title="22.zookeeper负载均衡和nginx负载均衡区别"></a>22.zookeeper负载均衡和nginx负载均衡区别</h2><p>zk的负载均衡是可以调控，nginx只是能调权重，其他需要可控的都需要自己写插件；但是nginx的吞吐量比zk大很多，应该说按业务选择用哪种方式。</p>
<h2 id="23-zookeeper-watch机制"><a href="#23-zookeeper-watch机制" class="headerlink" title="23.zookeeper watch机制"></a>23.zookeeper watch机制</h2><p>Watch机制官方声明：一个Watch事件是一个一次性的触发器，当被设置了Watch的数据发生了改变的时候，则服务器将这个改变发送给设置了Watch的客户端，以便通知它们。</p>
<p>Zookeeper机制的特点：</p>
<p>1、一次性触发数据发生改变时，一个watcher event会被发送到client，但是client只会收到一次这样的信息。</p>
<p>2、watcher event异步发送watcher的通知事件从server发送到client是异步的，这就存在一个问题，不同的客户端和服务器之间通过socket进行通信，由于网络延迟或其他因素导致客户端在不通的时刻监听到事件，由于Zookeeper本身提供了ordering guarantee，即客户端监听事件后，才会感知它所监视znode发生了变化。所以我们使用Zookeeper不能期望能够监控到节点每次的变化。Zookeeper只能保证最终的一致性，而无法保证强一致性。</p>
<p>3、数据监视Zookeeper有数据监视和子数据监视getdata() and exists()设置数据监视，getchildren()设置了子节点监视。</p>
<p>4、注册watcher getData、exists、getChildren</p>
<p>5、触发watcher create、delete、setData</p>
<p>6、setData()会触发znode上设置的data watch（如果set成功的话）。一个成功的create() 操作会触发被创建的znode上的数据watch，以及其父节点上的child watch。而一个成功的delete()操作将会同时触发一个znode的data watch和child watch（因为这样就没有子节点了），同时也会触发其父节点的child watch。</p>
<p>7、当一个客户端连接到一个新的服务器上时，watch将会被以任意会话事件触发。当与一个服务器失去连接的时候，是无法接收到watch的。而当client重新连接时，如果需要的话，所有先前注册过的watch，都会被重新注册。通常这是完全透明的。只有在一个特殊情况下，watch可能会丢失：对于一个未创建的znode的exist watch，如果在客户端断开连接期间被创建了，并且随后在客户端连接上之前又删除了，这种情况下，这个watch事件可能会被丢失。</p>
<p>8、Watch是轻量级的，其实就是本地JVM的Callback，服务器端只是存了是否有设置了Watcher的布尔类型</p>
]]></content>
      <categories>
        <category>架构设计</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>MyBatis中的九种设计模式</title>
    <url>/2020/02/12/MyBatis%E4%B8%AD%E7%9A%84%E4%B9%9D%E7%A7%8D%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<p>虽然我们都知道有26个设计模式，但是大多停留在概念层面，真实开发中很少遇到，Mybatis源码中使用了大量的设计模式，阅读源码并观察设计模式在其中的应用，能够更深入的理解设计模式。</p>
<p>Mybatis至少遇到了以下的设计模式的使用：</p>
<ol>
<li>Builder模式，例如SqlSessionFactoryBuilder、XMLConfigBuilder、XMLMapperBuilder、XMLStatementBuilder、CacheBuilder；</li>
<li>工厂模式，例如SqlSessionFactory、ObjectFactory、MapperProxyFactory；</li>
<li>单例模式，例如ErrorContext和LogFactory；</li>
<li>代理模式，Mybatis实现的核心，比如MapperProxy、ConnectionLogger，用的jdk的动态代理；还有executor.loader包使用了cglib或者javassist达到延迟加载的效果；</li>
<li>组合模式，例如SqlNode和各个子类ChooseSqlNode等；</li>
<li>模板方法模式，例如BaseExecutor和SimpleExecutor，还有BaseTypeHandler和所有的子类例如IntegerTypeHandler；</li>
<li>适配器模式，例如Log的Mybatis接口和它对jdbc、log4j等各种日志框架的适配实现；</li>
<li>装饰者模式，例如Cache包中的cache.decorators子包中等各个装饰者的实现；</li>
<li>迭代器模式，例如迭代器模式PropertyTokenizer；</li>
</ol>
<h3 id="1、Builder模式"><a href="#1、Builder模式" class="headerlink" title="1、Builder模式"></a>1、Builder模式</h3><p>Builder模式的定义是“将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。”，它属于创建类模式，一般来说，如果一个对象的构建比较复杂，超出了构造函数所能包含的范围，就可以使用工厂模式和Builder模式，相对于工厂模式会产出一个完整的产品，Builder应用于更加复杂的对象的构建，甚至只会构建产品的一个部分。</p>
<p><img src="/2020/02/12/MyBatis中的九种设计模式/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6L0JhcTVsWXBJdzdYamp6RzRiVmNyTkJBUFB0Qks5SnM5cThHeThva0Rvc3dNQ3FnQkw3Q21tN2ljSkFlSmR6ZGgyWm1EV3k5RkNSMndjMHZxaWIxOGVKNFEvNjQw.jpg" alt="img"></p>
<p>在Mybatis环境的初始化过程中，SqlSessionFactoryBuilder会调用XMLConfigBuilder读取所有的MybatisMapConfig.xml和所有的*Mapper.xml文件，构建Mybatis运行的核心对象Configuration对象，然后将该Configuration对象作为参数构建一个SqlSessionFactory对象。</p>
<p>其中XMLConfigBuilder在构建Configuration对象时，也会调用XMLMapperBuilder用于读取<code>*Mapper</code>文件，而XMLMapperBuilder会使用XMLStatementBuilder来读取和build所有的SQL语句。</p>
<p>在这个过程中，有一个相似的特点，就是这些Builder会读取文件或者配置，然后做大量的XpathParser解析、配置或语法的解析、反射生成对象、存入结果缓存等步骤，这么多的工作都不是一个构造函数所能包括的，因此大量采用了Builder模式来解决。</p>
<p>对于builder的具体类，方法都大都用<code>build*</code>开头，比如SqlSessionFactoryBuilder为例，它包含以下方法：</p>
<p><img src="/2020/02/12/MyBatis中的九种设计模式/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6L0JhcTVsWXBJdzdYamp6RzRiVmNyTkJBUFB0Qks5SnM5NmducW1ZZXUwTWFObWV3a1h6NkhqQVFjY2ZOUmliOFVBSWRJTmdmdWx2OWljM1BPa0cwQkNVb2cvNjQw.jpg" alt="img"></p>
<p>即根据不同的输入参数来构建SqlSessionFactory这个工厂对象。</p>
<h3 id="2、工厂模式"><a href="#2、工厂模式" class="headerlink" title="2、工厂模式"></a>2、工厂模式</h3><p>在Mybatis中比如SqlSessionFactory使用的是工厂模式，该工厂没有那么复杂的逻辑，是一个简单工厂模式。</p>
<p>简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。</p>
<p><img src="/2020/02/12/MyBatis中的九种设计模式/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6L0JhcTVsWXBJdzdYamp6RzRiVmNyTkJBUFB0Qks5SnM5a1RtU2ljdmU3a05OVlpISVV1N1BMU0puNlNRVzdpYmliWHY1dDRRZlJTV2liVDBlSVFVZXZyY0tYUS82NDA.jpg" alt="img"></p>
<p>SqlSession可以认为是一个Mybatis工作的核心的接口，通过这个接口可以执行执行SQL语句、获取Mappers、管理事务。类似于连接MySQL的Connection对象。</p>
<p><img src="/2020/02/12/MyBatis中的九种设计模式/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6L0JhcTVsWXBJdzdYamp6RzRiVmNyTkJBUFB0Qks5SnM5ZUNpYmttQzdTc3VlUDc1cmliWmNvY1ZyaWFkckVXU3RnaWJOd1lnYWZsOUlUem96OUZpYURlSHhKSEEvNjQw.jpg" alt="img"></p>
<p>可以看到，该Factory的openSession方法重载了很多个，分别支持autoCommit、Executor、Transaction等参数的输入，来构建核心的SqlSession对象。</p>
<p>在DefaultSqlSessionFactory的默认工厂实现里，有一个方法可以看出工厂怎么产出一个产品：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> SqlSession <span class="title">openSessionFromDataSource</span><span class="params">(ExecutorType execType, TransactionIsolationLevel level, <span class="keyword">boolean</span> autoCommit)</span> </span>&#123;</span><br><span class="line">    Transaction tx = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">final</span> Environment environment = configuration.getEnvironment();</span><br><span class="line">      <span class="keyword">final</span> TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);</span><br><span class="line">      tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);</span><br><span class="line">      <span class="keyword">final</span> Executor executor = configuration.newExecutor(tx, execType);</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> DefaultSqlSession(configuration, executor, autoCommit);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      closeTransaction(tx); <span class="comment">// may have fetched a connection so lets call close()</span></span><br><span class="line">      <span class="keyword">throw</span> ExceptionFactory.wrapException(<span class="string">"Error opening session.  Cause: "</span> + e, e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      ErrorContext.instance().reset();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<p>这是一个openSession调用的底层方法，该方法先从configuration读取对应的环境配置，然后初始化TransactionFactory获得一个Transaction对象，然后通过Transaction获取一个Executor对象，最后通过configuration、Executor、是否autoCommit三个参数构建了SqlSession。</p>
<p>在这里其实也可以看到端倪，SqlSession的执行，其实是委托给对应的Executor来进行的。</p>
<p>而对于LogFactory，它的实现代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">LogFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Constructor&lt;? extends Log&gt; logConstructor;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">LogFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// disable construction</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Log <span class="title">getLog</span><span class="params">(Class&lt;?&gt; aClass)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getLog(aClass.getName());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Log <span class="title">getLog</span><span class="params">(String logger)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> logConstructor.newInstance(logger);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> LogException(<span class="string">"Error creating logger for logger "</span> + logger + <span class="string">".  Cause: "</span> + t, t);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里有个特别的地方，是Log变量的的类型是Constructor，也就是说该工厂生产的不只是一个产品，而是具有Log公共接口的一系列产品，比如Log4jImpl、Slf4jImpl等很多具体的Log。</p>
<h3 id="3、单例模式"><a href="#3、单例模式" class="headerlink" title="3、单例模式"></a>3、单例模式</h3><p>单例模式(Singleton Pattern)：单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。</p>
<p>单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。单例模式是一种对象创建型模式。单例模式又名单件模式或单态模式。</p>
<p><img src="/2020/02/12/MyBatis中的九种设计模式/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6L0JhcTVsWXBJdzdYamp6RzRiVmNyTkJBUFB0Qks5SnM5NzBGSkxLMVB0WmZqQlFpY2lhdUpQTE1IaWFXOE5pYk94UXF1ZUtWczZvUXNQY3g3SGljTW5PTXppYXZRLzY0MA.jpg" alt="img"></p>
<p>在Mybatis中有两个地方用到单例模式，ErrorContext和LogFactory，其中ErrorContext是用在每个线程范围内的单例，用于记录该线程的执行环境错误信息，而LogFactory则是提供给整个Mybatis使用的日志工厂，用于获得针对项目配置好的日志对象。</p>
<p>ErrorContext的单例实现代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorContext</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;ErrorContext&gt; LOCAL = <span class="keyword">new</span> ThreadLocal&lt;ErrorContext&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">ErrorContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ErrorContext <span class="title">instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ErrorContext context = LOCAL.get();</span><br><span class="line">    <span class="keyword">if</span> (context == <span class="keyword">null</span>) &#123;</span><br><span class="line">      context = <span class="keyword">new</span> ErrorContext();</span><br><span class="line">      LOCAL.set(context);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> context;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>构造函数是private修饰，具有一个static的局部instance变量和一个获取instance变量的方法，在获取实例的方法中，先判断是否为空如果是的话就先创建，然后返回构造好的对象。</p>
<p>只是这里有个有趣的地方是，LOCAL的静态实例变量使用了ThreadLocal修饰，也就是说它属于每个线程各自的数据，而在instance()方法中，先获取本线程的该实例，如果没有就创建该线程独有的ErrorContext。</p>
<h3 id="4、代理模式"><a href="#4、代理模式" class="headerlink" title="4、代理模式"></a>4、代理模式</h3><p>代理模式可以认为是Mybatis的核心使用的模式，正是由于这个模式，我们只需要编写Mapper.java接口，不需要实现，由Mybatis后台帮我们完成具体SQL的执行。</p>
<p>代理模式(Proxy Pattern) ：给某一个对象提供一个代 理，并由代理对象控制对原对象的引用。代理模式的英 文叫做Proxy或Surrogate，它是一种对象结构型模式。</p>
<p>代理模式包含如下角色：</p>
<ul>
<li>Subject: 抽象主题角色</li>
<li>Proxy: 代理主题角色</li>
<li>RealSubject: 真实主题角色</li>
</ul>
<p><img src="/2020/02/12/MyBatis中的九种设计模式/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6L0JhcTVsWXBJdzdYamp6RzRiVmNyTkJBUFB0Qks5SnM5Zm9NeDFjbG50bGJzMnpGekpaRmhFZTd6RmcyZjc2ekFRc2VFWVJDaWNsdE9ENVN3aWJYUkxDTVEvNjQw.jpg" alt="img"><br><img src="/2020/02/12/MyBatis中的九种设计模式/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6L0JhcTVsWXBJdzdYamp6RzRiVmNyTkJBUFB0Qks5SnM5U01VcTNyaDJxaHhUdUdINmhHNG0xa0Fsemt1eWZLNkZ4MEN0Z0hWWmM2VUloakhGNVNNaWJiZy82NDA.jpg" alt="img"></p>
<p>这里有两个步骤，第一个是提前创建一个Proxy，第二个是使用的时候会自动请求Proxy，然后由Proxy来执行具体事务；</p>
<p>当我们使用Configuration的getMapper方法时，会调用mapperRegistry.getMapper方法，而该方法又会调用mapperProxyFactory.newInstance(sqlSession)来生成一个具体的代理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperProxyFactory</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; mapperInterface;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Map&lt;Method, MapperMethod&gt; methodCache = <span class="keyword">new</span> ConcurrentHashMap&lt;Method, MapperMethod&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">MapperProxyFactory</span><span class="params">(Class&lt;T&gt; mapperInterface)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.mapperInterface = mapperInterface;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Class&lt;T&gt; <span class="title">getMapperInterface</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mapperInterface;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Map&lt;Method, MapperMethod&gt; <span class="title">getMethodCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> methodCache;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">protected</span> T <span class="title">newInstance</span><span class="params">(MapperProxy&lt;T&gt; mapperProxy)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), <span class="keyword">new</span> Class[] &#123; mapperInterface &#125;, mapperProxy);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> T <span class="title">newInstance</span><span class="params">(SqlSession sqlSession)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> MapperProxy&lt;T&gt; mapperProxy = <span class="keyword">new</span> MapperProxy&lt;T&gt;(sqlSession, mapperInterface, methodCache);</span><br><span class="line">    <span class="keyword">return</span> newInstance(mapperProxy);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在这里，先通过T newInstance(SqlSession sqlSession)方法会得到一个MapperProxy对象，然后调用T newInstance(MapperProxy mapperProxy)生成代理对象然后返回。</p>
<p>而查看MapperProxy的代码，可以看到如下内容：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapperProxy</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">InvocationHandler</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (Object.class.equals(method.getDeclaringClass())) &#123;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>, args);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (isDefaultMethod(method)) &#123;</span><br><span class="line">        <span class="keyword">return</span> invokeDefaultMethod(proxy, method, args);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">      <span class="keyword">throw</span> ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> MapperMethod mapperMethod = cachedMapperMethod(method);</span><br><span class="line">    <span class="keyword">return</span> mapperMethod.execute(sqlSession, args);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>非常典型的，该MapperProxy类实现了InvocationHandler接口，并且实现了该接口的invoke方法。</p>
<p>通过这种方式，我们只需要编写Mapper.java接口类，当真正执行一个Mapper接口的时候，就会转发给MapperProxy.invoke方法，而该方法则会调用后续的sqlSession.cud&gt;executor.execute&gt;prepareStatement等一系列方法，完成SQL的执行和返回。</p>
<h3 id="5、组合模式"><a href="#5、组合模式" class="headerlink" title="5、组合模式"></a>5、组合模式</h3><p><strong>组合模式组合多个对象形成树形结构以表示“整体-部分”的结构层次。</strong></p>
<p>组合模式对单个对象(叶子对象)和组合对象(组合对象)具有一致性，它将对象组织到树结构中，可以用来描述整体与部分的关系。同时它也模糊了简单元素(叶子对象)和复杂元素(容器对象)的概念，使得客户能够像处理简单元素一样来处理复杂元素，从而使客户程序能够与复杂元素的内部结构解耦。</p>
<p>在使用组合模式中需要注意一点也是组合模式最关键的地方：叶子对象和组合对象实现相同的接口。这就是组合模式能够将叶子节点和对象节点进行一致处理的原因。</p>
<p><img src="/2020/02/12/MyBatis中的九种设计模式/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6L0JhcTVsWXBJdzdYamp6RzRiVmNyTkJBUFB0Qks5SnM5WGlhUXZMMXRnTUE2ejJwNDQ4VjJaTkNYVkZvVlVqckNOakxCalNidnJPdzJDaHY2N1Y3dmVyQS82NDA.jpg" alt="img"></p>
<p>Mybatis支持动态SQL的强大功能，比如下面的这个SQL：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"update"</span> <span class="attr">parameterType</span>=<span class="string">"org.format.dynamicproxy.mybatis.bean.User"</span>&gt;</span></span><br><span class="line">    UPDATE users</span><br><span class="line">    <span class="tag">&lt;<span class="name">trim</span> <span class="attr">prefix</span>=<span class="string">"SET"</span> <span class="attr">prefixOverrides</span>=<span class="string">","</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"name != null and name != ''"</span>&gt;</span></span><br><span class="line">            name = #&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"age != null and age != ''"</span>&gt;</span></span><br><span class="line">            , age = #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">"birthday != null and birthday != ''"</span>&gt;</span></span><br><span class="line">            , birthday = #&#123;birthday&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">trim</span>&gt;</span></span><br><span class="line">    where id = $&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>在这里面使用到了trim、if等动态元素，可以根据条件来生成不同情况下的SQL；</p>
<p>在DynamicSqlSource.getBoundSql方法里，调用了rootSqlNode.apply(context)方法，apply方法是所有的动态节点都实现的接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SqlNode</span></span>&#123;</span><br><span class="line">    booleanapply(DynamicContext context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于实现该SqlSource接口的所有节点，就是整个组合模式树的各个节点：</p>
<p><img src="/2020/02/12/MyBatis中的九种设计模式/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6L0JhcTVsWXBJdzdYamp6RzRiVmNyTkJBUFB0Qks5SnM5MUJKQ01DN295MlFVOU1ubXVFUlZTeTIwbkp0SmdpYzhtV1N1WXZPclhLWTlYMnVaMDZkT080US82NDA.jpg" alt="img"></p>
<p>组合模式的简单之处在于，所有的子节点都是同一类节点，可以递归的向下执行，比如对于TextSqlNode，因为它是最底层的叶子节点，所以直接将对应的内容append到SQL语句中：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(DynamicContext context)</span> </span>&#123;</span><br><span class="line">    GenericTokenParser parser = createParser(<span class="keyword">new</span> BindingTokenParser(context, injectionFilter));</span><br><span class="line">    context.appendSql(parser.parse(text));</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>但是对于IfSqlNode，就需要先做判断，如果判断通过，仍然会调用子元素的SqlNode，即contents.apply方法，实现递归的解析。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">apply</span><span class="params">(DynamicContext context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (evaluator.evaluateBoolean(test, context.getBindings())) &#123;</span><br><span class="line">        contents.apply(context);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="6、模板方法模式"><a href="#6、模板方法模式" class="headerlink" title="6、模板方法模式"></a>6、模板方法模式</h3><p>模板方法模式是所有模式中最为常见的几个模式之一，是基于继承的代码复用的基本技术。</p>
<p>模板方法模式需要开发抽象类和具体子类的设计师之间的协作。一个设计师负责给出一个算法的轮廓和骨架，另一些设计师则负责给出这个算法的各个逻辑步骤。代表这些具体逻辑步骤的方法称做基本方法(primitive method)；而将这些基本方法汇总起来的方法叫做模板方法(template method)，这个设计模式的名字就是从此而来。</p>
<p>模板类定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p>
<p><img src="/2020/02/12/MyBatis中的九种设计模式/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6L0JhcTVsWXBJdzdYamp6RzRiVmNyTkJBUFB0Qks5SnM5aWNuMjZoZEYzMnhxMkV6bkJ4Ylc4WXdKUmFobGJzS0VpYzhCSVF5WWJPbmlhdUY1Q0Fsb1RuUFBBLzY0MA.jpg" alt="img"></p>
<p>在Mybatis中，sqlSession的SQL执行，都是委托给Executor实现的，Executor包含以下结构：</p>
<p><img src="/2020/02/12/MyBatis中的九种设计模式/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6L0JhcTVsWXBJdzdYamp6RzRiVmNyTkJBUFB0Qks5SnM5TWVnQk8zaWJmQnQwb1VPVnV6cWxGQ0JXNDU2cEJxaWMycGhWbFZLVWNVZE1Lb0N1WGxRM2trWGcvNjQw.jpg" alt="img"></p>
<p>其中的BaseExecutor就采用了模板方法模式，它实现了大部分的SQL执行逻辑，然后把以下几个方法交给子类定制化完成：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">doUpdate</span><span class="params">(MappedStatement ms, Object parameter)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> List&lt;BatchResult&gt; <span class="title">doFlushStatements</span><span class="params">(<span class="keyword">boolean</span> isRollback)</span> <span class="keyword">throws</span> SQLException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> &lt;E&gt; <span class="function">List&lt;E&gt; <span class="title">doQuery</span><span class="params">(MappedStatement ms, Object parameter, RowBounds rowBounds, ResultHandler resultHandler, BoundSql boundSql)</span> <span class="keyword">throws</span> SQLException</span>;</span><br></pre></td></tr></table></figure>
<p>该模板方法类有几个子类的具体实现，使用了不同的策略：</p>
<ul>
<li>简单SimpleExecutor：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。（可以是Statement或PrepareStatement对象）</li>
<li>重用ReuseExecutor：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map内，供下一次使用。（可以是Statement或PrepareStatement对象）</li>
<li>批量BatchExecutor：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理的；BatchExecutor相当于维护了多个桶，每个桶里都装了很多属于自己的SQL，就像苹果蓝里装了很多苹果，番茄蓝里装了很多番茄，最后，再统一倒进仓库。（可以是Statement或PrepareStatement对象）</li>
</ul>
<p>比如在SimpleExecutor中这样实现update方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">doUpdate</span><span class="params">(MappedStatement ms, Object parameter)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">    Statement stmt = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Configuration configuration = ms.getConfiguration();</span><br><span class="line">        StatementHandler handler = configuration.newStatementHandler(<span class="keyword">this</span>, ms, parameter, RowBounds.DEFAULT, <span class="keyword">null</span>,</span><br><span class="line">                <span class="keyword">null</span>);</span><br><span class="line">        stmt = prepareStatement(handler, ms.getStatementLog());</span><br><span class="line">        <span class="keyword">return</span> handler.update(stmt);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        closeStatement(stmt);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="7、适配器模式"><a href="#7、适配器模式" class="headerlink" title="7、适配器模式"></a>7、适配器模式</h3><p>适配器模式(Adapter Pattern) ：将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。</p>
<p><img src="/2020/02/12/MyBatis中的九种设计模式/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6L0JhcTVsWXBJdzdYamp6RzRiVmNyTkJBUFB0Qks5SnM5SHBKYld0QlMxV3JLVEswVkRTWVlEYnlNdVFOdm8xZjU3Z1hCS282YnJTd3JDVXIwRTVodndBLzY0MA.jpg" alt="img"></p>
<p>在Mybatsi的logging包中，有一个Log接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Log</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isDebugEnabled</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">boolean</span> <span class="title">isTraceEnabled</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">error</span><span class="params">(String s, Throwable e)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">error</span><span class="params">(String s)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">debug</span><span class="params">(String s)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">trace</span><span class="params">(String s)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">warn</span><span class="params">(String s)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该接口定义了Mybatis直接使用的日志方法，而Log接口具体由谁来实现呢？Mybatis提供了多种日志框架的实现，这些实现都匹配这个Log接口所定义的接口方法，最终实现了所有外部日志框架到Mybatis日志包的适配：</p>
<p><img src="/2020/02/12/MyBatis中的九种设计模式/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6L0JhcTVsWXBJdzdYamp6RzRiVmNyTkJBUFB0Qks5SnM5MGljdWVqRTZ2STlteExJWXNYbXdlY3hXN2ljdEFQVzB0R0hIcXl2V29oeUFacG81NFBNTlJsVEEvNjQw.jpg" alt="img"></p>
<p>比如对于Log4jImpl的实现来说，该实现持有了org.apache.log4j.Logger的实例，然后所有的日志方法，均委托该实例来实现。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Log4jImpl</span> <span class="keyword">implements</span> <span class="title">Log</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FQCN = Log4jImpl.class.getName();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Logger log;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">Log4jImpl</span><span class="params">(String clazz)</span> </span>&#123;</span><br><span class="line">    log = Logger.getLogger(clazz);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isDebugEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> log.isDebugEnabled();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isTraceEnabled</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> log.isTraceEnabled();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(String s, Throwable e)</span> </span>&#123;</span><br><span class="line">    log.log(FQCN, Level.ERROR, s, e);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">error</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    log.log(FQCN, Level.ERROR, s, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">debug</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    log.log(FQCN, Level.DEBUG, s, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">trace</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    log.log(FQCN, Level.TRACE, s, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">warn</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    log.log(FQCN, Level.WARN, s, <span class="keyword">null</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="8、装饰者模式"><a href="#8、装饰者模式" class="headerlink" title="8、装饰者模式"></a>8、装饰者模式</h3><p>装饰模式(Decorator Pattern) ：动态地给一个对象增加一些额外的职责(Responsibility)，就增加对象功能来说，装饰模式比生成子类实现更为灵活。其别名也可以称为包装器(Wrapper)，与适配器模式的别名相同，但它们适用于不同的场合。根据翻译的不同，装饰模式也有人称之为“油漆工模式”，它是一种对象结构型模式。</p>
<p><img src="/2020/02/12/MyBatis中的九种设计模式/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6L0JhcTVsWXBJdzdYamp6RzRiVmNyTkJBUFB0Qks5SnM5blNSVHlwQWdhZnZPWDhUb0t4blhzRlFaNDBXTWoxNXRjMERvZm1IcEhvQUxpYVRpYXlWVVJGWHcvNjQw.jpg" alt="img"></p>
<p>在mybatis中，缓存的功能由根接口Cache（org.apache.ibatis.cache.Cache）定义。整个体系采用装饰器设计模式，数据存储和缓存的基本功能由PerpetualCache（org.apache.ibatis.cache.impl.PerpetualCache）永久缓存实现，然后通过一系列的装饰器来对PerpetualCache永久缓存进行缓存策略等方便的控制。如下图：</p>
<p><img src="/2020/02/12/MyBatis中的九种设计模式/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6L0JhcTVsWXBJdzdYamp6RzRiVmNyTkJBUFB0Qks5SnM5MEswRTVCVzRsY3ZXOVIzYzRwVXpRNWliRGYxaWFMdXZ2U3g1SDlWWnFhaWFaMzlEeXBGVGtuVDRRLzY0MA.jpg" alt="img"></p>
<p>用于装饰PerpetualCache的标准装饰器共有8个（全部在org.apache.ibatis.cache.decorators包中）：</p>
<ol>
<li>FifoCache：先进先出算法，缓存回收策略</li>
<li>LoggingCache：输出缓存命中的日志信息</li>
<li>LruCache：最近最少使用算法，缓存回收策略</li>
<li>ScheduledCache：调度缓存，负责定时清空缓存</li>
<li>SerializedCache：缓存序列化和反序列化存储</li>
<li>SoftCache：基于软引用实现的缓存管理策略</li>
<li>SynchronizedCache：同步的缓存装饰器，用于防止多线程并发访问</li>
<li>WeakCache：基于弱引用实现的缓存管理策略</li>
</ol>
<p>另外，还有一个特殊的装饰器TransactionalCache：事务性的缓存</p>
<p>正如大多数持久层框架一样，mybatis缓存同样分为一级缓存和二级缓存</p>
<ul>
<li>一级缓存，又叫本地缓存，是PerpetualCache类型的永久缓存，保存在执行器中（BaseExecutor），而执行器又在SqlSession（DefaultSqlSession）中，所以一级缓存的生命周期与SqlSession是相同的。</li>
<li>二级缓存，又叫自定义缓存，实现了Cache接口的类都可以作为二级缓存，所以可配置如encache等的第三方缓存。二级缓存以namespace名称空间为其唯一标识，被保存在Configuration核心配置对象中。</li>
</ul>
<p>二级缓存对象的默认类型为PerpetualCache，如果配置的缓存是默认类型，则mybatis会根据配置自动追加一系列装饰器。</p>
<p>Cache对象之间的引用顺序为：</p>
<blockquote>
<p>SynchronizedCache–&gt;LoggingCache–&gt;SerializedCache–&gt;ScheduledCache–&gt;LruCache–&gt;PerpetualCache</p>
</blockquote>
<h3 id="9、迭代器模式"><a href="#9、迭代器模式" class="headerlink" title="9、迭代器模式"></a>9、迭代器模式</h3><p>迭代器（Iterator）模式，又叫做游标（Cursor）模式。GOF给出的定义为：提供一种方法访问一个容器（container）对象中各个元素，而又不需暴露该对象的内部细节。</p>
<p><img src="/2020/02/12/MyBatis中的九种设计模式/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6L0JhcTVsWXBJdzdYamp6RzRiVmNyTkJBUFB0Qks5SnM5ZWljckRhM05lbUQ3SkoydmxydkF1MnJmZGFjaFJlNjFPZ0hnd2EzSFRVV1RnM3RqR0RBMWxSZy82NDA.jpg" alt="img"></p>
<p>Java的Iterator就是迭代器模式的接口，只要实现了该接口，就相当于应用了迭代器模式：</p>
<p><img src="/2020/02/12/MyBatis中的九种设计模式/aHR0cHM6Ly9tbWJpei5xcGljLmNuL21tYml6L0JhcTVsWXBJdzdYamp6RzRiVmNyTkJBUFB0Qks5SnM5UWJNR1pGWmRpYm9DSmpCWWpZZEVmR2lhM2dKS21RaWJ6RUlES0s3MEFxbTR3dGRRQlZsNUxsWXZBLzY0MA.jpg" alt="img"></p>
<p>比如Mybatis的PropertyTokenizer是property包中的重量级类，该类会被reflection包中其他的类频繁的引用到。这个类实现了Iterator接口，在使用时经常被用到的是Iterator接口中的hasNext这个函数。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PropertyTokenizer</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">PropertyTokenizer</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String indexedName;</span><br><span class="line">    <span class="keyword">private</span> String index;</span><br><span class="line">    <span class="keyword">private</span> String children;</span><br><span class="line"></span><br><span class="line">    publicPropertyTokenizer(String fullname) &#123;</span><br><span class="line">        <span class="keyword">int</span> delim = fullname.indexOf(<span class="string">'.'</span>);</span><br><span class="line">        <span class="keyword">if</span> (delim &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            name = fullname.substring(<span class="number">0</span>, delim);</span><br><span class="line">            children = fullname.substring(delim + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            name = fullname;</span><br><span class="line">            children = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        indexedName = name;</span><br><span class="line">        delim = name.indexOf(<span class="string">'['</span>);</span><br><span class="line">        <span class="keyword">if</span> (delim &gt; -<span class="number">1</span>) &#123;</span><br><span class="line">            index = name.substring(delim + <span class="number">1</span>, name.length() - <span class="number">1</span>);</span><br><span class="line">            name = name.substring(<span class="number">0</span>, delim);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIndex</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> index;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getIndexedName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> indexedName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getChildren</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> children;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    publicbooleanhasNext() &#123;</span><br><span class="line">        <span class="keyword">return</span> children != <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> PropertyTokenizer <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PropertyTokenizer(children);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    publicvoidremove() &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(</span><br><span class="line">                <span class="string">"Remove is not supported, as it has no meaning in the context of properties."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，这个类传入一个字符串到构造函数，然后提供了iterator方法对解析后的子串进行遍历，是一个很常用的方法类。</p>
<h3 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h3><ul>
<li>图说设计模式</li>
<li><a href="http://design-patterns.readthedocs.io/zh_CN/latest/index.html" target="_blank" rel="noopener">http://design-patterns.readthedocs.io/zh_CN/latest/index.html</a></li>
<li>深入浅出Mybatis系列（十）—SQL执行流程分析（源码篇）</li>
<li><a href="http://www.cnblogs.com/dongying/p/4142476.html" target="_blank" rel="noopener">http://www.cnblogs.com/dongying/p/4142476.html</a></li>
<li>设计模式读书笔记—–组合模式</li>
<li><a href="http://www.cnblogs.com/chenssy/p/3299719.html" target="_blank" rel="noopener">http://www.cnblogs.com/chenssy/p/3299719.html</a></li>
<li>Mybatis3.3.x技术内幕（四）：五鼠闹东京之执行器Executor设计原本</li>
<li><a href="http://blog.csdn.net/wagcy/article/details/32963235" target="_blank" rel="noopener">http://blog.csdn.net/wagcy/article/details/32963235</a></li>
<li>mybatis缓存机制详解（一）——Cache</li>
<li><a href="https://my.oschina.net/lixin91/blog/620068" target="_blank" rel="noopener">https://my.oschina.net/lixin91/blog/620068</a></li>
</ul>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>Mybatis</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>不可不说的Java锁事</title>
    <url>/2020/02/12/%E4%B8%8D%E5%8F%AF%E4%B8%8D%E8%AF%B4%E7%9A%84Java%E9%94%81%E4%BA%8B/</url>
    <content><![CDATA[<p>转载自美团技术团队，<a href="https://tech.meituan.com/2018/11/15/java-lock.html" target="_blank" rel="noopener">原文地址</a>，在原文基础上有修改.</p>
<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>Java提供了种类丰富的锁，每种锁因其特性的不同，在适当的场景下能够展现出非常高的效率。本文旨在对锁相关源码（本文中的源码来自JDK 8和Netty 3.10.6）、使用场景进行举例，为读者介绍主流锁的知识点，以及不同的锁的适用场景。</p>
<h1 id="JAVA主流锁"><a href="#JAVA主流锁" class="headerlink" title="JAVA主流锁"></a>JAVA主流锁</h1><p>Java中往往是按照是否含有某一特性来定义锁，我们通过特性将锁进行分组归类，再使用对比的方式进行介绍，帮助大家更快捷的理解相关知识。下面给出本文内容的总体分类目录：</p>
<p><img src="/2020/02/12/不可不说的Java锁事/7f749fc8.png" alt="img"></p>
<h2 id="1-乐观锁-VS-悲观锁"><a href="#1-乐观锁-VS-悲观锁" class="headerlink" title="1. 乐观锁 VS 悲观锁"></a>1. 乐观锁 VS 悲观锁</h2><p>乐观锁与悲观锁是一种广义上的概念，体现了看待线程同步的不同角度。在Java和数据库中都有此概念对应的实际应用。</p>
<p>先说概念。对于同一个数据的并发操作，悲观锁认为自己在使用数据的时候一定有别的线程来修改数据，因此在获取数据的时候会先加锁，确保数据不会被别的线程修改。Java中，synchronized关键字和Lock的实现类都是悲观锁。</p>
<p>而乐观锁认为自己在使用数据时不会有别的线程修改数据，所以不会添加锁，只是在更新数据的时候去判断之前有没有别的线程更新了这个数据。如果这个数据没有被更新，当前线程将自己修改的数据成功写入。如果数据已经被其他线程更新，则根据不同的实现方式执行不同的操作（例如报错或者自动重试）。</p>
<p>乐观锁在Java中是通过使用无锁编程来实现，最常采用的是CAS算法，Java原子类中的递增操作就通过CAS自旋实现的。</p>
<p><img src="/2020/02/12/不可不说的Java锁事/c8703cd9.png" alt="img"></p>
<p>根据从上面的概念描述我们可以发现：</p>
<ul>
<li>悲观锁适合写操作多的场景，先加锁可以保证写操作时数据正确。</li>
<li>乐观锁适合读操作多的场景，不加锁的特点能够使其读操作的性能大幅提升。</li>
</ul>
<p>光说概念有些抽象，我们来看下乐观锁和悲观锁的调用方式示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ------------------------- 悲观锁的调用方式 -------------------------</span></span><br><span class="line"><span class="comment">// synchronized</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">testMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 操作同步资源</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ReentrantLock</span></span><br><span class="line"><span class="keyword">private</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(); <span class="comment">// 需要保证多个线程使用的是同一个锁</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modifyPublicResources</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	lock.lock();</span><br><span class="line">	<span class="comment">// 操作同步资源</span></span><br><span class="line">	lock.unlock();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------- 乐观锁的调用方式 -------------------------</span></span><br><span class="line"><span class="keyword">private</span> AtomicInteger atomicInteger = <span class="keyword">new</span> AtomicInteger();  <span class="comment">// 需要保证多个线程使用的是同一个AtomicInteger</span></span><br><span class="line">atomicInteger.incrementAndGet(); <span class="comment">//执行自增1</span></span><br></pre></td></tr></table></figure>
<p>通过调用方式示例，我们可以发现悲观锁基本都是在显式的锁定之后再操作同步资源，而乐观锁则直接去操作同步资源。那么，为何乐观锁能够做到不锁定同步资源也可以正确的实现线程同步呢？我们通过介绍乐观锁的主要实现方式 “CAS” 的技术原理来为大家解惑。</p>
<p>CAS全称 Compare And Swap（比较与交换），是一种无锁算法。在不使用锁（没有线程被阻塞）的情况下实现多线程之间的变量同步。java.util.concurrent包中的原子类就是通过CAS来实现了乐观锁。</p>
<p>CAS算法涉及到三个操作数：</p>
<ul>
<li>需要读写的内存值 V。</li>
<li>进行比较的值 A。</li>
<li>要写入的新值 B。</li>
</ul>
<p>当且仅当 V 的值等于 A 时，CAS通过原子方式用新值B来更新V的值（“比较+更新”整体是一个原子操作），否则不会执行任何操作。一般情况下，“更新”是一个不断重试的操作。</p>
<p>之前提到java.util.concurrent包中的原子类，就是通过CAS来实现了乐观锁，那么我们进入原子类AtomicInteger的源码，看一下AtomicInteger的定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AtomicInteger</span> <span class="keyword">extends</span> <span class="title">Number</span> <span class="keyword">implements</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6214790243416807050L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// setup to use Unsafe.compareAndSwapInt for updates</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Unsafe unsafe = Unsafe.getUnsafe();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> valueOffset;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            valueOffset = unsafe.objectFieldOffset</span><br><span class="line">                (AtomicInteger.class.getDeclaredField(<span class="string">"value"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123; <span class="keyword">throw</span> <span class="keyword">new</span> Error(ex); &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> value;</span><br></pre></td></tr></table></figure>
<p>根据定义我们可以看出各属性的作用：</p>
<ul>
<li>unsafe： 获取并操作内存的数据。</li>
<li>valueOffset： 存储value在AtomicInteger中的偏移量。</li>
<li>value： 存储AtomicInteger的int值，该属性需要借助volatile关键字保证其在线程间是可见的。</li>
</ul>
<p>接下来，我们查看AtomicInteger的自增函数incrementAndGet()的源码时，发现自增函数底层调用的是unsafe.getAndAddInt()。但是由于JDK本身只有Unsafe.class，只通过class文件中的参数名，并不能很好的了解方法的作用，所以我们通过OpenJDK 8 来查看Unsafe的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ------------------------- JDK 8 -------------------------</span></span><br><span class="line"><span class="comment">// AtomicInteger 自增方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">incrementAndGet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> unsafe.getAndAddInt(<span class="keyword">this</span>, valueOffset, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Unsafe.class</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> var5;</span><br><span class="line">  <span class="keyword">do</span> &#123;</span><br><span class="line">      var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">  &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line">  <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ------------------------- OpenJDK 8 -------------------------</span></span><br><span class="line"><span class="comment">// Unsafe.java</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object o, <span class="keyword">long</span> offset, <span class="keyword">int</span> delta)</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> v;</span><br><span class="line">   <span class="keyword">do</span> &#123;</span><br><span class="line">       v = getIntVolatile(o, offset);</span><br><span class="line">   &#125; <span class="keyword">while</span> (!compareAndSwapInt(o, offset, v, v + delta));</span><br><span class="line">   <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>根据OpenJDK 8的源码我们可以看出，getAndAddInt()循环获取给定对象o中的偏移量处的值v，然后判断内存值是否等于v。如果相等则将内存值设置为 v + delta，否则返回false，继续循环进行重试，直到设置成功才能退出循环，并且将旧值返回。整个“比较+更新”操作封装在compareAndSwapInt()中，在JNI里是借助于一个CPU指令完成的，属于原子操作，可以保证多个线程都能够看到同一个变量的修改值。</p>
<p>后续JDK通过CPU的cmpxchg指令，去比较寄存器中的 A 和 内存中的值 V。如果相等，就把要写入的新值 B 存入内存中。如果不相等，就将内存值 V 赋值给寄存器中的值 A。然后通过Java代码中的while循环再次调用cmpxchg指令进行重试，直到设置成功为止。</p>
<p>CAS虽然很高效，但是它也存在三大问题，这里也简单说一下：</p>
<ol>
<li><p>ABA问题</p>
<p>。CAS需要在操作值的时候检查内存值是否发生变化，没有发生变化才会更新内存值。但是如果内存值原来是A，后来变成了B，然后又变成了A，那么CAS进行检查时会发现值没有发生变化，但是实际上是有变化的。ABA问题的解决思路就是在变量前面添加版本号，每次变量更新的时候都把版本号加一，这样变化过程就从“A－B－A”变成了“1A－2B－3A”。</p>
<ul>
<li>JDK从1.5开始提供了AtomicStampedReference类来解决ABA问题，具体操作封装在compareAndSet()中。compareAndSet()首先检查当前引用和当前标志与预期引用和预期标志是否相等，如果都相等，则以原子方式将引用值和标志的值设置为给定的更新值。</li>
</ul>
</li>
<li><p><strong>循环时间长开销大</strong>。CAS操作如果长时间不成功，会导致其一直自旋，给CPU带来非常大的开销。</p>
</li>
<li><p>只能保证一个共享变量的原子操作</p>
<p>。对一个共享变量执行操作时，CAS能够保证原子操作，但是对多个共享变量操作时，CAS是无法保证操作的原子性的。</p>
<ul>
<li>Java从1.5开始JDK提供了AtomicReference类来保证引用对象之间的原子性，可以把多个变量放在一个对象里来进行CAS操作。</li>
</ul>
</li>
</ol>
<h2 id="2-自旋锁-VS-适应性自旋锁"><a href="#2-自旋锁-VS-适应性自旋锁" class="headerlink" title="2. 自旋锁 VS 适应性自旋锁"></a>2. 自旋锁 VS 适应性自旋锁</h2><p>在介绍自旋锁前，我们需要介绍一些前提知识来帮助大家明白自旋锁的概念。</p>
<p>阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长。</p>
<p>在许多场景中，同步资源的锁定时间很短，为了这一小段时间去切换线程，线程挂起和恢复现场的花费可能会让系统得不偿失。如果物理机器有多个处理器，能够让两个或以上的线程同时并行执行，我们就可以让后面那个请求锁的线程不放弃CPU的执行时间，看看持有锁的线程是否很快就会释放锁。</p>
<p>而为了让当前线程“稍等一下”，我们需让当前线程进行自旋，如果在自旋完成后前面锁定同步资源的线程已经释放了锁，那么当前线程就可以不必阻塞而是直接获取同步资源，从而避免切换线程的开销。这就是自旋锁。</p>
<p><img src="/2020/02/12/不可不说的Java锁事/452a3363.png" alt="img"></p>
<p>自旋锁本身是有缺点的，它不能代替阻塞。自旋等待虽然避免了线程切换的开销，但它要占用处理器时间。如果锁被占用的时间很短，自旋等待的效果就会非常好。反之，如果锁被占用的时间很长，那么自旋的线程只会白浪费处理器资源。所以，自旋等待的时间必须要有一定的限度，如果自旋超过了限定次数（默认是10次，可以使用-XX:PreBlockSpin来更改）没有成功获得锁，就应当挂起线程。</p>
<p>自旋锁的实现原理同样也是CAS，AtomicInteger中调用unsafe进行自增操作的源码中的do-while循环就是一个自旋操作，如果修改数值失败则通过循环来执行自旋，直至修改成功。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sun.misc.Unsafe#getAndAddInt</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">getAndAddInt</span><span class="params">(Object var1, <span class="keyword">long</span> var2, <span class="keyword">int</span> var4)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var5;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        var5 = <span class="keyword">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">    &#125; <span class="keyword">while</span>(!<span class="keyword">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> var5;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>自旋锁在JDK1.4.2中引入，使用-XX:+UseSpinning来开启。JDK 6中变为默认开启，并且引入了自适应的自旋锁（适应性自旋锁）。</p>
<p>自适应意味着自旋的时间（次数）不再固定，而是由前一次在同一个锁上的自旋时间及锁的拥有者的状态来决定。如果在同一个锁对象上，自旋等待刚刚成功获得过锁，并且持有锁的线程正在运行中，那么虚拟机就会认为这次自旋也是很有可能再次成功，进而它将允许自旋等待持续相对更长的时间。如果对于某个锁，自旋很少成功获得过，那在以后尝试获取这个锁时将可能省略掉自旋过程，直接阻塞线程，避免浪费处理器资源。</p>
<p>在自旋锁中 另有三种常见的锁形式:TicketLock、CLHlock和MCSlock，本文中仅做名词介绍，不做深入讲解，感兴趣的同学可以自行查阅相关资料。</p>
<h2 id="3-无锁-VS-偏向锁-VS-轻量级锁-VS-重量级锁"><a href="#3-无锁-VS-偏向锁-VS-轻量级锁-VS-重量级锁" class="headerlink" title="3. 无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁"></a>3. 无锁 VS 偏向锁 VS 轻量级锁 VS 重量级锁</h2><p>这四种锁是指锁的状态，专门针对synchronized的。在介绍这四种锁状态之前还需要介绍一些额外的知识。</p>
<p>首先为什么Synchronized能实现线程同步？</p>
<p>在回答这个问题之前我们需要了解两个重要的概念：“Java对象头”、“Monitor”。</p>
<h3 id="Java对象头"><a href="#Java对象头" class="headerlink" title="Java对象头"></a>Java对象头</h3><p>synchronized是悲观锁，在操作同步资源之前需要给同步资源先加锁，这把锁就是存在Java对象头里的，而Java对象头又是什么呢？</p>
<p>我们以Hotspot虚拟机为例，Hotspot的对象头主要包括两部分数据：Mark Word（标记字段）、Klass Pointer（类型指针）。</p>
<p><strong>Mark Word</strong>：默认存储对象的HashCode，分代年龄和锁标志位信息。这些信息都是与对象自身定义无关的数据，所以Mark Word被设计成一个非固定的数据结构以便在极小的空间内存存储尽量多的数据。它会根据对象的状态复用自己的存储空间，也就是说在运行期间Mark Word里存储的数据会随着锁标志位的变化而变化。</p>
<p><strong>Klass Point</strong>：对象指向它的类元数据的指针，虚拟机通过这个指针来确定这个对象是哪个类的实例。</p>
<h3 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h3><p>Monitor可以理解为一个同步工具或一种同步机制，通常被描述为一个对象。每一个Java对象就有一把看不见的锁，称为内部锁或者Monitor锁。</p>
<p>Monitor是线程私有的数据结构，每一个线程都有一个可用monitor record列表，同时还有一个全局的可用列表。每一个被锁住的对象都会和一个monitor关联，同时monitor中有一个Owner字段存放拥有该锁的线程的唯一标识，表示该锁被这个线程占用。</p>
<p>现在话题回到synchronized，synchronized通过Monitor来实现线程同步，Monitor是依赖于底层的操作系统的Mutex Lock（互斥锁）来实现的线程同步。</p>
<p>如同我们在自旋锁中提到的“阻塞或唤醒一个Java线程需要操作系统切换CPU状态来完成，这种状态转换需要耗费处理器时间。如果同步代码块中的内容过于简单，状态转换消耗的时间有可能比用户代码执行的时间还要长”。这种方式就是synchronized最初实现同步的方式，这就是JDK 6之前synchronized效率低的原因。这种依赖于操作系统Mutex Lock所实现的锁我们称之为“重量级锁”，JDK 6中为了减少获得锁和释放锁带来的性能消耗，引入了“偏向锁”和“轻量级锁”。</p>
<p>所以目前锁一共有4种状态，级别从低到高依次是：无锁、偏向锁、轻量级锁和重量级锁。锁状态只能升级不能降级。</p>
<p>通过上面的介绍，我们对synchronized的加锁机制以及相关知识有了一个了解，那么下面我们给出四种锁状态对应的的Mark Word内容，然后再分别讲解四种锁状态的思路以及特点：</p>
<table>
<thead>
<tr>
<th style="text-align:left">锁状态</th>
<th style="text-align:left">存储内容</th>
<th style="text-align:left">存储内容</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">无锁</td>
<td style="text-align:left">对象的hashCode、对象分代年龄、是否是偏向锁（0）</td>
<td style="text-align:left">01</td>
</tr>
<tr>
<td style="text-align:left">偏向锁</td>
<td style="text-align:left">偏向线程ID、偏向时间戳、对象分代年龄、是否是偏向锁（1）</td>
<td style="text-align:left">01</td>
</tr>
<tr>
<td style="text-align:left">轻量级锁</td>
<td style="text-align:left">指向栈中锁记录的指针</td>
<td style="text-align:left">00</td>
</tr>
<tr>
<td style="text-align:left">重量级锁</td>
<td style="text-align:left">指向互斥量（重量级锁）的指针</td>
<td style="text-align:left">10</td>
</tr>
</tbody>
</table>
<p><strong>无锁</strong></p>
<p>无锁没有对资源进行锁定，所有的线程都能访问并修改同一个资源，但同时只有一个线程能修改成功。</p>
<p>无锁的特点就是修改操作在循环内进行，线程会不断的尝试修改共享资源。如果没有冲突就修改成功并退出，否则就会继续循环尝试。如果有多个线程修改同一个值，必定会有一个线程能修改成功，而其他修改失败的线程会不断重试直到修改成功。上面我们介绍的CAS原理及应用即是无锁的实现。无锁无法全面代替有锁，但无锁在某些场合下的性能是非常高的。</p>
<p><strong>偏向锁</strong></p>
<p>偏向锁是指一段同步代码一直被一个线程所访问，那么该线程会自动获取锁，降低获取锁的代价。</p>
<p>在大多数情况下，锁总是由同一线程多次获得，不存在多线程竞争，所以出现了偏向锁。其目标就是在只有一个线程执行同步代码块时能够提高性能。</p>
<p>当一个线程访问同步代码块并获取锁时，会在Mark Word里存储锁偏向的线程ID。在线程进入和退出同步块时不再通过CAS操作来加锁和解锁，而是检测Mark Word里是否存储着指向当前线程的偏向锁。引入偏向锁是为了在无多线程竞争的情况下尽量减少不必要的轻量级锁执行路径，因为轻量级锁的获取及释放依赖多次CAS原子指令，而偏向锁只需要在置换ThreadID的时候依赖一次CAS原子指令即可。</p>
<p>偏向锁只有遇到其他线程尝试竞争偏向锁时，持有偏向锁的线程才会释放锁，线程不会主动释放偏向锁。偏向锁的撤销，需要等待全局安全点（在这个时间点上没有字节码正在执行），它会首先暂停拥有偏向锁的线程，判断锁对象是否处于被锁定状态。撤销偏向锁后恢复到无锁（标志位为“01”）或轻量级锁（标志位为“00”）的状态。</p>
<p>偏向锁在JDK 6及以后的JVM里是默认启用的。可以通过JVM参数关闭偏向锁：-XX:-UseBiasedLocking=false，关闭之后程序默认会进入轻量级锁状态。</p>
<p><strong>轻量级锁</strong></p>
<p>是指当锁是偏向锁的时候，被另外的线程所访问，偏向锁就会升级为轻量级锁，其他线程会通过自旋的形式尝试获取锁，不会阻塞，从而提高性能。</p>
<p>在代码进入同步块的时候，如果同步对象锁状态为无锁状态（锁标志位为“01”状态，是否为偏向锁为“0”），虚拟机首先将在当前线程的栈帧中建立一个名为锁记录（Lock Record）的空间，用于存储锁对象目前的Mark Word的拷贝，然后拷贝对象头中的Mark Word复制到锁记录中。</p>
<p>拷贝成功后，虚拟机将使用CAS操作尝试将对象的Mark Word更新为指向Lock Record的指针，并将Lock Record里的owner指针指向对象的Mark Word。</p>
<p>如果这个更新动作成功了，那么这个线程就拥有了该对象的锁，并且对象Mark Word的锁标志位设置为“00”，表示此对象处于轻量级锁定状态。</p>
<p>如果轻量级锁的更新操作失败了，虚拟机首先会检查对象的Mark Word是否指向当前线程的栈帧，如果是就说明当前线程已经拥有了这个对象的锁，那就可以直接进入同步块继续执行，否则说明多个线程竞争锁。</p>
<p>若当前只有一个等待线程，则该线程通过自旋进行等待。但是当自旋超过一定的次数，或者一个线程在持有锁，一个在自旋，又有第三个来访时，轻量级锁升级为重量级锁。</p>
<p><strong>重量级锁</strong></p>
<p>升级为重量级锁时，锁标志的状态值变为“10”，此时Mark Word中存储的是指向重量级锁的指针，此时等待锁的线程都会进入阻塞状态。</p>
<p>整体的锁状态升级流程如下：</p>
<p><img src="/2020/02/12/不可不说的Java锁事/8afdf6f2.png" alt="img"></p>
<p>综上，偏向锁通过对比Mark Word解决加锁问题，避免执行CAS操作。而轻量级锁是通过用CAS操作和自旋来解决加锁问题，避免线程阻塞和唤醒而影响性能。重量级锁是将除了拥有锁的线程以外的线程都阻塞。</p>
<h2 id="4-公平锁-VS-非公平锁"><a href="#4-公平锁-VS-非公平锁" class="headerlink" title="4. 公平锁 VS 非公平锁"></a>4. 公平锁 VS 非公平锁</h2><p>公平锁是指多个线程按照申请锁的顺序来获取锁，线程直接进入队列中排队，队列中的第一个线程才能获得锁。公平锁的优点是等待锁的线程不会饿死。缺点是整体吞吐效率相对非公平锁要低，等待队列中除第一个线程以外的所有线程都会阻塞，CPU唤醒阻塞线程的开销比非公平锁大。</p>
<p>非公平锁是多个线程加锁时直接尝试获取锁，获取不到才会到等待队列的队尾等待。但如果此时锁刚好可用，那么这个线程可以无需阻塞直接获取到锁，所以非公平锁有可能出现后申请锁的线程先获取锁的场景。非公平锁的优点是可以减少唤起线程的开销，整体的吞吐效率高，因为线程有几率不阻塞直接获得锁，CPU不必唤醒所有线程。缺点是处于等待队列中的线程可能会饿死，或者等很久才会获得锁。</p>
<p>直接用语言描述可能有点抽象，这里作者用从别处看到的一个例子来讲述一下公平锁和非公平锁。</p>
<p><img src="/2020/02/12/不可不说的Java锁事/a23d746a.png" alt="img"></p>
<p>如上图所示，假设有一口水井，有管理员看守，管理员有一把锁，只有拿到锁的人才能够打水，打完水要把锁还给管理员。每个过来打水的人都要管理员的允许并拿到锁之后才能去打水，如果前面有人正在打水，那么这个想要打水的人就必须排队。管理员会查看下一个要去打水的人是不是队伍里排最前面的人，如果是的话，才会给你锁让你去打水；如果你不是排第一的人，就必须去队尾排队，这就是公平锁。</p>
<p>但是对于非公平锁，管理员对打水的人没有要求。即使等待队伍里有排队等待的人，但如果在上一个人刚打完水把锁还给管理员而且管理员还没有允许等待队伍里下一个人去打水时，刚好来了一个插队的人，这个插队的人是可以直接从管理员那里拿到锁去打水，不需要排队，原本排队等待的人只能继续等待。如下图所示：</p>
<p><img src="/2020/02/12/不可不说的Java锁事/4499559e.png" alt="img"></p>
<p>接下来我们通过ReentrantLock的源码来讲解公平锁和非公平锁。</p>
<p><img src="/2020/02/12/不可不说的Java锁事/6edea205.png" alt="img"></p>
<p>根据代码可知，ReentrantLock里面有一个内部类Sync，Sync继承AQS（AbstractQueuedSynchronizer），添加锁和释放锁的大部分操作实际上都是在Sync中实现的。它有公平锁FairSync和非公平锁NonfairSync两个子类。ReentrantLock默认使用非公平锁，也可以通过构造器来显示的指定使用公平锁。</p>
<p>下面我们来看一下公平锁与非公平锁的加锁方法的源码:</p>
<p><img src="/2020/02/12/不可不说的Java锁事/bc6fe583.png" alt="img"></p>
<p>通过上图中的源代码对比，我们可以明显的看出公平锁与非公平锁的lock()方法唯一的区别就在于公平锁在获取同步状态时多了一个限制条件：hasQueuedPredecessors()。</p>
<p><img src="/2020/02/12/不可不说的Java锁事/bd0036bb.png" alt="img"></p>
<p>再进入hasQueuedPredecessors()，可以看到该方法主要做一件事情：主要是判断当前线程是否位于同步队列中的第一个。如果是则返回true，否则返回false。</p>
<p>综上，公平锁就是通过同步队列来实现多个线程按照申请锁的顺序来获取锁，从而实现公平的特性。非公平锁加锁时不考虑排队等待问题，直接尝试获取锁，所以存在后申请却先获得锁的情况。</p>
<h2 id="5-可重入锁-VS-非可重入锁"><a href="#5-可重入锁-VS-非可重入锁" class="headerlink" title="5. 可重入锁 VS 非可重入锁"></a>5. 可重入锁 VS 非可重入锁</h2><p>可重入锁又名递归锁，是指在同一个线程在外层方法获取锁的时候，再进入该线程的内层方法会自动获取锁（前提锁对象得是同一个对象或者class），不会因为之前已经获取过还没释放而阻塞。Java中ReentrantLock和synchronized都是可重入锁，可重入锁的一个优点是可一定程度避免死锁。下面用示例代码来进行分析：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Widget</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法1执行..."</span>);</span><br><span class="line">        doOthers();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">doOthers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法2执行..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的代码中，类中的两个方法都是被内置锁synchronized修饰的，doSomething()方法中调用doOthers()方法。因为内置锁是可重入的，所以同一个线程在调用doOthers()时可以直接获得当前对象的锁，进入doOthers()进行操作。</p>
<p>如果是一个不可重入锁，那么当前线程在调用doOthers()之前需要将执行doSomething()时获取当前对象的锁释放掉，实际上该对象锁已被当前线程所持有，且无法释放。所以此时会出现死锁。</p>
<p>而为什么可重入锁就可以在嵌套调用时可以自动获得锁呢？我们通过图示和源码来分别解析一下。</p>
<p>还是打水的例子，有多个人在排队打水，此时管理员允许锁和同一个人的多个水桶绑定。这个人用多个水桶打水时，第一个水桶和锁绑定并打完水之后，第二个水桶也可以直接和锁绑定并开始打水，所有的水桶都打完水之后打水人才会将锁还给管理员。这个人的所有打水流程都能够成功执行，后续等待的人也能够打到水。这就是可重入锁。</p>
<p><img src="/2020/02/12/不可不说的Java锁事/58fc5bc9.png" alt="img"></p>
<p>但如果是非可重入锁的话，此时管理员只允许锁和同一个人的一个水桶绑定。第一个水桶和锁绑定打完水之后并不会释放锁，导致第二个水桶不能和锁绑定也无法打水。当前线程出现死锁，整个等待队列中的所有线程都无法被唤醒。</p>
<p><img src="/2020/02/12/不可不说的Java锁事/ea597a0c.png" alt="img"></p>
<p>之前我们说过ReentrantLock和synchronized都是重入锁，那么我们通过重入锁ReentrantLock以及非可重入锁NonReentrantLock的源码来对比分析一下为什么非可重入锁在重复调用同步资源时会出现死锁。</p>
<p>首先ReentrantLock和NonReentrantLock都继承父类AQS，其父类AQS中维护了一个同步状态status来计数重入次数，status初始值为0。</p>
<p>当线程尝试获取锁时，可重入锁先尝试获取并更新status值，如果status == 0表示没有其他线程在执行同步代码，则把status置为1，当前线程开始执行。如果status != 0，则判断当前线程是否是获取到这个锁的线程，如果是的话执行status+1，且当前线程可以再次获取锁。而非可重入锁是直接去获取并尝试更新当前status的值，如果status != 0的话会导致其获取锁失败，当前线程阻塞。</p>
<p>释放锁时，可重入锁同样先获取当前status的值，在当前线程是持有锁的线程的前提下。如果status-1 == 0，则表示当前线程所有重复获取锁的操作都已经执行完毕，然后该线程才会真正释放锁。而非可重入锁则是在确定当前线程是持有锁的线程之后，直接将status置为0，将锁释放。</p>
<p><img src="/2020/02/12/不可不说的Java锁事/32536e7a.png" alt="img"></p>
<h2 id="6-独享锁-VS-共享锁"><a href="#6-独享锁-VS-共享锁" class="headerlink" title="6. 独享锁 VS 共享锁"></a>6. 独享锁 VS 共享锁</h2><p>独享锁和共享锁同样是一种概念。我们先介绍一下具体的概念，然后通过ReentrantLock和ReentrantReadWriteLock的源码来介绍独享锁和共享锁。</p>
<p>独享锁也叫排他锁，是指该锁一次只能被一个线程所持有。如果线程T对数据A加上排它锁后，则其他线程不能再对A加任何类型的锁。获得排它锁的线程即能读数据又能修改数据。JDK中的synchronized和JUC中Lock的实现类就是互斥锁。</p>
<p>共享锁是指该锁可被多个线程所持有。如果线程T对数据A加上共享锁后，则其他线程只能对A再加共享锁，不能加排它锁。获得共享锁的线程只能读数据，不能修改数据。</p>
<p>独享锁与共享锁也是通过AQS来实现的，通过实现不同的方法，来实现独享或者共享。</p>
<p>下图为ReentrantReadWriteLock的部分源码：</p>
<p><img src="/2020/02/12/不可不说的Java锁事/762a042b.png" alt="img"></p>
<p>我们看到ReentrantReadWriteLock有两把锁：ReadLock和WriteLock，由词知意，一个读锁一个写锁，合称“读写锁”。再进一步观察可以发现ReadLock和WriteLock是靠内部类Sync实现的锁。Sync是AQS的一个子类，这种结构在CountDownLatch、ReentrantLock、Semaphore里面也都存在。</p>
<p>在ReentrantReadWriteLock里面，读锁和写锁的锁主体都是Sync，但读锁和写锁的加锁方式不一样。读锁是共享锁，写锁是独享锁。读锁的共享锁可保证并发读非常高效，而读写、写读、写写的过程互斥，因为读锁和写锁是分离的。所以ReentrantReadWriteLock的并发性相比一般的互斥锁有了很大提升。</p>
<p>那读锁和写锁的具体加锁方式有什么区别呢？在了解源码之前我们需要回顾一下其他知识。 在最开始提及AQS的时候我们也提到了state字段（int类型，32位），该字段用来描述有多少线程获持有锁。</p>
<p>在独享锁中这个值通常是0或者1（如果是重入锁的话state值就是重入的次数），在共享锁中state就是持有锁的数量。但是在ReentrantReadWriteLock中有读、写两把锁，所以需要在一个整型变量state上分别描述读锁和写锁的数量（或者也可以叫状态）。于是将state变量“按位切割”切分成了两个部分，高16位表示读锁状态（读锁个数），低16位表示写锁状态（写锁个数）。如下图所示：</p>
<p><img src="/2020/02/12/不可不说的Java锁事/8793e00a.png" alt="img"></p>
<p>了解了概念之后我们再来看代码，先看写锁的加锁源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">	Thread current = Thread.currentThread();</span><br><span class="line">	<span class="keyword">int</span> c = getState(); <span class="comment">// 取到当前锁的个数</span></span><br><span class="line">	<span class="keyword">int</span> w = exclusiveCount(c); <span class="comment">// 取写锁的个数w</span></span><br><span class="line">	<span class="keyword">if</span> (c != <span class="number">0</span>) &#123; <span class="comment">// 如果已经有线程持有了锁(c!=0)</span></span><br><span class="line">    <span class="comment">// (Note: if c != 0 and w == 0 then shared count != 0)</span></span><br><span class="line">		<span class="keyword">if</span> (w == <span class="number">0</span> || current != getExclusiveOwnerThread()) <span class="comment">// 如果写线程数（w）为0（换言之存在读锁） 或者持有锁的线程不是当前线程就返回失败</span></span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">if</span> (w + exclusiveCount(acquires) &gt; MAX_COUNT)    <span class="comment">// 如果写入锁的数量大于最大数（65535，2的16次方-1）就抛出一个Error。</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">		<span class="comment">// Reentrant acquire</span></span><br><span class="line">    setState(c + acquires);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (writerShouldBlock() || !compareAndSetState(c, c + acquires)) <span class="comment">// 如果当且写线程数为0，并且当前线程需要阻塞那么就返回失败；或者如果通过CAS增加写线程数失败也返回失败。</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">	setExclusiveOwnerThread(current); <span class="comment">// 如果c=0，w=0或者c&gt;0，w&gt;0（重入），则设置当前线程或锁的拥有者</span></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>这段代码首先取到当前锁的个数c，然后再通过c来获取写锁的个数w。因为写锁是低16位，所以取低16位的最大值与当前的c做与运算（ int w = exclusiveCount©; ），高16位和0与运算后是0，剩下的就是低位运算的值，同时也是持有写锁的线程数目。</li>
<li>在取到写锁线程的数目后，首先判断是否已经有线程持有了锁。如果已经有线程持有了锁(c!=0)，则查看当前写锁线程的数目，如果写线程数为0（即此时存在读锁）或者持有锁的线程不是当前线程就返回失败（涉及到公平锁和非公平锁的实现）。</li>
<li>如果写入锁的数量大于最大数（65535，2的16次方-1）就抛出一个Error。</li>
<li>如果当且写线程数为0（那么读线程也应该为0，因为上面已经处理c!=0的情况），并且当前线程需要阻塞那么就返回失败；如果通过CAS增加写线程数失败也返回失败。</li>
<li>如果c=0,w=0或者c&gt;0,w&gt;0（重入），则设置当前线程或锁的拥有者，返回成功！</li>
</ul>
<p>tryAcquire()除了重入条件（当前线程为获取了写锁的线程）之外，增加了一个读锁是否存在的判断。如果存在读锁，则写锁不能被获取，原因在于：必须确保写锁的操作对读锁可见，如果允许读锁在已被获取的情况下对写锁的获取，那么正在运行的其他读线程就无法感知到当前写线程的操作。</p>
<p>因此，只有等待其他读线程都释放了读锁，写锁才能被当前线程获取，而写锁一旦被获取，则其他读写线程的后续访问均被阻塞。写锁的释放与ReentrantLock的释放过程基本类似，每次释放均减少写状态，当写状态为0时表示写锁已被释放，然后等待的读写线程才能够继续访问读写锁，同时前次写线程的修改对后续的读写线程可见。</p>
<p>接着是读锁的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> unused)</span> </span>&#123;</span><br><span class="line">    Thread current = Thread.currentThread();</span><br><span class="line">    <span class="keyword">int</span> c = getState();</span><br><span class="line">    <span class="keyword">if</span> (exclusiveCount(c) != <span class="number">0</span> &amp;&amp;</span><br><span class="line">        getExclusiveOwnerThread() != current)</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;                                   <span class="comment">// 如果其他线程已经获取了写锁，则当前线程获取读锁失败，进入等待状态</span></span><br><span class="line">    <span class="keyword">int</span> r = sharedCount(c);</span><br><span class="line">    <span class="keyword">if</span> (!readerShouldBlock() &amp;&amp;</span><br><span class="line">        r &lt; MAX_COUNT &amp;&amp;</span><br><span class="line">        compareAndSetState(c, c + SHARED_UNIT)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">            firstReader = current;</span><br><span class="line">            firstReaderHoldCount = <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstReader == current) &#123;</span><br><span class="line">            firstReaderHoldCount++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            HoldCounter rh = cachedHoldCounter;</span><br><span class="line">            <span class="keyword">if</span> (rh == <span class="keyword">null</span> || rh.tid != getThreadId(current))</span><br><span class="line">                cachedHoldCounter = rh = readHolds.get();</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (rh.count == <span class="number">0</span>)</span><br><span class="line">                readHolds.set(rh);</span><br><span class="line">            rh.count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fullTryAcquireShared(current);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到在tryAcquireShared(int unused)方法中，如果其他线程已经获取了写锁，则当前线程获取读锁失败，进入等待状态。如果当前线程获取了写锁或者写锁未被获取，则当前线程（线程安全，依靠CAS保证）增加读状态，成功获取读锁。读锁的每次释放（线程安全的，可能有多个读线程同时释放读锁）均减少读状态，减少的值是“1&lt;&lt;16”。所以读写锁才能实现读读的过程共享，而读写、写读、写写的过程互斥。</p>
<p>此时，我们再回头看一下互斥锁ReentrantLock中公平锁和非公平锁的加锁源码：</p>
<p><img src="/2020/02/12/不可不说的Java锁事/8b7878ec.png" alt="img"></p>
<p>我们发现在ReentrantLock虽然有公平锁和非公平锁两种，但是它们添加的都是独享锁。根据源码所示，当某一个线程调用lock方法获取锁时，如果同步资源没有被其他线程锁住，那么当前线程在使用CAS更新state成功后就会成功抢占该资源。而如果公共资源被占用且不是被当前线程占用，那么就会加锁失败。所以可以确定ReentrantLock无论读操作还是写操作，添加的锁都是都是独享锁。</p>
<h1 id="其他锁细节"><a href="#其他锁细节" class="headerlink" title="其他锁细节"></a>其他锁细节</h1><h2 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h2><p>synchronized 关键字是一把经典的锁，也是我们平时用得最多的。在 JDK1.6 之前， syncronized 是一把重量级的锁，不过随着 JDK 的升级，也在对它进行不断的优化，如今它变得不那么重了，甚至在某些场景下，它的性能反而优于轻量级锁。在加了 syncronized 关键字的方法、代码块中，一次只允许一个线程进入特定代码段，从而避免多线程同时修改同一数据。</p>
<p>synchronized 锁有如下几个特点：</p>
<p><strong>有锁升级过程</strong></p>
<p>在 JDK1.5 (含)之前， synchronized 的底层实现是重量级的，所以之前一致称呼它为”重量级锁”，在 JDK1.5 之后，对 synchronized 进行了各种优化，它变得不那么重了，实现原理就是锁升级的过程。我们先聊聊 1.5 之后的 synchronized 实现原理是怎样的。说到 synchronized 加锁原理，就不得不先说 Java 对象在内存中的布局， Java 对象内存布局如下:</p>
<p><img src="/2020/02/12/不可不说的Java锁事/image-20200213202817218.png" alt="image-20200213202817218"></p>
<p>如上图所示，在创建一个对象后，在 JVM 虚拟机( HotSpot )中，对象在 Java 内存中的存储布局 可分为三块:</p>
<p><strong>对象头区域此处存储的信息包括两部分：</strong></p>
<p>1、对象自身的运行时数据( MarkWord )</p>
<p>存储 hashCode、GC 分代年龄、锁类型标记、偏向锁线程 ID 、 CAS 锁指向线程 LockRecord 的指针等， synconized 锁的机制与这个部分( markwork )密切相关，用 markword 中最低的三位代表锁的状态，其中一位是偏向锁位，另外两位是普通锁位。</p>
<p>2、对象类型指针( Class Pointer )</p>
<p>对象指向它的类元数据的指针、 JVM 就是通过它来确定是哪个 Class 的实例。</p>
<p><strong>实例数据区域</strong> </p>
<p> 此处存储的是对象真正有效的信息，比如对象中所有字段的内容</p>
<p><strong>对齐填充区域</strong></p>
<p> JVM 的实现 HostSpot 规定对象的起始地址必须是 8 字节的整数倍，换句话来说，现在 64 位的 OS 往外读取数据的时候一次性读取 64bit 整数倍的数据，也就是 8 个字节，所以 HotSpot 为了高效读取对象，就做了”对齐”，如果一个对象实际占的内存大小不是 8byte 的整数倍时，就”补位”到 8byte 的整数倍。所以对齐填充区域的大小不是固定的。</p>
<p>当线程进入到 synchronized 处尝试获取该锁时， synchronized 锁升级流程如下：</p>
<p><img src="/2020/02/12/不可不说的Java锁事/image-20200213203159163.png" alt="image-20200213203159163"></p>
<p>如上图所示， synchronized 锁升级的顺序为：偏向锁-&gt;轻量级锁-&gt;重量级锁，每一步触发锁升级的情况如下：</p>
<h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>在 JDK1.8 中，其实默认是轻量级锁，但如果设定了 -XX:BiasedLockingStartupDelay = 0 ，那在对一个 Object 做 syncronized 的时候，会立即上一把偏向锁。当处于偏向锁状态时， markwork 会记录当前线程 ID 。</p>
<h3 id="升级到轻量级锁"><a href="#升级到轻量级锁" class="headerlink" title="升级到轻量级锁"></a><strong>升级到轻量级锁</strong></h3><p>当下一个线程参与到偏向锁竞争时，会先判断 markword 中保存的线程 ID 是否与这个线程 ID 相等，如果不相等，会立即撤销偏向锁，升级为轻量级锁。每个线程在自己的线程栈中生成一个 LockRecord ( LR )，然后每个线程通过 CAS (自旋)的操作将锁对象头中的 markwork 设置为指向自己的 LR 的指针，哪个线程设置成功，就意味着获得锁。关于 synchronized 中此时执行的 CAS 操作是通过 native 的调用 HotSpot 中 bytecodeInterpreter.cpp 文件 C++ 代码实现的，有兴趣的可以继续深挖。</p>
<h3 id="升级到重量级锁"><a href="#升级到重量级锁" class="headerlink" title="升级到重量级锁"></a><strong>升级到重量级锁</strong></h3><p>如果锁竞争加剧(如线程自旋次数或者自旋的线程数超过某阈值， JDK1.6 之后，由 JVM 自己控制该规则)，就会升级为重量级锁。此时就会向操作系统申请资源，线程挂起，进入到操作系统内核态的等待队列中，等待操作系统调度，然后映射回用户态。在重量级锁中，由于需要做内核态到用户态的转换，而这个过程中需要消耗较多时间，也就是”重”的原因之一。</p>
<h3 id="可重入"><a href="#可重入" class="headerlink" title="可重入"></a><strong>可重入</strong></h3><p>synchronized 拥有强制原子性的内部锁机制，是一把可重入锁。因此，在一个线程使用 synchronized 方法时调用该对象另一个 synchronized 方法，即一个线程得到一个对象锁后再次请求该对象锁，是永远可以拿到锁的。在 Java 中线程获得对象锁的操作是以线程为单位的，而不是以调用为单位的。 synchronized 锁的对象头的 markwork 中会记录该锁的线程持有者和计数器，当一个线程请求成功后， JVM 会记下持有锁的线程，并将计数器计为1。此时其他线程请求该锁，则必须等待。而该持有锁的线程如果再次请求这个锁，就可以再次拿到这个锁，同时计数器会递增。当线程退出一个 synchronized 方法/块时，计数器会递减，如果计数器为 0 则释放该锁锁。</p>
<h3 id="悲观锁-互斥锁、排他锁"><a href="#悲观锁-互斥锁、排他锁" class="headerlink" title="悲观锁(互斥锁、排他锁)"></a><strong>悲观锁(互斥锁、排他锁)</strong></h3><p> synchronized 是一把悲观锁(独占锁)，当前线程如果获取到锁，会导致其它所有需要锁该的线程等待，一直等待持有锁的线程释放锁才继续进行锁的争抢。</p>
<h2 id="ReentrantLock"><a href="#ReentrantLock" class="headerlink" title="ReentrantLock"></a>ReentrantLock</h2><p>ReentrantLock 从字面可以看出是一把可重入锁，这点和 synchronized 一样，但实现原理也与 syncronized 有很大差别，它是基于经典的 AQS(AbstractQueueSyncronized) 实现的, AQS 是基于 volitale 和 CAS 实现的，其中 AQS 中维护一个 valitale 类型的变量 state 来做一个可重入锁的重入次数，加锁和释放锁也是围绕这个变量来进行的。 ReentrantLock 也提供了一些 synchronized 没有的特点，因此比 synchronized 好用。</p>
<p><strong>AQS模型如下图：</strong></p>
<p><img src="/2020/02/12/不可不说的Java锁事/image-20200213203315752.png" alt="image-20200213203315752"></p>
<p>ReentrantLock 有如下特点：</p>
<h3 id="可重入-1"><a href="#可重入-1" class="headerlink" title="可重入"></a>可重入</h3><p> ReentrantLock 和 syncronized 关键字一样，都是可重入锁，不过两者实现原理稍有差别， RetrantLock 利用 AQS 的的 state 状态来判断资源是否已锁，同一线程重入加锁， state 的状态 +1 ; 同一线程重入解锁, state 状态 -1 (解锁必须为当前独占线程，否则异常); 当 state 为 0 时解锁成功。</p>
<h3 id="需要手动加锁、解锁"><a href="#需要手动加锁、解锁" class="headerlink" title="需要手动加锁、解锁"></a>需要手动加锁、解锁</h3><p>synchronized 关键字是自动进行加锁、解锁的，而 ReentrantLock 需要 lock() 和 unlock() 方法配合 try/finally 语句块来完成，来手动加锁、解锁。</p>
<h3 id="支持设置锁的超时时间"><a href="#支持设置锁的超时时间" class="headerlink" title="支持设置锁的超时时间"></a>支持设置锁的超时时间</h3><p> synchronized 关键字无法设置锁的超时时间，如果一个获得锁的线程内部发生死锁，那么其他线程就会一直进入阻塞状态，而 ReentrantLock 提供 tryLock 方法，允许设置线程获取锁的超时时间，如果超时，则跳过，不进行任何操作，避免死锁的发生。</p>
<h3 id="支持公平-非公平锁"><a href="#支持公平-非公平锁" class="headerlink" title="支持公平/非公平锁"></a>支持公平/非公平锁</h3><p>synchronized 关键字是一种非公平锁，先抢到锁的线程先执行。而 ReentrantLock 的构造方法中允许设置 true/false 来实现公平、非公平锁，如果设置为 true ，则线程获取锁要遵循”先来后到”的规则，每次都会构造一个线程 Node ，然后到双向链表的”尾巴”后面排队，等待前面的 Node 释放锁资源。</p>
<h3 id="可中断锁"><a href="#可中断锁" class="headerlink" title="可中断锁"></a>可中断锁</h3><p> ReentrantLock 中的 lockInterruptibly() 方法使得线程可以在被阻塞时响应中断，比如一个线程 t1 通过 lockInterruptibly() 方法获取到一个可重入锁，并执行一个长时间的任务，另一个线程通过 interrupt() 方法就可以立刻打断 t1 线程的执行，来获取t1持有的那个可重入锁。而通过 ReentrantLock 的 lock() 方法或者 Synchronized 持有锁的线程是不会响应其他线程的 interrupt() 方法的，直到该方法主动释放锁之后才会响应 interrupt() 方法。</p>
<h2 id="ReentrantReadWriteLock"><a href="#ReentrantReadWriteLock" class="headerlink" title="ReentrantReadWriteLock"></a>ReentrantReadWriteLock</h2><p>ReentrantReadWriteLock (读写锁)其实是两把锁，一把是 WriteLock (写锁)，一把是读锁， ReadLock 。读写锁的规则是：读读不互斥、读写互斥、写写互斥。在一些实际的场景中，读操作的频率远远高于写操作，如果直接用一般的锁进行并发控制的话，就会读读互斥、读写互斥、写写互斥，效率低下，读写锁的产生就是为了优化这种场景的操作效率。一般情况下独占锁的效率低来源于高并发下对临界区的激烈竞争导致线程上下文切换。因此当并发不是很高的情况下，读写锁由于需要额外维护读锁的状态，可能还不如独占锁的效率高，因此需要根据实际情况选择使用。 </p>
<p>ReentrantReadWriteLock 的原理也是基于 AQS 进行实现的，与 ReentrantLock 的差别在于 ReentrantReadWriteLock 锁拥有共享锁、排他锁属性。读写锁中的加锁、释放锁也是基于 Sync (继承于 AQS )，并且主要使用 AQS 中的 state 和 node 中的 waitState 变量进行实现的。实现读写锁与实现普通互斥锁的主要区别在于需要分别记录读锁状态及写锁状态，并且等待队列中需要区别处理两种加锁操作。 ReentrantReadWriteLock 中将 AQS 中的 int 类型的 state 分为高 16 位与第 16 位分别记录读锁和写锁的状态，如下图所示：</p>
<p><img src="/2020/02/12/不可不说的Java锁事/image-20200213203511263.png" alt="image-20200213203511263"></p>
<p><strong>WriteLock(写锁)是悲观锁(排他锁、互斥锁)</strong></p>
<p>通过计算 state&amp;((1&lt;&lt;16)-1) ，将 state 的高 16 位全部抹去，因此 state 的低位记录着写锁的重入计数。</p>
<p>获取写锁源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取写锁</span></span><br><span class="line"><span class="comment">           Acquires the write lock.</span></span><br><span class="line"><span class="comment">         *  如果此时没有任何线程持有写锁或者读锁，那么当前线程执行CAS操作更新status，</span></span><br><span class="line"><span class="comment">         *  若更新成功，则设置读锁重入次数为1，并立即返回</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;Acquires the write lock if neither the read nor write lock</span></span><br><span class="line"><span class="comment">         * are held by another thread</span></span><br><span class="line"><span class="comment">         * and returns immediately, setting the write lock hold count to</span></span><br><span class="line"><span class="comment">         * one.</span></span><br><span class="line"><span class="comment">         *  如果当前线程已经持有该写锁，那么将写锁持有次数设置为1，并立即返回</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;If the current thread already holds the write lock then the</span></span><br><span class="line"><span class="comment">         * hold count is incremented by one and the method returns</span></span><br><span class="line"><span class="comment">         * immediately.</span></span><br><span class="line"><span class="comment">         *  如果该锁已经被另外一个线程持有，那么停止该线程的CPU调度并进入休眠状态，</span></span><br><span class="line"><span class="comment">         *  直到该写锁被释放，且成功将写锁持有次数设置为1才表示获取写锁成功</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;If the lock is held by another thread then the current</span></span><br><span class="line"><span class="comment">         * thread becomes disabled for thread scheduling purposes and</span></span><br><span class="line"><span class="comment">         * lies dormant until the write lock has been acquired, at which</span></span><br><span class="line"><span class="comment">         * time the write lock hold count is set to one.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            sync.acquire(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该方法为以独占模式获取锁，忽略中断</span></span><br><span class="line"><span class="comment">     * 如果调用一次该“tryAcquire”方法更新status成功，则直接返回，代表抢锁成功</span></span><br><span class="line"><span class="comment">     * 否则，将会进入同步队列等待，不断执行“tryAcquire”方法尝试CAS更新status状态，直到成功抢到锁</span></span><br><span class="line"><span class="comment">     * 其中“tryAcquire”方法在NonfairSync(公平锁)中和FairSync(非公平锁)中都有各自的实现</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * Acquires in exclusive mode, ignoring interrupts.  Implemented</span></span><br><span class="line"><span class="comment">     * by invoking at least once &#123;<span class="doctag">@link</span> #tryAcquire&#125;,</span></span><br><span class="line"><span class="comment">     * returning on success.  Otherwise the thread is queued, possibly</span></span><br><span class="line"><span class="comment">     * repeatedly blocking and unblocking, invoking &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">     * #tryAcquire&#125; until success.  This method can be used</span></span><br><span class="line"><span class="comment">     * to implement method &#123;<span class="doctag">@link</span> Lock#lock&#125;.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arg the acquire argument.  This value is conveyed to</span></span><br><span class="line"><span class="comment">     *        &#123;<span class="doctag">@link</span> #tryAcquire&#125; but is otherwise uninterpreted and</span></span><br><span class="line"><span class="comment">     *        can represent anything you like.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp;</span><br><span class="line">            acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">            selfInterrupt();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Walkthrough:</span></span><br><span class="line"><span class="comment">             * 1、如果读写锁的计数不为0，且持有锁的线程不是当前线程，则返回false</span></span><br><span class="line"><span class="comment">             * 1. If read count nonzero or write count nonzero</span></span><br><span class="line"><span class="comment">             *    and owner is a different thread, fail.</span></span><br><span class="line"><span class="comment">             * 2、如果持有锁的计数不为0且计数总数超过限定的最大值，也返回false</span></span><br><span class="line"><span class="comment">             * 2. If count would saturate, fail. (This can only</span></span><br><span class="line"><span class="comment">             *    happen if count is already nonzero.)</span></span><br><span class="line"><span class="comment">             * 3、如果该锁是可重入或该线程在队列中的策略是允许它尝试抢锁，那么该线程就能获取锁</span></span><br><span class="line"><span class="comment">             * 3. Otherwise, this thread is eligible for lock if</span></span><br><span class="line"><span class="comment">             *    it is either a reentrant acquire or</span></span><br><span class="line"><span class="comment">             *    queue policy allows it. If so, update state</span></span><br><span class="line"><span class="comment">             *    and set owner.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            Thread current = Thread.currentThread();</span><br><span class="line">            <span class="comment">//获取读写锁的状态</span></span><br><span class="line">            <span class="keyword">int</span> c = getState();</span><br><span class="line">            <span class="comment">//获取该写锁重入的次数</span></span><br><span class="line">            <span class="keyword">int</span> w = exclusiveCount(c);</span><br><span class="line">            <span class="comment">//如果读写锁状态不为0，说明已经有其他线程获取了读锁或写锁</span></span><br><span class="line">            <span class="keyword">if</span> (c != <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//如果写锁重入次数为0，说明有线程获取到读锁，根据“读写锁互斥”原则，返回false</span></span><br><span class="line">                <span class="comment">//或者如果写锁重入次数不为0，且获取写锁的线程不是当前线程，根据"写锁独占"原则，返回false</span></span><br><span class="line">                <span class="comment">// (Note: if c != 0 and w == 0 then shared count != 0)</span></span><br><span class="line">                <span class="keyword">if</span> (w == <span class="number">0</span> || current != getExclusiveOwnerThread())</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">               <span class="comment">//如果写锁可重入次数超过最大次数（65535），则抛异常</span></span><br><span class="line">                <span class="keyword">if</span> (w + exclusiveCount(acquires) &gt; MAX_COUNT)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">                <span class="comment">//到这里说明该线程是重入写锁，更新重入写锁的计数(+1)，返回true</span></span><br><span class="line">                <span class="comment">// Reentrant acquire</span></span><br><span class="line">                setState(c + acquires);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果读写锁状态为0,说明读锁和写锁都没有被获取，会走下面两个分支：</span></span><br><span class="line">            <span class="comment">//如果要阻塞或者执行CAS操作更新读写锁的状态失败，则返回false</span></span><br><span class="line">            <span class="comment">//如果不需要阻塞且CAS操作成功，则当前线程成功拿到锁，设置锁的owner为当前线程，返回true</span></span><br><span class="line">            <span class="keyword">if</span> (writerShouldBlock() ||</span><br><span class="line">                !compareAndSetState(c, c + acquires))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">            setExclusiveOwnerThread(current);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>释放写锁源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  * Note that tryRelease and tryAcquire can be called by</span></span><br><span class="line"><span class="comment">  * Conditions. So it is possible that their arguments contain</span></span><br><span class="line"><span class="comment">  * both read and write holds that are all released during a</span></span><br><span class="line"><span class="comment">  * condition wait and re-established in tryAcquire.</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">     <span class="comment">//若锁的持有者不是当前线程，抛出异常</span></span><br><span class="line">     <span class="keyword">if</span> (!isHeldExclusively())</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">     <span class="comment">//写锁的可重入计数减掉releases个</span></span><br><span class="line">     <span class="keyword">int</span> nextc = getState() - releases;</span><br><span class="line">     <span class="comment">//如果写锁重入计数为0了，则说明写锁被释放了</span></span><br><span class="line">     <span class="keyword">boolean</span> free = exclusiveCount(nextc) == <span class="number">0</span>;</span><br><span class="line">     <span class="keyword">if</span> (free)</span><br><span class="line">        <span class="comment">//若写锁被释放，则将锁的持有者设置为null，进行GC</span></span><br><span class="line">        setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">     <span class="comment">//更新写锁的重入计数</span></span><br><span class="line">     setState(nextc);</span><br><span class="line">     <span class="keyword">return</span> free;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<p><strong>ReadLock(读锁)是共享锁(乐观锁)</strong></p>
<p>通过计算 state&gt;&gt;&gt;16 进行无符号补 0 ，右移 16 位，因此 state 的高位记录着写锁的重入计数.</p>
<p>读锁获取锁的过程比写锁稍微复杂些，首先判断写锁是否为 0 并且当前线程不占有独占锁，直接返回；否则，判断读线程是否需要被阻塞并且读锁数量是否小于最大值并且比较设置状态成功，若当前没有读锁，则设置第一个读线程 firstReader 和 firstReaderHoldCount ；若当前线程线程为第一个读线程，则增加 firstReaderHoldCount ；否则，将设置当前线程对应的 HoldCounter 对象的值，更新成功后会在 firstReaderHoldCount 中 readHolds ( ThreadLocal 类型的)的本线程副本中记录当前线程重入数，这是为了实现 JDK1.6 中加入的 getReadHoldCount ()方法的，这个方法能获取当前线程重入共享锁的次数( state 中记录的是多个线程的总重入次数)，加入了这个方法让代码复杂了不少，但是其原理还是很简单的：如果当前只有一个线程的话，还不需要动用 ThreadLocal ，直接往 firstReaderHoldCount 这个成员变量里存重入数，当有第二个线程来的时候，就要动用 ThreadLocal 变量 readHolds 了，每个线程拥有自己的副本，用来保存自己的重入数。</p>
<p>获取读锁源码： </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 获取读锁</span></span><br><span class="line"><span class="comment">         * Acquires the read lock.</span></span><br><span class="line"><span class="comment">         * 如果写锁未被其他线程持有，执行CAS操作更新status值，获取读锁后立即返回</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;Acquires the read lock if the write lock is not held by</span></span><br><span class="line"><span class="comment">         * another thread and returns immediately.</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * 如果写锁被其他线程持有，那么停止该线程的CPU调度并进入休眠状态，直到该读锁被释放</span></span><br><span class="line"><span class="comment">         * &lt;p&gt;If the write lock is held by another thread then</span></span><br><span class="line"><span class="comment">         * the current thread becomes disabled for thread scheduling</span></span><br><span class="line"><span class="comment">         * purposes and lies dormant until the read lock has been acquired.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            sync.acquireShared(<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 该方法为以共享模式获取读锁，忽略中断</span></span><br><span class="line"><span class="comment">     * 如果调用一次该“tryAcquireShared”方法更新status成功，则直接返回，代表抢锁成功</span></span><br><span class="line"><span class="comment">     * 否则，将会进入同步队列等待，不断执行“tryAcquireShared”方法尝试CAS更新status状态，直到成功抢到锁</span></span><br><span class="line"><span class="comment">     * 其中“tryAcquireShared”方法在NonfairSync(公平锁)中和FairSync(非公平锁)中都有各自的实现</span></span><br><span class="line"><span class="comment">     * (看这注释是不是和写锁很对称)</span></span><br><span class="line"><span class="comment">     * Acquires in shared mode, ignoring interrupts.  Implemented by</span></span><br><span class="line"><span class="comment">     * first invoking at least once &#123;<span class="doctag">@link</span> #tryAcquireShared&#125;,</span></span><br><span class="line"><span class="comment">     * returning on success.  Otherwise the thread is queued, possibly</span></span><br><span class="line"><span class="comment">     * repeatedly blocking and unblocking, invoking &#123;<span class="doctag">@link</span></span></span><br><span class="line"><span class="comment">     * #tryAcquireShared&#125; until success.</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> arg the acquire argument.  This value is conveyed to</span></span><br><span class="line"><span class="comment">     *        &#123;<span class="doctag">@link</span> #tryAcquireShared&#125; but is otherwise uninterpreted</span></span><br><span class="line"><span class="comment">     *        and can represent anything you like.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquireShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (tryAcquireShared(arg) &lt; <span class="number">0</span>)</span><br><span class="line">            doAcquireShared(arg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">int</span> <span class="title">tryAcquireShared</span><span class="params">(<span class="keyword">int</span> unused)</span> </span>&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Walkthrough:</span></span><br><span class="line"><span class="comment">             * 1、如果已经有其他线程获取到了写锁，根据“读写互斥”原则，抢锁失败，返回-1</span></span><br><span class="line"><span class="comment">             * 1.If write lock held by another thread, fail.</span></span><br><span class="line"><span class="comment">             * 2、如果该线程本身持有写锁，那么看一下是否要readerShouldBlock，如果不需要阻塞，</span></span><br><span class="line"><span class="comment">             *    则执行CAS操作更新state和重入计数。</span></span><br><span class="line"><span class="comment">             *    这里要注意的是，上面的步骤不检查是否可重入(因为读锁属于共享锁，天生支持可重入)</span></span><br><span class="line"><span class="comment">             * 2. Otherwise, this thread is eligible for</span></span><br><span class="line"><span class="comment">             *    lock wrt state, so ask if it should block</span></span><br><span class="line"><span class="comment">             *    because of queue policy. If not, try</span></span><br><span class="line"><span class="comment">             *    to grant by CASing state and updating count.</span></span><br><span class="line"><span class="comment">             *    Note that step does not check for reentrant</span></span><br><span class="line"><span class="comment">             *    acquires, which is postponed to full version</span></span><br><span class="line"><span class="comment">             *    to avoid having to check hold count in</span></span><br><span class="line"><span class="comment">             *    the more typical non-reentrant case.</span></span><br><span class="line"><span class="comment">             * 3、如果因为CAS更新status失败或者重入计数超过最大值导致步骤2执行失败</span></span><br><span class="line"><span class="comment">             *    那就进入到fullTryAcquireShared方法进行死循环，直到抢锁成功</span></span><br><span class="line"><span class="comment">             * 3. If step 2 fails either because thread</span></span><br><span class="line"><span class="comment">             *    apparently not eligible or CAS fails or count</span></span><br><span class="line"><span class="comment">             *    saturated, chain to version with full retry loop.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//当前尝试获取读锁的线程</span></span><br><span class="line">            Thread current = Thread.currentThread();</span><br><span class="line">            <span class="comment">//获取该读写锁状态</span></span><br><span class="line">            <span class="keyword">int</span> c = getState();</span><br><span class="line">            <span class="comment">//如果有线程获取到了写锁 ，且获取写锁的不是当前线程则返回失败</span></span><br><span class="line">            <span class="keyword">if</span> (exclusiveCount(c) != <span class="number">0</span> &amp;&amp;</span><br><span class="line">                getExclusiveOwnerThread() != current)</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="comment">//获取读锁的重入计数</span></span><br><span class="line">            <span class="keyword">int</span> r = sharedCount(c);</span><br><span class="line">            <span class="comment">//如果读线程不应该被阻塞，且重入计数小于最大值，且CAS执行读锁重入计数+1成功，则执行线程重入的计数加1操作，返回成功</span></span><br><span class="line">            <span class="keyword">if</span> (!readerShouldBlock() &amp;&amp;</span><br><span class="line">                r &lt; MAX_COUNT &amp;&amp;</span><br><span class="line">                compareAndSetState(c, c + SHARED_UNIT)) &#123;</span><br><span class="line">                <span class="comment">//如果还未有线程获取到读锁，则将firstReader设置为当前线程，firstReaderHoldCount设置为1</span></span><br><span class="line">                <span class="keyword">if</span> (r == <span class="number">0</span>) &#123;</span><br><span class="line">                    firstReader = current;</span><br><span class="line">                    firstReaderHoldCount = <span class="number">1</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstReader == current) &#123;</span><br><span class="line">                    <span class="comment">//如果firstReader是当前线程，则将firstReader的重入计数变量firstReaderHoldCount加1</span></span><br><span class="line">                    firstReaderHoldCount++;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//否则说明有至少两个线程共享读锁，获取共享锁重入计数器HoldCounter</span></span><br><span class="line">                    <span class="comment">//从HoldCounter中拿到当前线程的线程变量cachedHoldCounter，将此线程的重入计数count加1</span></span><br><span class="line">                    HoldCounter rh = cachedHoldCounter;</span><br><span class="line">                    <span class="keyword">if</span> (rh == <span class="keyword">null</span> || rh.tid != getThreadId(current))</span><br><span class="line">                        cachedHoldCounter = rh = readHolds.get();</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (rh.count == <span class="number">0</span>)</span><br><span class="line">                        readHolds.set(rh);</span><br><span class="line">                    rh.count++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果上面的if条件有一个都不满足，则进入到这个方法里进行死循环重新获取</span></span><br><span class="line">            <span class="keyword">return</span> fullTryAcquireShared(current);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 用于处理CAS操作state失败和tryAcquireShared中未执行获取可重入锁动作的full方法(补偿方法？)</span></span><br><span class="line"><span class="comment">         * Full version of acquire for reads, that handles CAS misses</span></span><br><span class="line"><span class="comment">         * and reentrant reads not dealt with in tryAcquireShared.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="function"><span class="keyword">final</span> <span class="keyword">int</span> <span class="title">fullTryAcquireShared</span><span class="params">(Thread current)</span> </span>&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * 此代码与tryAcquireShared中的代码有部分相似的地方，</span></span><br><span class="line"><span class="comment">             * 但总体上更简单，因为不会使tryAcquireShared与重试和延迟读取保持计数之间的复杂判断</span></span><br><span class="line"><span class="comment">             * This code is in part redundant with that in</span></span><br><span class="line"><span class="comment">             * tryAcquireShared but is simpler overall by not</span></span><br><span class="line"><span class="comment">             * complicating tryAcquireShared with interactions between</span></span><br><span class="line"><span class="comment">             * retries and lazily reading hold counts.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            HoldCounter rh = <span class="keyword">null</span>;</span><br><span class="line">            <span class="comment">//死循环</span></span><br><span class="line">            <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">                <span class="comment">//获取读写锁状态</span></span><br><span class="line">                <span class="keyword">int</span> c = getState();</span><br><span class="line">                <span class="comment">//如果有线程获取到了写锁</span></span><br><span class="line">                <span class="keyword">if</span> (exclusiveCount(c) != <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="comment">//如果获取写锁的线程不是当前线程，返回失败</span></span><br><span class="line">                    <span class="keyword">if</span> (getExclusiveOwnerThread() != current)</span><br><span class="line">                        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    <span class="comment">// else we hold the exclusive lock; blocking here</span></span><br><span class="line">                    <span class="comment">// would cause deadlock.</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (readerShouldBlock()) &#123;<span class="comment">//如果没有线程获取到写锁，且读线程要阻塞</span></span><br><span class="line">                    <span class="comment">// Make sure we're not acquiring read lock reentrantly</span></span><br><span class="line">                    <span class="comment">//如果当前线程为第一个获取到读锁的线程</span></span><br><span class="line">                    <span class="keyword">if</span> (firstReader == current) &#123;</span><br><span class="line">                        <span class="comment">// assert firstReaderHoldCount &gt; 0;</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123; <span class="comment">//如果当前线程不是第一个获取到读锁的线程(也就是说至少有有一个线程获取到了读锁)</span></span><br><span class="line">                        <span class="comment">//</span></span><br><span class="line">                        <span class="keyword">if</span> (rh == <span class="keyword">null</span>) &#123;</span><br><span class="line">                            rh = cachedHoldCounter;</span><br><span class="line">                            <span class="keyword">if</span> (rh == <span class="keyword">null</span> || rh.tid != getThreadId(current)) &#123;</span><br><span class="line">                                rh = readHolds.get();</span><br><span class="line">                                <span class="keyword">if</span> (rh.count == <span class="number">0</span>)</span><br><span class="line">                                    readHolds.remove();</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">if</span> (rh.count == <span class="number">0</span>)</span><br><span class="line">                            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">/**</span></span><br><span class="line"><span class="comment">                 *下面是既没有线程获取写锁，当前线程又不需要阻塞的情况</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                <span class="comment">//重入次数等于最大重入次数，抛异常</span></span><br><span class="line">                <span class="keyword">if</span> (sharedCount(c) == MAX_COUNT)</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">                <span class="comment">//如果执行CAS操作成功将读写锁的重入计数加1，则对当前持有这个共享读锁的线程的重入计数加1，然后返回成功</span></span><br><span class="line">                <span class="keyword">if</span> (compareAndSetState(c, c + SHARED_UNIT)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (sharedCount(c) == <span class="number">0</span>) &#123;</span><br><span class="line">                        firstReader = current;</span><br><span class="line">                        firstReaderHoldCount = <span class="number">1</span>;</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (firstReader == current) &#123;</span><br><span class="line">                        firstReaderHoldCount++;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (rh == <span class="keyword">null</span>)</span><br><span class="line">                            rh = cachedHoldCounter;</span><br><span class="line">                        <span class="keyword">if</span> (rh == <span class="keyword">null</span> || rh.tid != getThreadId(current))</span><br><span class="line">                            rh = readHolds.get();</span><br><span class="line">                        <span class="keyword">else</span> <span class="keyword">if</span> (rh.count == <span class="number">0</span>)</span><br><span class="line">                            readHolds.set(rh);</span><br><span class="line">                        rh.count++;</span><br><span class="line">                        cachedHoldCounter = rh; <span class="comment">// cache for release</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>
<p>释放读锁源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * Releases in shared mode.  Implemented by unblocking one or more</span></span><br><span class="line"><span class="comment">  * threads if &#123;<span class="doctag">@link</span> #tryReleaseShared&#125; returns true.</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> arg the release argument.  This value is conveyed to</span></span><br><span class="line"><span class="comment">  *        &#123;<span class="doctag">@link</span> #tryReleaseShared&#125; but is otherwise uninterpreted</span></span><br><span class="line"><span class="comment">  *        and can represent anything you like.</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span> the value returned from &#123;<span class="doctag">@link</span> #tryReleaseShared&#125;</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">releaseShared</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tryReleaseShared(arg)) &#123;<span class="comment">//尝试释放一次共享锁计数</span></span><br><span class="line">        doReleaseShared();<span class="comment">//真正释放锁</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *此方法表示读锁线程释放锁。</span></span><br><span class="line"><span class="comment"> *首先判断当前线程是否为第一个读线程firstReader，</span></span><br><span class="line"><span class="comment"> *若是，则判断第一个读线程占有的资源数firstReaderHoldCount是否为1，</span></span><br><span class="line"><span class="comment">  若是，则设置第一个读线程firstReader为空，否则，将第一个读线程占有的资源数firstReaderHoldCount减1；</span></span><br><span class="line"><span class="comment">  若当前线程不是第一个读线程，</span></span><br><span class="line"><span class="comment">  那么首先会获取缓存计数器（上一个读锁线程对应的计数器 ），</span></span><br><span class="line"><span class="comment">  若计数器为空或者tid不等于当前线程的tid值，则获取当前线程的计数器，</span></span><br><span class="line"><span class="comment">  如果计数器的计数count小于等于1，则移除当前线程对应的计数器，</span></span><br><span class="line"><span class="comment">  如果计数器的计数count小于等于0，则抛出异常，之后再减少计数即可。</span></span><br><span class="line"><span class="comment">  无论何种情况，都会进入死循环，该循环可以确保成功设置状态state</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryReleaseShared</span><span class="params">(<span class="keyword">int</span> unused)</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 获取当前线程</span></span><br><span class="line">      Thread current = Thread.currentThread();</span><br><span class="line">      <span class="keyword">if</span> (firstReader == current) &#123; <span class="comment">// 当前线程为第一个读线程</span></span><br><span class="line">          <span class="comment">// assert firstReaderHoldCount &gt; 0;</span></span><br><span class="line">         <span class="keyword">if</span> (firstReaderHoldCount == <span class="number">1</span>) <span class="comment">// 读线程占用的资源数为1</span></span><br><span class="line">              firstReader = <span class="keyword">null</span>;</span><br><span class="line">          <span class="keyword">else</span> <span class="comment">// 减少占用的资源</span></span><br><span class="line">              firstReaderHoldCount--;</span><br><span class="line">     &#125; <span class="keyword">else</span> &#123; <span class="comment">// 当前线程不为第一个读线程</span></span><br><span class="line">         <span class="comment">// 获取缓存的计数器</span></span><br><span class="line">         HoldCounter rh = cachedHoldCounter;</span><br><span class="line">         <span class="keyword">if</span> (rh == <span class="keyword">null</span> || rh.tid != getThreadId(current)) <span class="comment">// 计数器为空或者计数器的tid不为当前正在运行的线程的tid</span></span><br><span class="line">             <span class="comment">// 获取当前线程对应的计数器</span></span><br><span class="line">             rh = readHolds.get();</span><br><span class="line">         <span class="comment">// 获取计数</span></span><br><span class="line">         <span class="keyword">int</span> count = rh.count;</span><br><span class="line">         <span class="keyword">if</span> (count &lt;= <span class="number">1</span>) &#123; <span class="comment">// 计数小于等于1</span></span><br><span class="line">             <span class="comment">// 移除</span></span><br><span class="line">             readHolds.remove();</span><br><span class="line">             <span class="keyword">if</span> (count &lt;= <span class="number">0</span>) <span class="comment">// 计数小于等于0，抛出异常</span></span><br><span class="line">                 <span class="keyword">throw</span> unmatchedUnlockException();</span><br><span class="line">         &#125;</span><br><span class="line">         <span class="comment">// 减少计数</span></span><br><span class="line">         --rh.count;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">for</span> (;;) &#123; <span class="comment">// 死循环</span></span><br><span class="line">         <span class="comment">// 获取状态</span></span><br><span class="line">         <span class="keyword">int</span> c = getState();</span><br><span class="line">         <span class="comment">// 获取状态</span></span><br><span class="line">         <span class="keyword">int</span> nextc = c - SHARED_UNIT;</span><br><span class="line">         <span class="keyword">if</span> (compareAndSetState(c, nextc)) <span class="comment">// 比较并进行设置</span></span><br><span class="line">             <span class="comment">// Releasing the read lock has no effect on readers,</span></span><br><span class="line">             <span class="comment">// but it may allow waiting writers to proceed if</span></span><br><span class="line">             <span class="comment">// both read and write locks are now free.</span></span><br><span class="line">             <span class="keyword">return</span> nextc == <span class="number">0</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="comment">/**真正释放锁</span></span><br><span class="line"><span class="comment">  * Release action for shared mode -- signals successor and ensures</span></span><br><span class="line"><span class="comment">  * propagation. (Note: For exclusive mode, release just amounts</span></span><br><span class="line"><span class="comment">  * to calling unparkSuccessor of head if it needs signal.)</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doReleaseShared</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * Ensure that a release propagates, even if there are other</span></span><br><span class="line"><span class="comment">         * in-progress acquires/releases.  This proceeds in the usual</span></span><br><span class="line"><span class="comment">         * way of trying to unparkSuccessor of head if it needs</span></span><br><span class="line"><span class="comment">         * signal. But if it does not, status is set to PROPAGATE to</span></span><br><span class="line"><span class="comment">         * ensure that upon release, propagation continues.</span></span><br><span class="line"><span class="comment">         * Additionally, we must loop in case a new node is added</span></span><br><span class="line"><span class="comment">         * while we are doing this. Also, unlike other uses of</span></span><br><span class="line"><span class="comment">         * unparkSuccessor, we need to know if CAS to reset status</span></span><br><span class="line"><span class="comment">         * fails, if so rechecking.</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            Node h = head;</span><br><span class="line">            <span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h != tail) &#123;</span><br><span class="line">                <span class="keyword">int</span> ws = h.waitStatus;</span><br><span class="line">                <span class="keyword">if</span> (ws == Node.SIGNAL) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (!compareAndSetWaitStatus(h, Node.SIGNAL, <span class="number">0</span>))</span><br><span class="line">                        <span class="keyword">continue</span>;            <span class="comment">// loop to recheck cases</span></span><br><span class="line">                    unparkSuccessor(h);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span> (ws == <span class="number">0</span> &amp;&amp;</span><br><span class="line">                         !compareAndSetWaitStatus(h, <span class="number">0</span>, Node.PROPAGATE))</span><br><span class="line">                    <span class="keyword">continue</span>;                <span class="comment">// loop on failed CAS</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (h == head)                   <span class="comment">// loop if head changed</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>通过分析可以看出：</p>
<p>在线程持有读锁的情况下，该线程不能取得写锁(因为获取写锁的时候，如果发现当前的读锁被占用，就马上获取失败，不管读锁是不是被当前线程持有)。</p>
<p>在线程持有写锁的况下，该线程可以继续获取读锁（获取读锁时如果发现写锁被占用，只有写锁没有被当前线程占用的情况才会获取失败）。</p>
<h2 id="LongAdder"><a href="#LongAdder" class="headerlink" title="LongAdder"></a>LongAdder</h2><p>在高并发的情况下，我们对一个 Integer 类型的整数直接进行 i++ 的时候，无法保证操作的原子性，会出现线程安全的问题。为此我们会用 juc 下的 AtomicInteger ，它是一个提供原子操作的 Interger 类，内部也是通过 CAS 实现线程安全的。但当大量线程同时去访问时，就会因为大量线程执行 CAS 操作失败而进行空旋转，导致 CPU 资源消耗过多，而且执行效率也不高。 Doug Lea 大神应该也不满意，于是在 JDK1.8 中对 CAS 进行了优化，提供了 LongAdder ，它是基于了 CAS 分段锁的思想实现的。</p>
<p>线程去读写一个 LongAdder 类型的变量时，流程如下：</p>
<p><img src="/2020/02/12/不可不说的Java锁事/image-20200213204318608.png" alt="image-20200213204318608"></p>
<p> LongAdder 也是基于 Unsafe 提供的 CAS 操作 +valitale 去实现的。在 LongAdder 的父类 Striped64 中维护着一个 base 变量和一个 cell 数组，当多个线程操作一个变量的时候，先会在这个 base 变量上进行 cas 操作，当它发现线程增多的时候，就会使用 cell 数组。比如当 base 将要更新的时候发现线程增多（也就是调用 casBase 方法更新 base 值失败），那么它会自动使用 cell 数组，每一个线程对应于一个 cell ，在每一个线程中对该 cell 进行 cas 操作，这样就可以将单一 value 的更新压力分担到多个 value 中去，降低单个 value 的 “热度”，同时也减少了大量线程的空转，提高并发效率，分散并发压力。这种分段锁需要额外维护一个内存空间 cells ，不过在高并发场景下，这点成本几乎可以忽略。分段锁是一种优秀的优化思想， juc 中提供的的 ConcurrentHashMap 也是基于分段锁保证读写操作的线程安全。</p>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>本文Java中常用的锁以及常见的锁的概念进行了基本介绍，并从源码以及实际应用的角度进行了对比分析。限于篇幅以及个人水平，没有在本篇文章中对所有内容进行深层次的讲解。</p>
<p>其实Java本身已经对锁本身进行了良好的封装，降低了研发同学在平时工作中的使用难度。但是研发同学也需要熟悉锁的底层原理，不同场景下选择最适合的锁。而且源码中的思路都是非常好的思路，也是值得大家去学习和借鉴的。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ol>
<li>《Java并发编程艺术》</li>
<li><a href="https://blog.csdn.net/u013256816/article/details/51204385" target="_blank" rel="noopener">Java中的锁</a></li>
<li><a href="https://juejin.im/post/5a73cbbff265da4e807783f5" target="_blank" rel="noopener">Java CAS 原理剖析</a></li>
<li><a href="https://juejin.im/post/5b42c2546fb9a04f8751eabc" target="_blank" rel="noopener">Java并发——关键字synchronized解析</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/29866981" target="_blank" rel="noopener">Java synchronized原理总结</a></li>
<li><a href="http://www.infoq.com/cn/articles/java-se-16-synchronized" target="_blank" rel="noopener">聊聊并发（二）——Java SE1.6中的Synchronized</a></li>
<li><a href="https://blog.csdn.net/qq_19431333/article/details/70568478" target="_blank" rel="noopener">深入理解读写锁—ReadWriteLock源码分析</a></li>
<li><a href="https://www.cnblogs.com/twoheads/p/9635309.html" target="_blank" rel="noopener">【JUC】JDK1.8源码分析之ReentrantReadWriteLock</a></li>
<li><a href="https://my.oschina.net/adan1/blog/158107" target="_blank" rel="noopener">Java多线程（十）之ReentrantReadWriteLock深入分析</a></li>
<li><a href="https://mrdear.cn/2018/06/23/java/java--readwritelock" target="_blank" rel="noopener">Java–读写锁的实现原理</a></li>
</ol>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>从ReentrantLock的实现看AQS的原理及应用</title>
    <url>/2020/02/12/%E4%BB%8EReentrantLock%E7%9A%84%E5%AE%9E%E7%8E%B0%E7%9C%8BAQS%E7%9A%84%E5%8E%9F%E7%90%86%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java中的大部分同步类（Lock、Semaphore、ReentrantLock等）都是基于AbstractQueuedSynchronizer（简称为AQS）实现的。AQS是一种提供了原子式管理同步状态、阻塞和唤醒线程功能以及队列模型的简单框架。本文会从应用层逐渐深入到原理层，并通过ReentrantLock的基本特性和ReentrantLock与AQS的关联，来深入解读AQS相关独占锁的知识点，同时采取问答的模式来帮助大家理解AQS。由于篇幅原因，本篇文章主要阐述AQS中独占锁的逻辑和Sync Queue，不讲述包含共享锁和Condition Queue的部分（本篇文章核心为AQS原理剖析，只是简单介绍了ReentrantLock，感兴趣同学可以阅读一下ReentrantLock的源码）。</p>
<p>下面列出本篇文章的大纲和思路，以便于大家更好地理解：</p>
<p><img src="/2020/02/12/从ReentrantLock的实现看AQS的原理及应用/9d182d944e0889c304ef529ba50a4fcd205214.png" alt="img"></p>
<h2 id="1-ReentrantLock"><a href="#1-ReentrantLock" class="headerlink" title="1 ReentrantLock"></a>1 ReentrantLock</h2><h3 id="1-1-ReentrantLock特性概览"><a href="#1-1-ReentrantLock特性概览" class="headerlink" title="1.1 ReentrantLock特性概览"></a>1.1 ReentrantLock特性概览</h3><p>ReentrantLock意思为可重入锁，指的是一个线程能够对一个临界资源重复加锁。为了帮助大家更好地理解ReentrantLock的特性，我们先将ReentrantLock跟常用的Synchronized进行比较，其特性如下（蓝色部分为本篇文章主要剖析的点）：</p>
<p><img src="/2020/02/12/从ReentrantLock的实现看AQS的原理及应用/412d294ff5535bbcddc0d979b2a339e6102264.png" alt="img"></p>
<p>下面通过伪代码，进行更加直观的比较：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// **************************Synchronized的使用方式**************************</span></span><br><span class="line"><span class="comment">// 1.用于代码块</span></span><br><span class="line"><span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;&#125;</span><br><span class="line"><span class="comment">// 2.用于对象</span></span><br><span class="line"><span class="keyword">synchronized</span> (object) &#123;&#125;</span><br><span class="line"><span class="comment">// 3.用于方法</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 4.可重入</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">	<span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// **************************ReentrantLock的使用方式**************************</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">()</span> throw Exception </span>&#123;</span><br><span class="line">	<span class="comment">// 1.初始化选择公平锁、非公平锁</span></span><br><span class="line">	ReentrantLock lock = <span class="keyword">new</span> ReentrantLock(<span class="keyword">true</span>);</span><br><span class="line">	<span class="comment">// 2.可用于代码块</span></span><br><span class="line">	lock.lock();</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			<span class="comment">// 3.支持多种加锁方式，比较灵活; 具有可重入特性</span></span><br><span class="line">			<span class="keyword">if</span>(lock.tryLock(<span class="number">100</span>, TimeUnit.MILLISECONDS))&#123; &#125;</span><br><span class="line">		&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">			<span class="comment">// 4.手动释放锁</span></span><br><span class="line">			lock.unlock()</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">		lock.unlock();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="1-2-ReentrantLock与AQS的关联"><a href="#1-2-ReentrantLock与AQS的关联" class="headerlink" title="1.2 ReentrantLock与AQS的关联"></a>1.2 ReentrantLock与AQS的关联</h3><p>通过上文我们已经了解，ReentrantLock支持公平锁和非公平锁（关于公平锁和非公平锁的原理分析，可参考《<a href="https://tech.meituan.com/2018/11/15/java-lock.html" target="_blank" rel="noopener">不可不说的Java“锁”事</a>》），并且ReentrantLock的底层就是由AQS来实现的。那么ReentrantLock是如何通过公平锁和非公平锁与AQS关联起来呢？ 我们着重从这两者的加锁过程来理解一下它们与AQS之间的关系（加锁过程中与AQS的关联比较明显，解锁流程后续会介绍）。</p>
<p>非公平锁源码中的加锁流程如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.ReentrantLock#NonfairSync</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 非公平锁</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">			setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			acquire(<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这块代码的含义为：</p>
<ul>
<li>若通过CAS设置变量State（同步状态）成功，也就是获取锁成功，则将当前线程设置为独占线程。</li>
<li>若通过CAS设置变量State（同步状态）失败，也就是获取锁失败，则进入Acquire方法进行后续处理。</li>
</ul>
<p>第一步很好理解，但第二步获取锁失败后，后续的处理策略是怎么样的呢？这块可能会有以下思考：</p>
<ul>
<li>某个线程获取锁失败的后续流程是什么呢？有以下两种可能：</li>
</ul>
<p>(1) 将当前线程获锁结果设置为失败，获取锁流程结束。这种设计会极大降低系统的并发度，并不满足我们实际的需求。所以就需要下面这种流程，也就是AQS框架的处理流程。</p>
<p>(2) 存在某种排队等候机制，线程继续等待，仍然保留获取锁的可能，获取锁流程仍在继续。</p>
<ul>
<li>对于问题1的第二种情况，既然说到了排队等候机制，那么就一定会有某种队列形成，这样的队列是什么数据结构呢？</li>
<li>处于排队等候机制中的线程，什么时候可以有机会获取锁呢？</li>
<li>如果处于排队等候机制中的线程一直无法获取锁，还是需要一直等待吗，还是有别的策略来解决这一问题？</li>
</ul>
<p>带着非公平锁的这些问题，再看下公平锁源码中获锁的方式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.ReentrantLock#FairSync</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">  ...  </span><br><span class="line">	<span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		acquire(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到这块代码，我们可能会存在这种疑问：Lock函数通过Acquire方法进行加锁，但是具体是如何加锁的呢？</p>
<p>结合公平锁和非公平锁的加锁流程，虽然流程上有一定的不同，但是都调用了Acquire方法，而Acquire方法是FairSync和UnfairSync的父类AQS中的核心方法。</p>
<p>对于上边提到的问题，其实在ReentrantLock类源码中都无法解答，而这些问题的答案，都是位于Acquire方法所在的类AbstractQueuedSynchronizer中，也就是本文的核心——AQS。下面我们会对AQS以及ReentrantLock和AQS的关联做详细介绍（相关问题答案会在2.3.5小节中解答）。</p>
<h2 id="2-AQS"><a href="#2-AQS" class="headerlink" title="2 AQS"></a>2 AQS</h2><p>首先，我们通过下面的架构图来整体了解一下AQS框架：</p>
<p><img src="/2020/02/12/从ReentrantLock的实现看AQS的原理及应用/82077ccf14127a87b77cefd1ccf562d3253591.png" alt="img"></p>
<ul>
<li>上图中有颜色的为Method，无颜色的为Attribution。</li>
<li>总的来说，AQS框架共分为五层，自上而下由浅入深，从AQS对外暴露的API到底层基础数据。</li>
<li>当有自定义同步器接入时，只需重写第一层所需要的部分方法即可，不需要关注底层具体的实现流程。当自定义同步器进行加锁或者解锁操作时，先经过第一层的API进入AQS内部方法，然后经过第二层进行锁的获取，接着对于获取锁失败的流程，进入第三层和第四层的等待队列处理，而这些处理方式均依赖于第五层的基础数据提供层。</li>
</ul>
<p>下面我们会从整体到细节，从流程到方法逐一剖析AQS框架，主要分析过程如下：</p>
<p><img src="/2020/02/12/从ReentrantLock的实现看AQS的原理及应用/d2f7f7fffdc30d85d17b44266c3ab05323338.png" alt="img"></p>
<h3 id="2-1-原理概览"><a href="#2-1-原理概览" class="headerlink" title="2.1 原理概览"></a>2.1 原理概览</h3><p>AQS核心思想是，如果被请求的共享资源空闲，那么就将当前请求资源的线程设置为有效的工作线程，将共享资源设置为锁定状态；如果共享资源被占用，就需要一定的阻塞等待唤醒机制来保证锁分配。这个机制主要用的是CLH队列的变体实现的，将暂时获取不到锁的线程加入到队列中。</p>
<p><strong>CLH</strong>：Craig、Landin and Hagersten队列，是单向链表，AQS中的队列是CLH变体的虚拟双向队列（FIFO），AQS是通过将每条请求共享资源的线程封装成一个节点来实现锁的分配。</p>
<p>主要原理图如下：</p>
<p><img src="/2020/02/12/从ReentrantLock的实现看AQS的原理及应用/7132e4cef44c26f62835b197b239147b18062.png" alt="img"></p>
<p>AQS使用一个Volatile的int类型的成员变量来表示同步状态，通过内置的FIFO队列来完成资源获取的排队工作，通过CAS完成对State值的修改。</p>
<h4 id="2-1-1-AQS数据结构"><a href="#2-1-1-AQS数据结构" class="headerlink" title="2.1.1 AQS数据结构"></a>2.1.1 AQS数据结构</h4><p>先来看下AQS中最基本的数据结构——Node，Node即为上面CLH变体队列中的节点。</p>
<p><img src="/2020/02/12/从ReentrantLock的实现看AQS的原理及应用/960271cf2b5c8a185eed23e98b72c75538637.png" alt="img"></p>
<p>解释一下几个方法和属性值的含义：</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法和属性值</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">waitStatus</td>
<td style="text-align:left">当前节点在队列中的状态</td>
</tr>
<tr>
<td style="text-align:left">thread</td>
<td style="text-align:left">表示处于该节点的线程</td>
</tr>
<tr>
<td style="text-align:left">prev</td>
<td style="text-align:left">前驱指针</td>
</tr>
<tr>
<td style="text-align:left">predecessor</td>
<td style="text-align:left">返回前驱节点，没有的话抛出npe</td>
</tr>
<tr>
<td style="text-align:left">nextWaiter</td>
<td style="text-align:left">指向下一个处于CONDITION状态的节点（由于本篇文章不讲述Condition Queue队列，这个指针不多介绍）</td>
</tr>
<tr>
<td style="text-align:left">next</td>
<td style="text-align:left">后继指针</td>
</tr>
</tbody>
</table>
<p>线程两种锁的模式：</p>
<table>
<thead>
<tr>
<th style="text-align:left">模式</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">SHARED</td>
<td style="text-align:left">表示线程以共享的模式等待锁</td>
</tr>
<tr>
<td style="text-align:left">EXCLUSIVE</td>
<td style="text-align:left">表示线程正在以独占的方式等待锁</td>
</tr>
</tbody>
</table>
<p>waitStatus有下面几个枚举值：</p>
<table>
<thead>
<tr>
<th style="text-align:left">枚举</th>
<th style="text-align:left">含义</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:left">当一个Node被初始化的时候的默认值</td>
</tr>
<tr>
<td style="text-align:left">CANCELLED</td>
<td style="text-align:left">为1，表示线程获取锁的请求已经取消了</td>
</tr>
<tr>
<td style="text-align:left">CONDITION</td>
<td style="text-align:left">为-2，表示节点在等待队列中，节点线程等待唤醒</td>
</tr>
<tr>
<td style="text-align:left">PROPAGATE</td>
<td style="text-align:left">为-3，当前线程处在SHARED情况下，该字段才会使用</td>
</tr>
<tr>
<td style="text-align:left">SIGNAL</td>
<td style="text-align:left">为-1，表示线程已经准备好了，就等资源释放了</td>
</tr>
</tbody>
</table>
<h4 id="2-1-2-同步状态State"><a href="#2-1-2-同步状态State" class="headerlink" title="2.1.2 同步状态State"></a>2.1.2 同步状态State</h4><p>在了解数据结构后，接下来了解一下AQS的同步状态——State。AQS中维护了一个名为state的字段，意为同步状态，是由Volatile修饰的，用于展示当前临界资源的获锁情况。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</span><br></pre></td></tr></table></figure>
<p>下面提供了几个访问这个字段的方法：</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法名</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">protected final int getState()</td>
<td style="text-align:left">获取State的值</td>
</tr>
<tr>
<td style="text-align:left">protected final void setState(int newState)</td>
<td style="text-align:left">设置State的值</td>
</tr>
<tr>
<td style="text-align:left">protected final boolean compareAndSetState(int expect, int update)</td>
<td style="text-align:left">使用CAS方式更新State</td>
</tr>
</tbody>
</table>
<p>这几个方法都是Final修饰的，说明子类中无法重写它们。我们可以通过修改State字段表示的同步状态来实现多线程的独占模式和共享模式（加锁过程）。</p>
<p><img src="/2020/02/12/从ReentrantLock的实现看AQS的原理及应用/27605d483e8935da683a93be015713f331378.png" alt="img"><img src="/2020/02/12/从ReentrantLock的实现看AQS的原理及应用/3f1e1a44f5b7d77000ba4f9476189b2e32806.png" alt="img"></p>
<p>对于我们自定义的同步工具，需要自定义获取同步状态和释放状态的方式，也就是AQS架构图中的第一层：API层。</p>
<h2 id="2-2-AQS重要方法与ReentrantLock的关联"><a href="#2-2-AQS重要方法与ReentrantLock的关联" class="headerlink" title="2.2 AQS重要方法与ReentrantLock的关联"></a>2.2 AQS重要方法与ReentrantLock的关联</h2><p>从架构图中可以得知，AQS提供了大量用于自定义同步器实现的Protected方法。自定义同步器实现的相关方法也只是为了通过修改State字段来实现多线程的独占模式或者共享模式。自定义同步器需要实现以下方法（ReentrantLock需要实现的方法如下，并不是全部）：</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法名</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">protected boolean isHeldExclusively()</td>
<td style="text-align:left">该线程是否正在独占资源。只有用到Condition才需要去实现它。</td>
</tr>
<tr>
<td style="text-align:left">protected boolean tryAcquire(int arg)</td>
<td style="text-align:left">独占方式。arg为获取锁的次数，尝试获取资源，成功则返回True，失败则返回False。</td>
</tr>
<tr>
<td style="text-align:left">protected boolean tryRelease(int arg)</td>
<td style="text-align:left">独占方式。arg为释放锁的次数，尝试释放资源，成功则返回True，失败则返回False。</td>
</tr>
<tr>
<td style="text-align:left">protected int tryAcquireShared(int arg)</td>
<td style="text-align:left">共享方式。arg为获取锁的次数，尝试获取资源。负数表示失败；0表示成功，但没有剩余可用资源；正数表示成功，且有剩余资源。</td>
</tr>
<tr>
<td style="text-align:left">protected boolean tryReleaseShared(int arg)</td>
<td style="text-align:left">共享方式。arg为释放锁的次数，尝试释放资源，如果释放后允许唤醒后续等待结点返回True，否则返回False。</td>
</tr>
</tbody>
</table>
<p>一般来说，自定义同步器要么是独占方式，要么是共享方式，它们也只需实现tryAcquire-tryRelease、tryAcquireShared-tryReleaseShared中的一种即可。AQS也支持自定义同步器同时实现独占和共享两种方式，如ReentrantReadWriteLock。ReentrantLock是独占锁，所以实现了tryAcquire-tryRelease。</p>
<p>以非公平锁为例，这里主要阐述一下非公平锁与AQS之间方法的关联之处，具体每一处核心方法的作用会在文章后面详细进行阐述。</p>
<p><img src="/2020/02/12/从ReentrantLock的实现看AQS的原理及应用/b8b53a70984668bc68653efe9531573e78636.png" alt="img"></p>
<p>为了帮助大家理解ReentrantLock和AQS之间方法的交互过程，以非公平锁为例，我们将加锁和解锁的交互流程单独拎出来强调一下，以便于对后续内容的理解。</p>
<p><img src="/2020/02/12/从ReentrantLock的实现看AQS的原理及应用/7aadb272069d871bdee8bf3a218eed8136919.png" alt="img"></p>
<p><strong>加锁：</strong></p>
<ul>
<li>通过ReentrantLock的加锁方法Lock进行加锁操作。</li>
<li>会调用到内部类Sync的Lock方法，由于Sync#lock是抽象方法，根据ReentrantLock初始化选择的公平锁和非公平锁，执行相关内部类的Lock方法，本质上都会执行AQS的Acquire方法。</li>
<li>AQS的Acquire方法会执行tryAcquire方法，但是由于tryAcquire需要自定义同步器实现，因此执行了ReentrantLock中的tryAcquire方法，由于ReentrantLock是通过公平锁和非公平锁内部类实现的tryAcquire方法，因此会根据锁类型不同，执行不同的tryAcquire。</li>
<li>tryAcquire是获取锁逻辑，获取失败后，会执行框架AQS的后续逻辑，跟ReentrantLock自定义同步器无关。</li>
</ul>
<p><strong>解锁：</strong></p>
<ul>
<li>通过ReentrantLock的解锁方法Unlock进行解锁。</li>
<li>Unlock会调用内部类Sync的Release方法，该方法继承于AQS。</li>
<li>Release中会调用tryRelease方法，tryRelease需要自定义同步器实现，tryRelease只在ReentrantLock中的Sync实现，因此可以看出，释放锁的过程，并不区分是否为公平锁。</li>
<li>释放成功后，所有处理由AQS框架完成，与自定义同步器无关。</li>
</ul>
<p>通过上面的描述，大概可以总结出ReentrantLock加锁解锁时API层核心方法的映射关系。</p>
<p><img src="/2020/02/12/从ReentrantLock的实现看AQS的原理及应用/f30c631c8ebbf820d3e8fcb6eee3c0ef18748.png" alt="img"></p>
<h2 id="2-3-通过ReentrantLock理解AQS"><a href="#2-3-通过ReentrantLock理解AQS" class="headerlink" title="2.3 通过ReentrantLock理解AQS"></a>2.3 通过ReentrantLock理解AQS</h2><p>ReentrantLock中公平锁和非公平锁在底层是相同的，这里以非公平锁为例进行分析。</p>
<p>在非公平锁中，有一段这样的代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.ReentrantLock</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">	...</span><br><span class="line">	<span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">			setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			acquire(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看一下这个Acquire是怎么写的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">		selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再看一下tryAcquire方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看出，这里只是AQS的简单实现，具体获取锁的实现方法是由各自的公平锁和非公平锁单独实现的（以ReentrantLock为例）。如果该方法返回了True，则说明当前线程获取锁成功，就不用往后执行了；如果获取失败，就需要加入到等待队列中。下面会详细解释线程是何时以及怎样被加入进等待队列中的。</p>
<h3 id="2-3-1-线程加入等待队列"><a href="#2-3-1-线程加入等待队列" class="headerlink" title="2.3.1 线程加入等待队列"></a>2.3.1 线程加入等待队列</h3><h4 id="2-3-1-1-加入队列的时机"><a href="#2-3-1-1-加入队列的时机" class="headerlink" title="2.3.1.1 加入队列的时机"></a>2.3.1.1 加入队列的时机</h4><p>当执行Acquire(1)时，会通过tryAcquire获取锁。在这种情况下，如果获取锁失败，就会调用addWaiter加入到等待队列中去。</p>
<h4 id="2-3-1-2-如何加入队列"><a href="#2-3-1-2-如何加入队列" class="headerlink" title="2.3.1.2 如何加入队列"></a>2.3.1.2 如何加入队列</h4><p>获取锁失败后，会执行addWaiter(Node.EXCLUSIVE)加入等待队列，具体实现方法如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">	Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line">	<span class="comment">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line">	Node pred = tail;</span><br><span class="line">	<span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">		node.prev = pred;</span><br><span class="line">		<span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">			pred.next = node;</span><br><span class="line">			<span class="keyword">return</span> node;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	enq(node);</span><br><span class="line">	<span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">compareAndSetTail</span><span class="params">(Node expect, Node update)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> unsafe.compareAndSwapObject(<span class="keyword">this</span>, tailOffset, expect, update);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>主要的流程如下：</p>
<ul>
<li>通过当前的线程和锁模式新建一个节点。</li>
<li>Pred指针指向尾节点Tail。</li>
<li>将New中Node的Prev指针指向Pred。</li>
<li>通过compareAndSetTail方法，完成尾节点的设置。这个方法主要是对tailOffset和Expect进行比较，如果tailOffset的Node和Expect的Node地址是相同的，那么设置Tail的值为Update的值。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		stateOffset = unsafe.objectFieldOffset(AbstractQueuedSynchronizer.class.getDeclaredField(<span class="string">"state"</span>));</span><br><span class="line">		headOffset = unsafe.objectFieldOffset(AbstractQueuedSynchronizer.class.getDeclaredField(<span class="string">"head"</span>));</span><br><span class="line">		tailOffset = unsafe.objectFieldOffset(AbstractQueuedSynchronizer.class.getDeclaredField(<span class="string">"tail"</span>));</span><br><span class="line">		waitStatusOffset = unsafe.objectFieldOffset(Node.class.getDeclaredField(<span class="string">"waitStatus"</span>));</span><br><span class="line">		nextOffset = unsafe.objectFieldOffset(Node.class.getDeclaredField(<span class="string">"next"</span>));</span><br><span class="line">	&#125; <span class="keyword">catch</span> (Exception ex) &#123; </span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> Error(ex); </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从AQS的静态代码块可以看出，都是获取一个对象的属性相对于该对象在内存当中的偏移量，这样我们就可以根据这个偏移量在对象内存当中找到这个属性。tailOffset指的是tail对应的偏移量，所以这个时候会将new出来的Node置为当前队列的尾节点。同时，由于是双向链表，也需要将前一个节点指向尾节点。</p>
<ul>
<li>如果Pred指针是Null（说明等待队列中没有元素），或者当前Pred指针和Tail指向的位置不同（说明被别的线程已经修改），就需要看一下Enq的方法。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">enq</span><span class="params">(<span class="keyword">final</span> Node node)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (;;) &#123;</span><br><span class="line">		Node t = tail;</span><br><span class="line">		<span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// Must initialize</span></span><br><span class="line">			<span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</span><br><span class="line">				tail = head;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			node.prev = t;</span><br><span class="line">			<span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">				t.next = node;</span><br><span class="line">				<span class="keyword">return</span> t;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果没有被初始化，需要进行初始化一个头结点出来。但请注意，初始化的头结点并不是当前线程节点，而是调用了无参构造函数的节点。如果经历了初始化或者并发导致队列中有元素，则与之前的方法相同。其实，addWaiter就是一个在双端链表添加尾节点的操作，需要注意的是，双端链表的头结点是一个无参构造函数的头结点。</p>
<p>总结一下，线程获取锁的时候，过程大体如下：</p>
<ol>
<li>当没有线程获取到锁时，线程1获取锁成功。</li>
<li>线程2申请锁，但是锁被线程1占有。</li>
</ol>
<p><img src="/2020/02/12/从ReentrantLock的实现看AQS的原理及应用/e9e385c3c68f62c67c8d62ab0adb613921117.png" alt="img"></p>
<ol>
<li>如果再有线程要获取锁，依次在队列中往后排队即可。</li>
</ol>
<p>回到上边的代码，hasQueuedPredecessors是公平锁加锁时判断等待队列中是否存在有效节点的方法。如果返回False，说明当前线程可以争取共享资源；如果返回True，说明队列中存在有效节点，当前线程必须加入到等待队列中。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.ReentrantLock</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">hasQueuedPredecessors</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// The correctness of this depends on head being initialized</span></span><br><span class="line">	<span class="comment">// before tail and on head.next being accurate if the current</span></span><br><span class="line">	<span class="comment">// thread is first in queue.</span></span><br><span class="line">	Node t = tail; <span class="comment">// Read fields in reverse initialization order</span></span><br><span class="line">	Node h = head;</span><br><span class="line">	Node s;</span><br><span class="line">	<span class="keyword">return</span> h != t &amp;&amp; ((s = h.next) == <span class="keyword">null</span> || s.thread != Thread.currentThread());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到这里，我们理解一下h != t &amp;&amp; ((s = h.next) == null || s.thread != Thread.currentThread());为什么要判断的头结点的下一个节点？第一个节点储存的数据是什么？</p>
<blockquote>
<p>双向链表中，第一个节点为虚节点，其实并不存储任何信息，只是占位。真正的第一个有数据的节点，是在第二个节点开始的。当h != t时： 如果(s = h.next) == null，等待队列正在有线程进行初始化，但只是进行到了Tail指向Head，没有将Head指向Tail，此时队列中有元素，需要返回True（这块具体见下边代码分析）。 如果(s = h.next) != null，说明此时队列中至少有一个有效节点。如果此时s.thread == Thread.currentThread()，说明等待队列的第一个有效节点中的线程与当前线程相同，那么当前线程是可以获取资源的；如果s.thread != Thread.currentThread()，说明等待队列的第一个有效节点线程与当前线程不同，当前线程必须加入进等待队列。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer#enq</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (t == <span class="keyword">null</span>) &#123; <span class="comment">// Must initialize</span></span><br><span class="line">	<span class="keyword">if</span> (compareAndSetHead(<span class="keyword">new</span> Node()))</span><br><span class="line">		tail = head;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	node.prev = t;</span><br><span class="line">	<span class="keyword">if</span> (compareAndSetTail(t, node)) &#123;</span><br><span class="line">		t.next = node;</span><br><span class="line">		<span class="keyword">return</span> t;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>节点入队不是原子操作，所以会出现短暂的head != tail，此时Tail指向最后一个节点，而且Tail指向Head。如果Head没有指向Tail（可见5、6、7行），这种情况下也需要将相关线程加入队列中。所以这块代码是为了解决极端情况下的并发问题。</p>
<h4 id="2-3-1-3-等待队列中线程出队列时机"><a href="#2-3-1-3-等待队列中线程出队列时机" class="headerlink" title="2.3.1.3 等待队列中线程出队列时机"></a>2.3.1.3 等待队列中线程出队列时机</h4><p>回到最初的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">acquire</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (!tryAcquire(arg) &amp;&amp; acquireQueued(addWaiter(Node.EXCLUSIVE), arg))</span><br><span class="line">		selfInterrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上文解释了addWaiter方法，这个方法其实就是把对应的线程以Node的数据结构形式加入到双端队列里，返回的是一个包含该线程的Node。而这个Node会作为参数，进入到acquireQueued方法中。acquireQueued方法可以对排队中的线程进行“获锁”操作。</p>
<p>总的来说，一个线程获取锁失败了，被放入等待队列，acquireQueued会把放入队列中的线程不断去获取锁，直到获取成功或者不再需要获取（中断）。</p>
<p>下面我们从“何时出队列？”和“如何出队列？”两个方向来分析一下acquireQueued源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 标记是否成功拿到资源</span></span><br><span class="line">	<span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="comment">// 标记等待过程中是否中断过</span></span><br><span class="line">		<span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">		<span class="comment">// 开始自旋，要么获取锁，要么中断</span></span><br><span class="line">		<span class="keyword">for</span> (;;) &#123;</span><br><span class="line">			<span class="comment">// 获取当前节点的前驱节点</span></span><br><span class="line">			<span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">			<span class="comment">// 如果p是头结点，说明当前节点在真实数据队列的首部，就尝试获取锁（别忘了头结点是虚节点）</span></span><br><span class="line">			<span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">				<span class="comment">// 获取锁成功，头指针移动到当前node</span></span><br><span class="line">				setHead(node);</span><br><span class="line">				p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">				failed = <span class="keyword">false</span>;</span><br><span class="line">				<span class="keyword">return</span> interrupted;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="comment">// 说明p为头节点且当前没有获取到锁（可能是非公平锁被抢占了）或者是p不为头结点，这个时候就要判断当前node是否要被阻塞（被阻塞条件：前驱节点的waitStatus为-1），防止无限循环浪费资源。具体两个方法下面细细分析</span></span><br><span class="line">			<span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt())</span><br><span class="line">				interrupted = <span class="keyword">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (failed)</span><br><span class="line">			cancelAcquire(node);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注：setHead方法是把当前节点置为虚节点，但并没有修改waitStatus，因为它是一直需要用的数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setHead</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">	head = node;</span><br><span class="line">	node.thread = <span class="keyword">null</span>;</span><br><span class="line">	node.prev = <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 靠前驱节点判断当前线程是否应该被阻塞</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">shouldParkAfterFailedAcquire</span><span class="params">(Node pred, Node node)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 获取头结点的节点状态</span></span><br><span class="line">	<span class="keyword">int</span> ws = pred.waitStatus;</span><br><span class="line">	<span class="comment">// 说明头结点处于唤醒状态</span></span><br><span class="line">	<span class="keyword">if</span> (ws == Node.SIGNAL)</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>; </span><br><span class="line">	<span class="comment">// 通过枚举值我们知道waitStatus&gt;0是取消状态</span></span><br><span class="line">	<span class="keyword">if</span> (ws &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		<span class="keyword">do</span> &#123;</span><br><span class="line">			<span class="comment">// 循环向前查找取消节点，把取消节点从队列中剔除</span></span><br><span class="line">			node.prev = pred = pred.prev;</span><br><span class="line">		&#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</span><br><span class="line">		pred.next = node;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="comment">// 设置前任节点等待状态为SIGNAL</span></span><br><span class="line">		compareAndSetWaitStatus(pred, ws, Node.SIGNAL);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>parkAndCheckInterrupt主要用于挂起当前线程，阻塞调用栈，返回当前线程的中断状态。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">parkAndCheckInterrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LockSupport.park(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">return</span> Thread.interrupted();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述方法的流程图如下：</p>
<p><img src="/2020/02/12/从ReentrantLock的实现看AQS的原理及应用/c124b76dcbefb9bdc778458064703d1135485.png" alt="img"></p>
<p>从上图可以看出，跳出当前循环的条件是当“前置节点是头结点，且当前线程获取锁成功”。为了防止因死循环导致CPU资源被浪费，我们会判断前置节点的状态来决定是否要将当前线程挂起，具体挂起流程用流程图表示如下（shouldParkAfterFailedAcquire流程）：</p>
<p><img src="/2020/02/12/从ReentrantLock的实现看AQS的原理及应用/9af16e2481ad85f38ca322a225ae737535740.png" alt="img"></p>
<p>从队列中释放节点的疑虑打消了，那么又有新问题了：</p>
<ul>
<li>shouldParkAfterFailedAcquire中取消节点是怎么生成的呢？什么时候会把一个节点的waitStatus设置为-1？</li>
<li>是在什么时间释放节点通知到被挂起的线程呢？</li>
</ul>
<h3 id="2-3-2-CANCELLED状态节点生成"><a href="#2-3-2-CANCELLED状态节点生成" class="headerlink" title="2.3.2 CANCELLED状态节点生成"></a>2.3.2 CANCELLED状态节点生成</h3><p>acquireQueued方法中的Finally代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">		<span class="keyword">for</span> (;;) &#123;</span><br><span class="line">			<span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">			<span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">				...</span><br><span class="line">				failed = <span class="keyword">false</span>;</span><br><span class="line">        ...</span><br><span class="line">			&#125;</span><br><span class="line">			...</span><br><span class="line">	&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (failed)</span><br><span class="line">			cancelAcquire(node);</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过cancelAcquire方法，将Node的状态标记为CANCELLED。接下来，我们逐行来分析这个方法的原理：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cancelAcquire</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 将无效节点过滤</span></span><br><span class="line">	<span class="keyword">if</span> (node == <span class="keyword">null</span>)</span><br><span class="line">		<span class="keyword">return</span>;</span><br><span class="line">  <span class="comment">// 设置该节点不关联任何线程，也就是虚节点</span></span><br><span class="line">	node.thread = <span class="keyword">null</span>;</span><br><span class="line">	Node pred = node.prev;</span><br><span class="line">  <span class="comment">// 通过前驱节点，跳过取消状态的node</span></span><br><span class="line">	<span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>)</span><br><span class="line">		node.prev = pred = pred.prev;</span><br><span class="line">  <span class="comment">// 获取过滤后的前驱节点的后继节点</span></span><br><span class="line">	Node predNext = pred.next;</span><br><span class="line">  <span class="comment">// 把当前node的状态设置为CANCELLED</span></span><br><span class="line">	node.waitStatus = Node.CANCELLED;</span><br><span class="line">  <span class="comment">// 如果当前节点是尾节点，将从后往前的第一个非取消状态的节点设置为尾节点</span></span><br><span class="line">  <span class="comment">// 更新失败的话，则进入else，如果更新成功，将tail的后继节点设置为null</span></span><br><span class="line">	<span class="keyword">if</span> (node == tail &amp;&amp; compareAndSetTail(node, pred)) &#123;</span><br><span class="line">		compareAndSetNext(pred, predNext, <span class="keyword">null</span>);</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">int</span> ws;</span><br><span class="line">    <span class="comment">// 如果当前节点不是head的后继节点，1:判断当前节点前驱节点的是否为SIGNAL，2:如果不是，则把前驱节点设置为SINGAL看是否成功</span></span><br><span class="line">    <span class="comment">// 如果1和2中有一个为true，再判断当前节点的线程是否为null</span></span><br><span class="line">    <span class="comment">// 如果上述条件都满足，把当前节点的前驱节点的后继指针指向当前节点的后继节点</span></span><br><span class="line">		<span class="keyword">if</span> (pred != head &amp;&amp; ((ws = pred.waitStatus) == Node.SIGNAL || (ws &lt;= <span class="number">0</span> &amp;&amp; compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &amp;&amp; pred.thread != <span class="keyword">null</span>) &#123;</span><br><span class="line">			Node next = node.next;</span><br><span class="line">			<span class="keyword">if</span> (next != <span class="keyword">null</span> &amp;&amp; next.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">				compareAndSetNext(pred, predNext, next);</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 如果当前节点是head的后继节点，或者上述条件不满足，那就唤醒当前节点的后继节点</span></span><br><span class="line">			unparkSuccessor(node);</span><br><span class="line">		&#125;</span><br><span class="line">		node.next = node; <span class="comment">// help GC</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>当前的流程：</p>
<ul>
<li>获取当前节点的前驱节点，如果前驱节点的状态是CANCELLED，那就一直往前遍历，找到第一个waitStatus &lt;= 0的节点，将找到的Pred节点和当前Node关联，将当前Node设置为CANCELLED。</li>
<li>根据当前节点的位置，考虑以下三种情况：</li>
</ul>
<p>(1) 当前节点是尾节点。</p>
<p>(2) 当前节点是Head的后继节点。</p>
<p>(3) 当前节点不是Head的后继节点，也不是尾节点。</p>
<p>根据上述第二条，我们来分析每一种情况的流程。</p>
<p>当前节点是尾节点。</p>
<p><img src="/2020/02/12/从ReentrantLock的实现看AQS的原理及应用/b845211ced57561c24f79d56194949e822049.png" alt="img"></p>
<p>当前节点是Head的后继节点。</p>
<p><img src="/2020/02/12/从ReentrantLock的实现看AQS的原理及应用/ab89bfec875846e5028a4f8fead32b7117975.png" alt="img"></p>
<p>当前节点不是Head的后继节点，也不是尾节点。</p>
<p><img src="/2020/02/12/从ReentrantLock的实现看AQS的原理及应用/45d0d9e4a6897eddadc4397cf53d6cd522452.png" alt="img"></p>
<p>通过上面的流程，我们对于CANCELLED节点状态的产生和变化已经有了大致的了解，但是为什么所有的变化都是对Next指针进行了操作，而没有对Prev指针进行操作呢？什么情况下会对Prev指针进行操作？</p>
<blockquote>
<p>执行cancelAcquire的时候，当前节点的前置节点可能已经从队列中出去了（已经执行过Try代码块中的shouldParkAfterFailedAcquire方法了），如果此时修改Prev指针，有可能会导致Prev指向另一个已经移除队列的Node，因此这块变化Prev指针不安全。 shouldParkAfterFailedAcquire方法中，会执行下面的代码，其实就是在处理Prev指针。shouldParkAfterFailedAcquire是获取锁失败的情况下才会执行，进入该方法后，说明共享资源已被获取，当前节点之前的节点都不会出现变化，因此这个时候变更Prev指针比较安全。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&gt; <span class="keyword">do</span> &#123;</span><br><span class="line">&gt; 	node.prev = pred = pred.prev;</span><br><span class="line">&gt; &#125; <span class="keyword">while</span> (pred.waitStatus &gt; <span class="number">0</span>);</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure>
</blockquote>
<h3 id="2-3-3-如何解锁"><a href="#2-3-3-如何解锁" class="headerlink" title="2.3.3 如何解锁"></a>2.3.3 如何解锁</h3><p>我们已经剖析了加锁过程中的基本流程，接下来再对解锁的基本流程进行分析。由于ReentrantLock在解锁的时候，并不区分公平锁和非公平锁，所以我们直接看解锁的源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.ReentrantLock</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	sync.release(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以看到，本质释放锁的地方，是通过框架来完成的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">		Node h = head;</span><br><span class="line">		<span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">			unparkSuccessor(h);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在ReentrantLock里面的公平锁和非公平锁的父类Sync定义了可重入锁的释放锁机制。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.ReentrantLock.Sync</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法返回当前锁是不是没有被线程持有</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span><span class="params">(<span class="keyword">int</span> releases)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 减少可重入次数</span></span><br><span class="line">	<span class="keyword">int</span> c = getState() - releases;</span><br><span class="line">	<span class="comment">// 当前线程不是持有锁的线程，抛出异常</span></span><br><span class="line">	<span class="keyword">if</span> (Thread.currentThread() != getExclusiveOwnerThread())</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> IllegalMonitorStateException();</span><br><span class="line">	<span class="keyword">boolean</span> free = <span class="keyword">false</span>;</span><br><span class="line">	<span class="comment">// 如果持有线程全部释放，将当前独占锁所有线程设置为null，并更新state</span></span><br><span class="line">	<span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">		free = <span class="keyword">true</span>;</span><br><span class="line">		setExclusiveOwnerThread(<span class="keyword">null</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	setState(c);</span><br><span class="line">	<span class="keyword">return</span> free;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们来解释下述源码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">release</span><span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 上边自定义的tryRelease如果返回true，说明该锁没有被任何线程持有</span></span><br><span class="line">	<span class="keyword">if</span> (tryRelease(arg)) &#123;</span><br><span class="line">		<span class="comment">// 获取头结点</span></span><br><span class="line">		Node h = head;</span><br><span class="line">		<span class="comment">// 头结点不为空并且头结点的waitStatus不是初始化节点情况，解除线程挂起状态</span></span><br><span class="line">		<span class="keyword">if</span> (h != <span class="keyword">null</span> &amp;&amp; h.waitStatus != <span class="number">0</span>)</span><br><span class="line">			unparkSuccessor(h);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里的判断条件为什么是h != null &amp;&amp; h.waitStatus != 0？</p>
<blockquote>
<p>h == null Head还没初始化。初始情况下，head == null，第一个节点入队，Head会被初始化一个虚拟节点。所以说，这里如果还没来得及入队，就会出现head == null 的情况。</p>
<p>h != null &amp;&amp; waitStatus == 0 表明后继节点对应的线程仍在运行中，不需要唤醒。</p>
<p>h != null &amp;&amp; waitStatus &lt; 0 表明后继节点可能被阻塞了，需要唤醒。</p>
</blockquote>
<p>再看一下unparkSuccessor方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">unparkSuccessor</span><span class="params">(Node node)</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 获取头结点waitStatus</span></span><br><span class="line">	<span class="keyword">int</span> ws = node.waitStatus;</span><br><span class="line">	<span class="keyword">if</span> (ws &lt; <span class="number">0</span>)</span><br><span class="line">		compareAndSetWaitStatus(node, ws, <span class="number">0</span>);</span><br><span class="line">	<span class="comment">// 获取当前节点的下一个节点</span></span><br><span class="line">	Node s = node.next;</span><br><span class="line">	<span class="comment">// 如果下个节点是null或者下个节点被cancelled，就找到队列最开始的非cancelled的节点</span></span><br><span class="line">	<span class="keyword">if</span> (s == <span class="keyword">null</span> || s.waitStatus &gt; <span class="number">0</span>) &#123;</span><br><span class="line">		s = <span class="keyword">null</span>;</span><br><span class="line">		<span class="comment">// 就从尾部节点开始找，到队首，找到队列第一个waitStatus&lt;0的节点。</span></span><br><span class="line">		<span class="keyword">for</span> (Node t = tail; t != <span class="keyword">null</span> &amp;&amp; t != node; t = t.prev)</span><br><span class="line">			<span class="keyword">if</span> (t.waitStatus &lt;= <span class="number">0</span>)</span><br><span class="line">				s = t;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 如果当前节点的下个节点不为空，而且状态&lt;=0，就把当前节点unpark</span></span><br><span class="line">	<span class="keyword">if</span> (s != <span class="keyword">null</span>)</span><br><span class="line">		LockSupport.unpark(s.thread);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>为什么要从后往前找第一个非Cancelled的节点呢？原因如下。</p>
<p>之前的addWaiter方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Node <span class="title">addWaiter</span><span class="params">(Node mode)</span> </span>&#123;</span><br><span class="line">	Node node = <span class="keyword">new</span> Node(Thread.currentThread(), mode);</span><br><span class="line">	<span class="comment">// Try the fast path of enq; backup to full enq on failure</span></span><br><span class="line">	Node pred = tail;</span><br><span class="line">	<span class="keyword">if</span> (pred != <span class="keyword">null</span>) &#123;</span><br><span class="line">		node.prev = pred;</span><br><span class="line">		<span class="keyword">if</span> (compareAndSetTail(pred, node)) &#123;</span><br><span class="line">			pred.next = node;</span><br><span class="line">			<span class="keyword">return</span> node;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	enq(node);</span><br><span class="line">	<span class="keyword">return</span> node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>我们从这里可以看到，节点入队并不是原子操作，也就是说，node.prev = pred; compareAndSetTail(pred, node) 这两个地方可以看作Tail入队的原子操作，但是此时pred.next = node;还没执行，如果这个时候执行了unparkSuccessor方法，就没办法从前往后找了，所以需要从后往前找。还有一点原因，在产生CANCELLED状态节点的时候，先断开的是Next指针，Prev指针并未断开，因此也是必须要从后往前遍历才能够遍历完全部的Node。</p>
<p>综上所述，如果是从前往后找，由于极端情况下入队的非原子操作和CANCELLED节点产生过程中断开Next指针的操作，可能会导致无法遍历所有的节点。所以，唤醒对应的线程后，对应的线程就会继续往下执行。继续执行acquireQueued方法以后，中断如何处理？</p>
<h3 id="2-3-4-中断恢复后的执行流程"><a href="#2-3-4-中断恢复后的执行流程" class="headerlink" title="2.3.4 中断恢复后的执行流程"></a>2.3.4 中断恢复后的执行流程</h3><p>唤醒后，会执行return Thread.interrupted();，这个函数返回的是当前执行线程的中断状态，并清除。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">parkAndCheckInterrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	LockSupport.park(<span class="keyword">this</span>);</span><br><span class="line">	<span class="keyword">return</span> Thread.interrupted();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>再回到acquireQueued代码，当parkAndCheckInterrupt返回True或者False的时候，interrupted的值不同，但都会执行下次循环。如果这个时候获取锁成功，就会把当前interrupted返回。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">acquireQueued</span><span class="params">(<span class="keyword">final</span> Node node, <span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">boolean</span> failed = <span class="keyword">true</span>;</span><br><span class="line">	<span class="keyword">try</span> &#123;</span><br><span class="line">		<span class="keyword">boolean</span> interrupted = <span class="keyword">false</span>;</span><br><span class="line">		<span class="keyword">for</span> (;;) &#123;</span><br><span class="line">			<span class="keyword">final</span> Node p = node.predecessor();</span><br><span class="line">			<span class="keyword">if</span> (p == head &amp;&amp; tryAcquire(arg)) &#123;</span><br><span class="line">				setHead(node);</span><br><span class="line">				p.next = <span class="keyword">null</span>; <span class="comment">// help GC</span></span><br><span class="line">				failed = <span class="keyword">false</span>;</span><br><span class="line">				<span class="keyword">return</span> interrupted;</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">if</span> (shouldParkAfterFailedAcquire(p, node) &amp;&amp; parkAndCheckInterrupt())</span><br><span class="line">				interrupted = <span class="keyword">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">	&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">		<span class="keyword">if</span> (failed)</span><br><span class="line">			cancelAcquire(node);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果acquireQueued为True，就会执行selfInterrupt方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">selfInterrupt</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	Thread.currentThread().interrupt();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>该方法其实是为了中断线程。但为什么获取了锁以后还要中断线程呢？这部分属于Java提供的协作式中断知识内容，感兴趣同学可以查阅一下。这里简单介绍一下：</p>
<ol>
<li>当中断线程被唤醒时，并不知道被唤醒的原因，可能是当前线程在等待中被中断，也可能是释放了锁以后被唤醒。因此我们通过Thread.interrupted()方法检查中断标记（该方法返回了当前线程的中断状态，并将当前线程的中断标识设置为False），并记录下来，如果发现该线程被中断过，就再中断一次。</li>
<li>线程在等待资源的过程中被唤醒，唤醒后还是会不断地去尝试获取锁，直到抢到锁为止。也就是说，在整个流程中，并不响应中断，只是记录中断记录。最后抢到锁返回了，那么如果被中断过的话，就需要补充一次中断。</li>
</ol>
<p>这里的处理方式主要是运用线程池中基本运作单元Worder中的runWorker，通过Thread.interrupted()进行额外的判断处理，感兴趣的同学可以看下ThreadPoolExecutor源码。</p>
<h3 id="2-3-5-小结"><a href="#2-3-5-小结" class="headerlink" title="2.3.5 小结"></a>2.3.5 小结</h3><p>我们在1.3小节中提出了一些问题，现在来回答一下。</p>
<blockquote>
<p>Q：某个线程获取锁失败的后续流程是什么呢？</p>
<p>A：存在某种排队等候机制，线程继续等待，仍然保留获取锁的可能，获取锁流程仍在继续。</p>
<p>Q：既然说到了排队等候机制，那么就一定会有某种队列形成，这样的队列是什么数据结构呢？</p>
<p>A：是CLH变体的FIFO双端队列。</p>
<p>Q：处于排队等候机制中的线程，什么时候可以有机会获取锁呢？</p>
<p>A：可以详细看下2.3.1.3小节。</p>
<p>Q：如果处于排队等候机制中的线程一直无法获取锁，需要一直等待么？还是有别的策略来解决这一问题？</p>
<p>A：线程所在节点的状态会变成取消状态，取消状态的节点会从队列中释放，具体可见2.3.2小节。</p>
<p>Q：Lock函数通过Acquire方法进行加锁，但是具体是如何加锁的呢？</p>
<p>A：AQS的Acquire会调用tryAcquire方法，tryAcquire由各个自定义同步器实现，通过tryAcquire完成加锁过程。</p>
</blockquote>
<h2 id="3-AQS应用"><a href="#3-AQS应用" class="headerlink" title="3 AQS应用"></a>3 AQS应用</h2><h3 id="3-1-ReentrantLock的可重入应用"><a href="#3-1-ReentrantLock的可重入应用" class="headerlink" title="3.1 ReentrantLock的可重入应用"></a>3.1 ReentrantLock的可重入应用</h3><p>ReentrantLock的可重入性是AQS很好的应用之一，在了解完上述知识点以后，我们很容易得知ReentrantLock实现可重入的方法。在ReentrantLock里面，不管是公平锁还是非公平锁，都有一段逻辑。</p>
<p>公平锁：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.ReentrantLock.FairSync#tryAcquire</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp; compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">		setExclusiveOwnerThread(current);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">	<span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">	<span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">	setState(nextc);</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>非公平锁：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.ReentrantLock.Sync#nonfairTryAcquire</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">	<span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, acquires))&#123;</span><br><span class="line">		setExclusiveOwnerThread(current);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">	<span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">	<span class="keyword">if</span> (nextc &lt; <span class="number">0</span>) <span class="comment">// overflow</span></span><br><span class="line">		<span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">	setState(nextc);</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>从上面这两段都可以看到，有一个同步状态State来控制整体可重入的情况。State是Volatile修饰的，用于保证一定的可见性和有序性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// java.util.concurrent.locks.AbstractQueuedSynchronizer</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">volatile</span> <span class="keyword">int</span> state;</span><br></pre></td></tr></table></figure>
<p>接下来看State这个字段主要的过程：</p>
<ol>
<li>State初始化的时候为0，表示没有任何线程持有锁。</li>
<li>当有线程持有该锁时，值就会在原来的基础上+1，同一个线程多次获得锁是，就会多次+1，这里就是可重入的概念。</li>
<li>解锁也是对这个字段-1，一直到0，此线程对锁释放。</li>
</ol>
<h3 id="3-2-JUC中的应用场景"><a href="#3-2-JUC中的应用场景" class="headerlink" title="3.2 JUC中的应用场景"></a>3.2 JUC中的应用场景</h3><p>除了上边ReentrantLock的可重入性的应用，AQS作为并发编程的框架，为很多其他同步工具提供了良好的解决方案。下面列出了JUC中的几种同步工具，大体介绍一下AQS的应用场景：</p>
<table>
<thead>
<tr>
<th style="text-align:left">同步工具</th>
<th style="text-align:left">同步工具与AQS的关联</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">ReentrantLock</td>
<td style="text-align:left">使用AQS保存锁重复持有的次数。当一个线程获取锁时，ReentrantLock记录当前获得锁的线程标识，用于检测是否重复获取，以及错误线程试图解锁操作时异常情况的处理。</td>
</tr>
<tr>
<td style="text-align:left">Semaphore</td>
<td style="text-align:left">使用AQS同步状态来保存信号量的当前计数。tryRelease会增加计数，acquireShared会减少计数。</td>
</tr>
<tr>
<td style="text-align:left">CountDownLatch</td>
<td style="text-align:left">使用AQS同步状态来表示计数。计数为0时，所有的Acquire操作（CountDownLatch的await方法）才可以通过。</td>
</tr>
<tr>
<td style="text-align:left">ReentrantReadWriteLock</td>
<td style="text-align:left">使用AQS同步状态中的16位保存写锁持有的次数，剩下的16位用于保存读锁的持有次数。</td>
</tr>
<tr>
<td style="text-align:left">ThreadPoolExecutor</td>
<td style="text-align:left">Worker利用AQS同步状态实现对独占线程变量的设置（tryAcquire和tryRelease）。</td>
</tr>
</tbody>
</table>
<h3 id="3-3-自定义同步工具"><a href="#3-3-自定义同步工具" class="headerlink" title="3.3 自定义同步工具"></a>3.3 自定义同步工具</h3><p>了解AQS基本原理以后，按照上面所说的AQS知识点，自己实现一个同步工具。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeeLock</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Sync</span> <span class="keyword">extends</span> <span class="title">AbstractQueuedSynchronizer</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span> <span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> compareAndSetState(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">tryRelease</span> <span class="params">(<span class="keyword">int</span> arg)</span> </span>&#123;</span><br><span class="line">            setState(<span class="number">0</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isHeldExclusively</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> getState() == <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> Sync sync = <span class="keyword">new</span> Sync();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lock</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.acquire(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unlock</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">        sync.release(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过我们自己定义的Lock完成一定的同步功能。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LeeMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> LeeLock leeLock = <span class="keyword">new</span> LeeLock();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line"></span><br><span class="line">        Runnable runnable = <span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    leeLock.lock();</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">                        count++;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    leeLock.unlock();</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        Thread thread1 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        Thread thread2 = <span class="keyword">new</span> Thread(runnable);</span><br><span class="line">        thread1.start();</span><br><span class="line">        thread2.start();</span><br><span class="line">        thread1.join();</span><br><span class="line">        thread2.join();</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码每次运行结果都会是20000。通过简单的几行代码就能实现同步功能，这就是AQS的强大之处。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们日常开发中使用并发的场景太多，但是对并发内部的基本框架原理了解的人却不多。由于篇幅原因，本文仅介绍了可重入锁ReentrantLock的原理和AQS原理，希望能够成为大家了解AQS和ReentrantLock等同步器的“敲门砖”。</p>
<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul>
<li>Lea D. The java. util. concurrent synchronizer framework[J]. Science of Computer Programming, 2005, 58(3): 293-309.</li>
<li>《Java并发编程实战》</li>
<li><a href="https://tech.meituan.com/2018/11/15/java-lock.html" target="_blank" rel="noopener">不可不说的Java“锁”事</a></li>
</ul>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>并发</tag>
        <tag>ReentrantLock</tag>
        <tag>AQS</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL增删改查都会用到什么锁?</title>
    <url>/2020/02/12/MySQL%E5%A2%9E%E5%88%A0%E6%94%B9%E6%9F%A5%E9%83%BD%E4%BC%9A%E7%94%A8%E5%88%B0%E4%BB%80%E4%B9%88%E9%94%81/</url>
    <content><![CDATA[<p>日常的操作中，增删改查都会使用什么类型的锁？其实这个问题，可以分为两个方面，一方面是读，一方面是写。</p>
<h1 id="01-读（select）"><a href="#01-读（select）" class="headerlink" title="01 读（select）"></a>01 读（select）</h1><p>  我们先来看读的部分。读的操作，其实分为两种，分别是<strong>一致性读</strong>和<strong>锁定读</strong>，</p>
<p>  这里我们温习一下，一致性读其实就是利用事务的MVCC机制，来读取一份数据的快照，所以有的书上也称之为快照读，一致性读是不加锁的，其他的事务是可以对表中的数据记录进行改动的。一般情况下，常见的读，例如：</p>
<p>select * from table；</p>
<p>select * from table left join table2;</p>
<p>  这种操作，在RU，RC，RR隔离级别下都是采用一直性读，不加锁的操作。这种情况下，<strong>读的并发可以非常高。</strong></p>
<p>  再来看看锁定读，如果我们的表当中有索引，我们想在读取记录的时候，获取某一条记录的锁，禁止别的事务对这条记录进行修改，那么我们可以使用下面的语句来对读取的记录加锁：</p>
<p><strong>select … lock in share mode;</strong>加共享锁。(其他事务可读，不可写)</p>
<p><strong>select … for update;</strong>加排它锁。(其他事务不可读，不可写)，这样，其他事务就不能对这条记录进行读取和更改了。</p>
<p>关于读操作的是否加锁，还有以下几点需要注意： </p>
<p>1、在Serializable这种事务的隔离级别下，普通的select操作会升级为select…in share mode；的模式。</p>
<p>2、在唯一索引上使用唯一的查询条件，会使用记录锁，而不会封锁记录之间的间隔，即不会使用间隙锁。</p>
<p>3、其他类型的索引使用范围的查询条件或者唯一的查询条件，innodb会自动锁定被扫描的范围，避免索引范围区间内插入新的记录。这块儿可能比较模糊，文章最后面给出各种类型下的加锁测试结果。</p>
<h1 id="02-写（update、delete、insert）"><a href="#02-写（update、delete、insert）" class="headerlink" title="02 写（update、delete、insert）"></a>02 写（update、delete、insert）</h1><h2 id="关于delete"><a href="#关于delete" class="headerlink" title="关于delete"></a>关于delete</h2><p>  对一条数据做delete的过程实际上是要先在索引的B+树上获取该记录的位置，然后再这个记录所在的位置加X锁，也就是排它锁。</p>
<p>  如果对某个范围内的数据做delete操作，则会在索引B+树上对范围内符合查询条件的记录以及记录之前的区间加next-key锁(本质是记录锁和间隙锁的组合，后面的文章会讲到)。  </p>
<p>   加完锁之后，再进行delete操作。这个delete操作的本质，其实是先将delete的标识为标识为1，而不是真正进行删除，如果下次这块空间可以复用，则innodb会直接进行复用。</p>
<p>   更多详情请见：Innodb数据页简介</p>
<h2 id="关于update"><a href="#关于update" class="headerlink" title="关于update"></a>关于update</h2><p>  对一条记录做update的时候，我们知道，如果该要更新的列在更新前后的存储空间没有发生变化，则会直接在该记录上进行更新操作。而如果发生了存储空间的变化，则会现将这条记录彻底删除掉，然后再插入一条新的记录。</p>
<p>  基本上分为一下三种情况：</p>
<p>1、如果update操作没有更新索引键值并且没有导致存储空间变化，则会直接在索引B+树上使用X锁来锁定update的记录。</p>
<p>2、如果update操作没有更新索引键值但却导致了数据的存储空间发生变化，则会现将这表数据记录删除掉，然后再插入一条新的记录，在这个过程中，先会获取索引B+树的X锁，然后insert过程会使用隐式锁来进行保护。</p>
<p>3、如果update修改了某条记录的索引键值，则需要先进行delete，然后再进行一次insert，加锁的规则就和delete以及insert一样了。</p>
<p>  这里有几点需要注意：</p>
<p>1、如果在唯一索引上使用唯一的查询条件来进行update和delete操作，那么这个过程中只会对记录加锁。</p>
<p>2、除了第一种情况之外，都会加排他的next-key锁，来锁定记录和记录之前的范围。</p>
<p>3、如果update的是主键的记录，则对应的普通索引的记录也会被隐式加锁，这是因为innodb中的普通索引会存储主键的值，检索普通索引本质上要进行回表操作，二次扫描聚集索引。</p>
<h2 id="关于insert"><a href="#关于insert" class="headerlink" title="关于insert"></a>关于insert</h2><p>  insert操作会用排它锁封锁被插入的索引记录，而不会封锁记录之前的范围。除此之外，会在插入区间加入插入意向锁</p>
<p>  最后，今天我做了一点测试，测试的数据太多了，不方便整理，这里把测试结果放在这里，大家可以看看，和自己设想的情况一样不一样：</p>
<p>（注意：所有测试均在RR隔离级别下，RC隔离级别下只有记录锁，没有间隙锁，相对比较简单，大家可以自行研究）</p>
<p><strong>RR隔离级别下</strong>，如果会话1锁定了一个空的记录，例如id=6的记录，表中只有id=5和id=9的值，那么会话2中<strong>不能</strong>插入id=6、7、8的值，因为这个间隙已经被锁定。其中，<strong>id可以是主键或者唯一索引。</strong></p>
<p><strong>RR隔离级别下</strong>，如果会话1锁定了一个存在记录，例如id=5的记录，表中有id=5的值，那么会话2中<strong>可以</strong>插入id=4、6、7、8的值，间隙没有锁定。其中，<strong>id可以是主键或者唯一索引。</strong></p>
<p><strong>RR隔离级别下</strong>，如果会话1锁定了一个范围记录，例如id&lt;6的记录，表中有id=5的值和id=9的值，那么会话2中<strong>不能</strong>插入id=6、7、8的值，间隙被锁定。其中，<strong>id可以是主键或者唯一索引。</strong></p>
<p><strong>RR隔离级别下</strong>，如果会话1锁定了一个范围记录，例如id&gt;6 and id &lt;11的记录，表中有id=5的值和id=9的值，那么会话2中<strong>不能</strong>插入id=6、7、8的值以及id大于9的所有值，间隙被锁定。其中，<strong>id可以是主键或者唯一索引</strong>。</p>
<p><strong>RR隔离级别下</strong>，如果会话1锁定了一个空的记录，例如id=6的记录，表中有id=5的值和id=9的值，那么会话2中<strong>不能</strong>插入id=5、6、7、8的值，间隙被锁定。但是可以插入9的值，其中，<strong>id是普通索引。</strong></p>
<p><strong>RR隔离级别下</strong>，如果会话1锁定了一个存在记录，例如id=5的记录，表中有id=5的值和id=9的值，那么会话2中<strong>不能</strong>插入id=4、6、7、8的值，但是可以插入9的值。间隙被锁定。其中，<strong>id是普通索引。</strong></p>
<p><strong>RR隔离级别下</strong>，如果会话1锁定了一个范围记录，例如id&lt;6的记录，表中有id=5的值和id=9的值，那么会话2中<strong>不能</strong>插入id=4、6、7、8的值，但是可以插入9的值，间隙被锁定。其中，<strong>id是普通索引**</strong>。**</p>
<p><strong>RR隔离级别下</strong>，如果会话1锁定了一个范围记录，例如id&gt;6 and id&lt;11的记录，表中有id=5的值和id=9的值，那么会话2中<strong>不能</strong>插入<strong>所有值的记录，所有**</strong>间隙被锁定，类似全表锁<strong>。其中，</strong>id是普通索引<strong>**。</strong></p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="关于MySQL锁的两个知识点"><a href="#关于MySQL锁的两个知识点" class="headerlink" title="关于MySQL锁的两个知识点"></a>关于MySQL锁的两个知识点</h2><h3 id="MySQL快照读和当前读"><a href="#MySQL快照读和当前读" class="headerlink" title="MySQL快照读和当前读"></a>MySQL快照读和当前读</h3><p>  当我们对数据库中的表进行select、update、delete以及insert的时候，innodb存储引擎会根据操作类型的不同来给这些操作添加具体的锁。</p>
<p>  在MySQL中，读操作可以分成两类：<strong>快照读</strong> (snapshot read)与<strong>当前读</strong> (current read)。快照读，读取的是记录的可见版本 (有可能是历史版本)，不用加锁。当前读，读取的是记录的最新版本，并且，当前读返回的记录，都会加上锁，保证其他事务不会再并发修改这条记录。</p>
<p>这里我们首先给出快照读和当前读的例子：</p>
<p>快照读：简单的select操作，属于快照读，不加锁。(当然，也有例外，下面会分析)</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> <span class="keyword">id</span>&gt;<span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>当前读：特殊的读操作，插入/更新/删除操作，属于当前读，需要加锁。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select * from table where id&gt;10 lock in share mode;</span><br><span class="line">select * from table where id&gt;10 for update;</span><br><span class="line">insert into table values (…);</span><br><span class="line">update table set id=11 where id=10;</span><br><span class="line">delete from table where id&gt;10;</span><br></pre></td></tr></table></figure>
<p>读取之后，需要保证其他并发事务不能修改当前记录，对读取记录加锁。其中，除了第一条语句明确指出了lock in share mode之外，也就是对读取记录加S锁 (共享锁)外，其他的操作，都加的是X锁 (排它锁)。</p>
<p>这里我们给出一个update操作过程中，mysql server和innodb存储引擎进行交互的过程如下：</p>
<p><img src="/2020/02/12/MySQL增删改查都会用到什么锁/image-20200212152912203.png" alt="image-20200212152912203"></p>
<p>从上图中，我们可以看出一个update操作的具体流程。当update SQL被发给MySQL后，MySQL Server会根据where条件，读取第一条满足条件的记录，然后InnoDB引擎会将第一条记录返回，并加锁 (current read)。待MySQL Server收到这条加锁的记录之后，会再发起一个update请求，更新这条记录。一条记录操作完成，再读取下一条记录，直至没有满足条件的记录为止。因此，update操作内部，就包含了一个当前读。同理，delete操作也一样。insert操作会稍微有些不同，简单来说，就是insert操作可能会触发Unique Key的冲突检查，也会进行一个当前读。</p>
<h3 id="关于死锁"><a href="#关于死锁" class="headerlink" title="关于死锁"></a>关于死锁</h3><blockquote>
<p> 死锁是指两个或者两个以上的事务在执行的过程中，因争夺资源而造成的一种互相等待的现象。若无外力作用，这两个事务将保持等待状态，无法推进下去。很明显，这是我们不想看到的。</p>
</blockquote>
<p>  从上面的概念可以看出，死锁的关键点在于互相等待，如果我们要解决死锁的问题，就要从“等待”这个关键词上面入手，如果我们将等待都转化为回滚操作，并且事务都重新开始，这种方法无疑可以避免死锁问题的产生。但是会导致数据库并发性能的降低，这样的问题也是我们无法接受的。</p>
<p>  为了解决这一问题，我们采用一种超时的方法进行折中进行处理，超时是指当两个事务互相等待时，当某一方的等待时间超过一个阈值，我们将它进行回滚，这样，另一个事务就能够继续进行，在innodb存储引擎中，我们使用参数innodb_lock_wait_timeout来设置超时时间，这个参数如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; show variables like "innodb_lock_wait_timeout";</span><br><span class="line">+<span class="comment">--------------------------+-------+</span></span><br><span class="line">| Variable_name            | Value |</span><br><span class="line">+<span class="comment">--------------------------+-------+</span></span><br><span class="line">| innodb_lock_wait_timeout | 50    |</span><br><span class="line">+<span class="comment">--------------------------+-------+</span></span><br><span class="line">1 row in <span class="keyword">set</span>, <span class="number">1</span> <span class="keyword">warning</span> (<span class="number">0.11</span> sec)</span><br></pre></td></tr></table></figure>
<p>  为了加深印象，我们模拟一个死锁的现象，让大家感受一下。</p>
<p>  首先，要模拟死锁，程序必须并发运行，串行的方法是无法模拟死锁的，这里我们采用两个连接会话进行模拟：</p>
<p><strong>会话A</strong></p>
<p><strong>我们先开启事务，然后锁定id=3的行；</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from t;</span><br><span class="line">+<span class="comment">----+-----+</span></span><br><span class="line">| id | age |</span><br><span class="line">+<span class="comment">----+-----+</span></span><br><span class="line">|  1 |   5 |</span><br><span class="line">|  2 |   4 |</span><br><span class="line">|  3 |   3 |</span><br><span class="line">|  4 |   2 |</span><br><span class="line">|  5 |   1 |</span><br><span class="line">+<span class="comment">----+-----+</span></span><br><span class="line">5 rows in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; <span class="keyword">begin</span>;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; select * from t where id=3 for update;</span><br><span class="line">+<span class="comment">----+-----+</span></span><br><span class="line">| id | age |</span><br><span class="line">+<span class="comment">----+-----+</span></span><br><span class="line">|  3 |   3 |</span><br><span class="line">+<span class="comment">----+-----+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.02</span> sec)</span><br></pre></td></tr></table></figure>
<p><strong>会话B</strong></p>
<p><strong>在会话B上锁定id=2的行</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; begin</span><br><span class="line">    -&gt; ;</span><br><span class="line">Query OK, 0 rows affected (0.00 sec)</span><br><span class="line">mysql&gt; select * from t where id=2 for update;</span><br><span class="line">+<span class="comment">----+-----+</span></span><br><span class="line">| id | age |</span><br><span class="line">+<span class="comment">----+-----+</span></span><br><span class="line">|  2 |   4 |</span><br><span class="line">+<span class="comment">----+-----+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">0.00</span> sec)</span><br></pre></td></tr></table></figure>
<p><strong>会话A</strong></p>
<p><strong>我们在会话A上获取id=2的记录的锁，发现无法获取，产生了等待：</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from t where id=2 for update;</span><br><span class="line">##产生等待</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p><strong>会话B</strong></p>
<p>在会话A进行等待的过程中，我们在会话B上面获取id=3的记录的锁，我们发现了两个变化：</p>
<p>第一、会话B上输出了死锁的提示信息，如下；</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from t where id=3 for update;</span><br><span class="line">ERROR 1213 (40001): Deadlock found when trying to get <span class="keyword">lock</span>; try restarting traction</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>第二、会话A上输出了id=2的记录，也就是A会话得到了特定的资源，但是产生了9s的延迟，如下；</p>
<p><strong>会话A</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql&gt; select * from t where id=2 for update;</span><br><span class="line">+<span class="comment">----+-----+</span></span><br><span class="line">| id | age |</span><br><span class="line">+<span class="comment">----+-----+</span></span><br><span class="line">|  2 |   4 |</span><br><span class="line">+<span class="comment">----+-----+</span></span><br><span class="line">1 row in <span class="keyword">set</span> (<span class="number">9.04</span> sec)</span><br><span class="line"></span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure>
<p>  在上述操作中，会话B抛出了1213这个错误状态码，它代表事务发生了死锁，死锁的原因是会话A和B的资源进行了相互等待，但是此时我们发现会话B中抛出死锁提示信息之后会话A中立即得到了记录为2的这个资源，这其实是因为会话B中的事务发生了回滚，否则的话，会话A中的事务是不可能得到相应的资源的。</p>
<p>  这里又不得不提innodb的一个特性，那就是它会回滚死锁情况下的一个事务，因此当我们在程序中捕获了一个1213的错误，其实不需要我们手动进行回滚。</p>
<h2 id="Innodb数据页简介"><a href="#Innodb数据页简介" class="headerlink" title="Innodb数据页简介"></a>Innodb数据页简介</h2><p>  页是内存和磁盘交互的基本单位，它的大小一般是16KB，可以被分为如下几个部分：</p>
<p><img src="/2020/02/12/MySQL增删改查都会用到什么锁/image-20200212162043235.png" alt="image-20200212162043235"></p>
<p>  上次的文章里面，我们对这几个部分大概做了介绍，今天我们说说上面数据页的蓝色部分。</p>
<p>  该部分保存的是数据页中真正的数据记录，也就是用户存储的记录。当我们一开始生成页的时候，其实并没有蓝色的Record部分，而是随着我们不断给数据库中插入记录，才逐渐从Free Space中划分出来的空间。用示意图来描述就是：</p>
<p><img src="/2020/02/12/MySQL增删改查都会用到什么锁/640-1581493216093.webp" alt="img"></p>
<p> 如果Free Space中的数据页被分配完了，则去申请新的数据页。</p>
<p>为了方便理解，我们现在创建一个表进行演示：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">test</span>(</span><br><span class="line">    -&gt;     c1 <span class="built_in">INT</span>,</span><br><span class="line">    -&gt;     c2 <span class="built_in">INT</span>,</span><br><span class="line">    -&gt;     c3 <span class="built_in">VARCHAR</span>(<span class="number">1000</span>),</span><br><span class="line">    -&gt;     PRIMARY <span class="keyword">KEY</span> (c1)</span><br><span class="line">    -&gt; ) <span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line">Query OK, 0 rows affected (0.03 sec)</span><br></pre></td></tr></table></figure>
<p>现在我们给这个表里面插入几条数据：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">test</span> <span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>,<span class="number">2</span>,<span class="string">'a'</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="number">3</span>,<span class="string">'bb'</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="number">4</span>,<span class="string">'ccc'</span>),</span><br><span class="line">(<span class="number">4</span>,<span class="number">5</span>,<span class="string">'dddd'</span>);</span><br></pre></td></tr></table></figure>
<p>我们可以把上面的数据页结构简单表示如下：</p>
<p><img src="/2020/02/12/MySQL增删改查都会用到什么锁/640.webp" alt="img"></p>
<p>  我们可以看到，每条记录由三个部分构成，分别是记录头、记录数据以及其他信息，其中记录头里面包含很多字段来表示该条记录的信息，这些字段我们会逐渐进行讲解。目前4条记录都已经插入到record部分了，在实际过程中这四条记录是通过链表的方式进行连接的，如下：</p>
<p><img src="/2020/02/12/MySQL增删改查都会用到什么锁/640.png" alt="img"></p>
<p>  在第一张图的数据页中，蓝色部分还有一部分是infimum和supermun，它们是两条伪记录，它们分别是这个数据页中”指定的”最大的记录和最小的记录。它们的作用是作为当前数据页内数据链表的首末两端。这样，数据页中的数据就可以被我们排列成下面的样子：</p>
<p><img src="/2020/02/12/MySQL增删改查都会用到什么锁/640-1581493216124.webp" alt="img"></p>
<p>  我们已经可以看到，我们的主键按照从大到小的顺序形成了一个链表，链表的首末位置分别是两条伪记录。</p>
<p>  当我们对数据记录中id=2的一条记录进行删除时，实际上，在数据记录链表里面发生的变化如下：</p>
<p><img src="/2020/02/12/MySQL增删改查都会用到什么锁/640-1581493216095.webp" alt="img"></p>
<p>  可以看出，实际上并没有删除那条记录，而是通过将头信息中的delete标识位改为1、偏移量改为0来实现的，也就是说，这条记录所占用的空间并没有还给Free Space，当下一次插入id=2的记录的时候，这块空间还可以接着使用。</p>
<p>  在这个过程中，我们加入了record_type字段，这两条伪记录和正常记录的区别之处在于数据记录的头信息里面的record_type字段，最小记录的record_type为2，最大记录的record为3，正常记录的record_type为0，record_type为1的记录，稍后我们会进行解释。</p>
<p>  到现在为止，我们已经知道了头信息中的3个字段，分别是next_record和record_type以及delete字段，next_record保存的是下一条数据记录的真是数据的偏移量，record_type代表的是数据记录的类型，delete标示的是该字段是否被删除。除此之外，我们还需要知道记录头信息里面的另外一个字段n_owned，这个字段保存的是改组内一共有多少个数据记录，在上述删除的操作中，最大记录中该字段的变化过程如下：</p>
<p><img src="/2020/02/12/MySQL增删改查都会用到什么锁/640-1581493216096.webp" alt="img"></p>
<p>  关于这个初始值为何是5，后续的文章中我们会说明。至此，我们已经了解到，一个数据页，大概可以描述成如下形式：</p>
<p><img src="/2020/02/12/MySQL增删改查都会用到什么锁/640-1581493216136.webp" alt="img"></p>
<h2 id="MySQL锁优化"><a href="#MySQL锁优化" class="headerlink" title="MySQL锁优化"></a>MySQL锁优化</h2><h3 id="MySQL-锁分类"><a href="#MySQL-锁分类" class="headerlink" title="MySQL 锁分类"></a>MySQL 锁分类</h3><p>当多个事务或者进程访问同一个资源的时候，为了保证数据的一致性，就需要用到锁机制。</p>
<p>从锁定资源的角度来看，MySQL 中的锁分为：</p>
<ul>
<li><strong>表级锁</strong></li>
<li><strong>行级锁</strong></li>
<li><strong>页面锁</strong></li>
</ul>
<p><strong>表级锁：</strong>对整张表加锁。开销小，加锁快；不会出现死锁；锁定粒度大，发生锁冲突的概率最高，并发度最低。 </p>
<p><strong>行级锁：</strong>对某行记录加锁。开销大，加锁慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高。</p>
<p><strong>页面锁：</strong>开销和加锁时间界于表锁和行锁之间；会出现死锁；锁定粒度界于表锁和行锁之间，并发度一般。</p>
<p>在实际开发过程中，主要会使用到表级锁和行级锁两种。既然锁是针对资源的，那么这些资源就是数据，在 MySQL 提供插件式存储引擎对数据进行存储。</p>
<p>插件式存储引擎的好处是，开发人员可以根据需要选择适合的存储引擎。</p>
<p>在众多的存储引擎中，有两种引擎被比较多的使用，他们分别是：</p>
<ul>
<li><p><strong>MyISAM 存储引擎，</strong>它不支持事务、表锁设计，支持全文索引，主要面向一些在线分析处理（OLAP）数据库应用。说白了主要就是查询数据，对数据的插入，更新操作比较少。</p>
</li>
<li><p><strong>InnoDB 存储引擎，</strong>它支持事务，其设计目标主要面向在线事务处理（OLTP）的应用。</p>
<p>其特点是行锁设计、支持外键，并支持类似于 Oracle 的非锁定读，即默认读取操作不会产生锁。</p>
<p>简单来说，就是对数据的插入，更新操作比较多。从 MySQL 数据库 5.5.8 版本开始，InnoDB 存储引擎是默认的存储引擎。</p>
</li>
</ul>
<p>上面两种存储引擎在处理多进程数据操作的时候是如何表现的，就是我们接下来要讨论的问题。</p>
<p>为了让整个描述更加清晰，我们将表级锁和行级锁以及 MyISAM，InnoDB 存储引擎，就形成了一个 2*2 的象限。</p>
<p><img src="/2020/02/12/MySQL增删改查都会用到什么锁/640-1581493478029.webp" alt="img"></p>
<center><em>2\</em>2 表行锁，MyISAM，InnoDB 示意图*</center>

<p>由于 MyISAM 存储引擎不支持行级锁，实际上后面讨论的问题会围绕三个象限的讨论展开。</p>
<p>从内容上来看，InnoDB 作为使用最多的存储引擎遇到的问题和值得注意的地方较多，也是本文的重点。</p>
<p>MyISAM 存储引擎和表级锁</p>
<p>首先，来看第一象限的内容：</p>
<p><img src="/2020/02/12/MySQL增删改查都会用到什么锁/image-20200212160055676.png" alt="image-20200212160055676"></p>
<center><em>2\</em>2 表行锁，MyISAM，InnoDB 示意图-第一象限*</center>

<p>MyISAM 存储引擎支持表级锁，并且支持两种锁模式：</p>
<ul>
<li><strong>对 MyISAM 表的读操作（共享锁），</strong>不会阻塞其他进程对同一表的读请求，但会阻塞对其的写请求。当读锁释放后，才会执行其他进程的写操作。</li>
<li><strong>对 MyISAM 表的写操作（排他锁），</strong>会阻塞其他进程对同一表的读写操作，当该锁释放后，才会执行其他进程的读写操作。</li>
</ul>
<h3 id="MyISAM-优化建议"><a href="#MyISAM-优化建议" class="headerlink" title="MyISAM 优化建议"></a>MyISAM 优化建议</h3><p>在使用 MyISAM 存储引擎时。执行 SQL 语句，会自动为 SELECT 语句加上共享锁，为 UDI（更新，删除，插入）操作加上排他锁。</p>
<p>由于这个特性在多进程并发插入同一张表的时候，就会因为排他锁而进行等待。</p>
<p>因此可以通过配置 concurrent_insert 系统变量，来控制其并发的插入行为。</p>
<p><strong>①concurrent_insert=0 时，</strong>不允许并发插入。</p>
<p><strong>②concurrent_insert=1 时，</strong>如果 MyISAM 表中没有空洞（即表中没有被删除的行），允许一个进程读表时，另一个进程向表的尾部插入记录（MySQL 默认设置）。</p>
<blockquote>
<p>注：空洞是行记录被删除以后，只是被标记为“已删除”其存储空间没有被回收，也就是说没有被物理删除。由另外一个进程，异步对这个数据进行删除。</p>
<p>因为空间长度问题，删除以后的物理空间不能被新的记录所使用，从而形成了空洞。</p>
</blockquote>
<p><strong>③concurrent_insert=2 时，</strong>无论 MyISAM 表中有没有空洞，都允许在表尾并发插入记录。</p>
<p>如果在数据插入的时候，没有并发删除操作的话，可以尝试把 concurrent_insert 设置为 1。</p>
<p>反之，在数据插入的时候有删除操作且量较大时，也就是会产生“空洞”的时候，就需要把 concurrent_insert 设置为 2。</p>
<p>另外，当一个进程请求某个 MyISAM 表的读锁，另一个进程也请求同一表的写锁。</p>
<p>即使读请求先到达，写请求后到达，写请求也会插到读请求之前。因为 MySQL 的默认设置认为，写请求比读请求重要。</p>
<p>我们可以通过 low_priority_updates 来调节读写行为的优先级：</p>
<ul>
<li>数据库以读为主时，要优先保证查询性能时，可通过 low_priority_updates=1 设置读优先级高于写优先级。</li>
<li>数据库以写为主时，则不用设置 low_priority_updates 参数。</li>
</ul>
<h3 id="InnoDB-存储引擎和表级锁"><a href="#InnoDB-存储引擎和表级锁" class="headerlink" title="InnoDB 存储引擎和表级锁"></a>InnoDB 存储引擎和表级锁</h3><p>再来看看第二象限的内容：</p>
<p><img src="/2020/02/12/MySQL增删改查都会用到什么锁/640-1581493477955.webp" alt="img"></p>
<center><em>2\</em>2 表行锁，MyISAM，InnoDB 示意图-第二象限*</center>



<p>InnoDB 存储引擎表锁。当没有对数据表中的索引数据进行查询时，会执行表锁操作。</p>
<p>上面是 InnoDB 实现行锁，同时它也可以实现表锁。其方式就是意向锁（Intention Locks）。</p>
<p>这里介绍两种意向锁：</p>
<ul>
<li><strong>意向共享锁（IS）：</strong>事务打算给数据行加行共享锁，事务在给一个数据行加共享锁前，必须先取得该表的 IS 锁。</li>
<li><strong>意向排他锁（IX）：</strong>事务打算给数据行加行排他锁，事务在给一个数据行加排他锁前，必须先取得该表的 IX 锁。</li>
</ul>
<blockquote>
<p>注：意向共享锁和意向排他锁是数据库主动加的，不需要我们手动处理。对于 UPDATE、DELETE 和 INSERT 语句，InnoDB 会自动给数据集加排他锁。</p>
</blockquote>
<p><strong>InnoDB表锁的实现方式：</strong>假设有一个表 test2，有两个字段分别是 id 和 name。</p>
<p>没有设置主键同时也没有设置任何索引（index）如下：</p>
<p><img src="/2020/02/12/MySQL增删改查都会用到什么锁/640-1581493478033.webp" alt="img"></p>
<center><em>InnoDB 表锁实现方式图</em></center>

<h3 id="InnoDB-存储引擎和行级锁"><a href="#InnoDB-存储引擎和行级锁" class="headerlink" title="InnoDB 存储引擎和行级锁"></a>InnoDB 存储引擎和行级锁</h3><p>第四象限我们使用的比较多，讨论的内容也相对多些：</p>
<p><img src="/2020/02/12/MySQL增删改查都会用到什么锁/640-1581493478031.webp" alt="img"></p>
<center><em>2\</em>2 表行锁，MyISAM，InnoDB 示意图-第四象限*</center>



<p>InnoDB 存储引擎行锁，当数据查询时针对索引数据进行时，会使用行级锁。</p>
<p><strong>共享锁（S）：</strong>当一个事务读取一条记录的时候，不会阻塞其他事务对同一记录的读请求，但会阻塞对其的写请求。当读锁释放后，才会执行其他事务的写操作。</p>
<p>例如：select … lock in share mode</p>
<p><strong>排他锁（X）：</strong>当一个事务对一条记录进行写操作时，会阻塞其他事务对同一表的读写操作，当该锁释放后，才会执行其他事务的读写操作。</p>
<p>例如：select … for update</p>
<p><strong>行锁的实现方式：</strong>假设有一个表 test1，有两个字段分别是 id 和 name。</p>
<p>id 作为主键同时也是 table 的索引（index）如下：</p>
<p><img src="/2020/02/12/MySQL增删改查都会用到什么锁/image-20200212155919536.png" alt="image-20200212155919536"></p>
<center><em>InnoDB 行锁实现方式图</em></center>



<p>在高并发的情况下，多个事务同时请求更新数据，由于资源被占用等待事务增多。</p>
<p>如此，会造成性能问题，可以通过 innodb_lock_wait_timeout 来解决。innodb_lock_wait_timeout 是事务等待获取资源的最长时间，单位为秒。如果超过时间还未分配到资源，则会返回应用失败。</p>
<h3 id="四种锁的兼容情况"><a href="#四种锁的兼容情况" class="headerlink" title="四种锁的兼容情况"></a>四种锁的兼容情况</h3><p><img src="/2020/02/12/MySQL增删改查都会用到什么锁/image-20200212155859778.png" alt="image-20200212155859778"></p>
<center><em>共享锁，排他锁，意向共享锁，意向排他锁兼容图例</em></center>



<p>如果一个事务请求的锁模式与当前的锁兼容， InnoDB 就将请求的锁授予该事务；反之， 如果两者不兼容，该事务就要等待锁释放。</p>
<h4 id="间隙锁"><a href="#间隙锁" class="headerlink" title="间隙锁"></a><strong>间隙锁</strong></h4><p>前面谈到行锁是针对一条记录进行加锁。当对一个范围内的记录加锁的时候，我们称之为间隙锁。</p>
<p>当使用范围条件索引数据时，InnoDB 会对符合条件的数据索引项加锁。对于键值在条件范围内但并不存在的记录，叫做“间隙（GAP)”，InnoDB 也会对这个“间隙”加锁，这就是间隙锁。间隙锁和行锁合称（Next-Key锁）。</p>
<p>如果表中只有 11 条记录，其 id 的值分别是 1,2,…,10，11 下面的 SQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Select</span> * <span class="keyword">from</span> table_gapwhere <span class="keyword">id</span> &gt; <span class="number">10</span> <span class="keyword">for</span> <span class="keyword">update</span>;</span><br></pre></td></tr></table></figure>
<p>这是一个范围条件的检索，InnoDB 不仅会对符合条件的 id 值为 10 的记录加锁，会对 id 大于 10 的“间隙”加锁，即使大于 10 的记录不存在，例如 12，13。</p>
<p><strong>InnoDB 使用间隙锁的目的：</strong></p>
<ul>
<li>一方面是为了防止幻读。对于上例，如果不使用间隙锁，其他事务插入了 id 大于 10 的任何记录，本事务再次执行 select 语句，就会发生幻读。</li>
<li>另一方面，也是为了满足恢复和复制的需要。</li>
</ul>
<p><img src="/2020/02/12/MySQL增删改查都会用到什么锁/640-1581493478032.webp" alt="img"></p>
<center><em>间隙锁图</em></center>



<h4 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a><strong>死锁</strong></h4><p>两个事务都需要获得对方持有的排他锁才能继续完成任务，这种互相等待对方释放资源的情况就是死锁。</p>
<p><img src="/2020/02/12/MySQL增删改查都会用到什么锁/640-1581493478014.webp" alt="img"></p>
<center><em>死锁图</em></center>



<p><strong>检测死锁：</strong>InnoDB 存储引擎能检测到死锁的循环依赖并立即返回一个错误。</p>
<p><strong>死锁恢复：</strong>死锁发生以后，只有部分或完全回滚其中一个事务，才能打破死锁。</p>
<p>InnoDB 方法是，将持有最少行级排他锁的事务回滚。在应用程序设计时必须考虑处理死锁，多数情况下重新执行因死锁回滚的事务即可。</p>
<p><strong>避免死锁：</strong></p>
<ul>
<li><p>在事务开始时，如果有记录要修改，先使用 SELECT… FOR UPDATE 语句获取锁，即使这些修改语句是在后面执行。 </p>
</li>
<li><p>在事务中，如果要更新记录，直接申请排他锁。而不是查询时申请共享锁、更新时再申请排他锁。</p>
<p>这样做会导致，当申请排他锁时，其他事务可能已经获得了相同记录的共享锁，从而造成锁冲突，甚至死锁。</p>
<p>简单来说，如果你要更新记录要做两步操作，第一步查询，第二步更新。就不要第一步上共享锁，第二部上排他锁了，直接在第一步就上排他锁，抢占先机。</p>
</li>
<li><p>如果事务需要锁定多个表，那么尽量按照相同的顺序使用加锁语句，可以降低产生死锁的机会。</p>
</li>
<li><p>通过 SELECT … LOCK INSHARE MODE（共享锁）获取行的读锁后，如果当前事务再需要对该记录进行更新操作，则很有可能造成死锁。所以，如果要对行记录进行修改，直接上排他锁。</p>
</li>
<li><p>改变事务隔离级别（事务隔离级别在后面详细说明）。</p>
</li>
</ul>
<h4 id="MySQL-锁定情况的查询"><a href="#MySQL-锁定情况的查询" class="headerlink" title="MySQL 锁定情况的查询"></a><strong>MySQL 锁定情况的查询</strong></h4><p>在实际开发中无法避免数据被锁的问题，那么我们可以通过哪些手段来查询锁呢？</p>
<p>表级锁可以通过两个变量的查询：</p>
<ul>
<li>Table_locks_immediate，产生表级锁的次数。</li>
<li>Table_locks_waited，数显表级锁而等待的次数。</li>
</ul>
<p>行级锁可以通过下面几个变量查询：</p>
<ul>
<li>Innodb_row_lock_current_waits，当前正在等待锁定的数量。</li>
<li>Innodb_row_lock_time（重要），从系统启动到现在锁定总时长。</li>
<li>Innodb_row_lock_time_avg（重要），每次等待所花平均时间。</li>
<li>Innodb_row_lock_time_max，从系统启动到现在等待最长的一次花费时间。</li>
<li>Innodb_row_lock_waits（重要），从系统启动到现在总共等待的次数。</li>
</ul>
<p><strong>MySQL 事务隔离级别</strong></p>
<p>前面讲的死锁是因为并发访问数据库造成。当多个事务同时访问数据库，做并发操作的时候会发生以下问题。</p>
<p><strong>脏读（dirty read），</strong>一个事务在处理过程中，读取了另外一个事务未提交的数据。未提交的数据称之为脏数据。</p>
<p><img src="/2020/02/12/MySQL增删改查都会用到什么锁/image-20200212155822655.png" alt="image-20200212155822655"></p>
<center><em>脏读例子</em></center>



<p><strong>不可重复读（non-repeatable read），</strong>在事务范围内，多次查询某条记录，每次得到不同的结果。</p>
<p>第一个事务中的两次读取数据之间，由于第二个事务的修改，第一个事务两次读到的数据可能不一样。</p>
<p><img src="/2020/02/12/MySQL增删改查都会用到什么锁/image-20200212155748878.png" alt="image-20200212155748878"></p>
<center><em>不可重复读例子</em></center>

<p><strong>幻读（phantom read），</strong>是事务非独立执行时发生的一种现象。</p>
<p><img src="/2020/02/12/MySQL增删改查都会用到什么锁/image-20200212155718409.png" alt="image-20200212155718409"></p>
<p><img src="/2020/02/12/MySQL增删改查都会用到什么锁/image-20200212155728846.png" alt="image-20200212155728846"></p>
<center><em>幻读的例子</em></center>

<p>在同一时间点，数据库允许多个并发事务，同时对数据进行读写操作，会造成数据不一致性。</p>
<p><img src="/2020/02/12/MySQL增删改查都会用到什么锁/640-1581493477920.webp" alt="img"></p>
<center><em>四种隔离级别，解决事务并发问题对照图</em></center>

<p>隔离性就是用来防止这种数据不一致的。事务隔离根据级别不同，从低到高包括：</p>
<ul>
<li><p><strong>读未提交（read uncommitted）：</strong>它是最低的事务隔离级别，一个事务还没提交时，它做的变更就能被别的事务看到。有脏读的可能性。</p>
</li>
<li><p><strong>读提交（read committed）：</strong>保证一个事物提交后才能被另外一个事务读取。另外一个事务不能读取该事物未提交的数据。可避免脏读的发生，但是可能会造成不可重复读。</p>
</li>
<li><p><strong>可重复读（repeatable read MySQL 默认方式）：</strong>多次读取同一范围的数据会返回第一次查询的快照，即使其他事务对该数据做了更新修改。事务在执行期间看到的数据前后必须是一致的。</p>
</li>
<li><p><strong>串行化（serializable）：</strong>是最可靠的事务隔离级别。“写”会加“排他锁”，“读”会加“共享锁”。</p>
<p>当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，所以事务执行是串行的。可避免脏读、不可重复读、幻读。</p>
</li>
</ul>
<h3 id="InnoDB-优化建议"><a href="#InnoDB-优化建议" class="headerlink" title="InnoDB 优化建议"></a>InnoDB 优化建议</h3><p>从锁机制的实现方面来说，InnoDB 的行级锁带来的性能损耗可能比表级锁要高一点，但在并发方面的处理能力远远优于 MyISAM 的表级锁。这也是大多数公司的 MySQL 都是使用 InnoDB 模式的原因。</p>
<p>但是，InnoDB 也有脆弱的一面，下面提出几个优化建议供大家参考：</p>
<ul>
<li>尽可能让数据检索通过索引完成，避免 InnoDB 因为无法通过索引加行锁，而导致升级为表锁的情况。换句话说就是，多用行锁，少用表锁。</li>
<li>加索引的时候尽量准确，避免造成不必要的锁定影响其他查询。</li>
<li>尽量减少给予范围的数据检索（间隙锁），避免因为间隙锁带来的影响，锁定了不该锁定的记录。</li>
<li>尽量控制事务的大小，减少锁定的资源量和锁定时间。</li>
<li>尽量使用较低级别的事务隔离，减少 MySQL 因为事务隔离带来的成本。</li>
</ul>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><img src="/2020/02/12/MySQL增删改查都会用到什么锁/image-20200212155627181.png" alt="image-20200212155627181"></p>
<center><em>MySQL 数据库锁的思维导图</em></center>



<p>MySQL 的锁主要分为表级锁和行级锁。MyISAM 引擎使用的是表级锁，针对表级的共享锁和排他锁，可以通过 concurrent_insert 和 low_priority_updates 参数来优化。</p>
<p>InnoDB 支持表锁和行锁，根据索引来判断如何选择。行锁有，行共享锁和行排他锁；表锁有，意向共享锁，意向排他锁，表锁是系统自己加上的；锁范围的是间隙锁。遇到死锁，我们如何检测，恢复以及如何避免。</p>
<p>MySQL 有四个事务级别分别是，<strong><em>读未提交，读提交，可重复读，串行化</em></strong>。他们的隔离级别依次升高。</p>
<p>通过隔离级别的设置，可以避免，脏读，不可重复读和幻读的情况。最后，对于使用比较多的 InnoDB 引擎，提出了一些优化建议。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>锁</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA实用的服务异常处理指南</title>
    <url>/2020/02/12/JAVA%E5%AE%9E%E7%94%A8%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="服务异常的处理流程"><a href="#服务异常的处理流程" class="headerlink" title="服务异常的处理流程"></a>服务异常的处理流程</h1><p><img src="/2020/02/12/JAVA实用的服务异常处理指南/0ce47abcae0d474bb5bf9ebc993e6ad3.jpeg" alt="img"></p>
<h1 id="负载"><a href="#负载" class="headerlink" title="负载"></a>负载</h1><h2 id="查看机器-cpu-的负载"><a href="#查看机器-cpu-的负载" class="headerlink" title="查看机器 cpu 的负载"></a>查看机器 cpu 的负载</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top -b -n 1 |grep java|awk <span class="string">'&#123;print "VIRT:"$5,"RES:"$6,"cpu:"$9"%","mem:"$10"%"&#125;'</span></span><br></pre></td></tr></table></figure>
<h2 id="查找-cpu-占用率高的线程"><a href="#查找-cpu-占用率高的线程" class="headerlink" title="查找 cpu 占用率高的线程"></a>查找 cpu 占用率高的线程</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top -p 25603 -H</span><br><span class="line"><span class="built_in">printf</span> 0x%x 25842</span><br><span class="line">jstack 25603 | grep 0x64f2</span><br><span class="line">cat /proc/interrupts</span><br></pre></td></tr></table></figure>
<p>（1）CPU<br>（2）Memory<br>（3）IO<br>（4）Network</p>
<p>可以从以下几个方面监控CPU的信息：<br>（1）中断；<br>（2）上下文切换；<br>（3）可运行队列；<br>（4）CPU 利用率</p>
<h1 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h1><h2 id="系统内存"><a href="#系统内存" class="headerlink" title="系统内存"></a>系统内存</h2><p>free 命令<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@server ~]<span class="comment"># free</span></span><br><span class="line"></span><br><span class="line">             total       used       free     shared    buffers     cached</span><br><span class="line">Mem:       3266180    3250000      10000          0     201000    3002000</span><br><span class="line">-/+ buffers/cache:      47000    3213000</span><br><span class="line">Swap:      2048276      80160    1968116</span><br></pre></td></tr></table></figure></p>
<p>这里的默认显示单位是kb。<br>各项指标解释</p>
<ul>
<li>total:总计物理内存的大小。</li>
<li>used:已使用多大。</li>
<li>free:可用有多少。</li>
<li>Shared:多个进程共享的内存总额。</li>
<li>buffers: 磁盘缓存的大小。</li>
<li>cache:磁盘缓存的大小。</li>
<li>-/+ buffers/cached): used:已使用多大，free:可用有多少。</li>
<li>已用内存 = 系统used memory - buffers - cached<br>（47000 = 3250000-201000-3002000）</li>
<li>可用内存 = 系统free memory + buffers + cached<br>（3213000 = 10000+201000+3002000）</li>
</ul>
<h3 id="什么是buffer-cache？"><a href="#什么是buffer-cache？" class="headerlink" title="什么是buffer/cache？"></a>什么是buffer/cache？</h3><ul>
<li>buffer 指 Linux 内存的：Buffer cache，缓冲区缓</li>
<li>cache 指 Linux内存中的：Page cache，页面缓存</li>
</ul>
<p><strong>page cache</strong><br>page cache 主要用来作为<strong>文件系统上的文件数据的缓存</strong>来用，尤其是针对当进程对文件有 read／write 操作的时候。如果你仔细想想的话，作为可以映射文件到内存的系统调用：mmap是不是很自然的也应该用到 page cache？在当前的系统实现里，page cache 也被作为其它文件类型的缓存设备来用，所以事实上 page cache 也负责了大部分的块设备文件的缓存工作。</p>
<p><strong>buffer cache</strong><br>buffer cache 主要用来在<strong>系统对块设备进行读写</strong>的时候，对块进行数据缓存的系统来使用。这意味着某些对块的操作会使用 buffer cache 进行缓存，比如我们在格式化文件系统的时候。一般情况下两个缓存系统是一起配合使用的，比如当我们对一个文件进行写操作的时候，page cache 的内容会被改变，而 buffer cache 则可以用来将 page 标记为不同的缓冲区，并记录是哪一个缓冲区被修改了。这样，内核在后续执行脏数据的回写（writeback）时，就不用将整个 page 写回，而只需要写回修改的部分即可。</p>
<p>在当前的内核中，page cache 是针对内存页的缓存，说白了就是，如果有内存是以page进行分配管理的，都可以使用page cache作为其缓存来管理使用。<br>当然，不是所有的内存都是以页（page）进行管理的，也有很多是针对块（block）进行管理的，这部分内存使用如果要用到 cache 功能，则都集中到buffer cache中来使用。（从这个角度出发，是不是buffer cache改名叫做block cache更好？）然而，也不是所有块（block）都有固定长度，系统上块的长度主要是根据所使用的块设备决定的，而页长度在X86上无论是32位还是64位都是4k。</p>
<h3 id="系统如何回收cache？"><a href="#系统如何回收cache？" class="headerlink" title="系统如何回收cache？"></a>系统如何回收cache？</h3><p>Linux内核会在内存将要耗尽的时候，触发内存回收的工作，以便释放出内存给急需内存的进程使用。一般情况下，这个操作中主要的内存释放都来自于对buffer／cache的释放。尤其是被使用更多的cache空间。既然它主要用来做缓存，只是在内存够用的时候加快进程对文件的读写速度，那么在内存压力较大的情况下，当然有必要清空释放cache，作为free空间分给相关进程使用。所以一般情况下，我们认为buffer/cache空间可以被释放，这个理解是正确的。</p>
<p>但是这种清缓存的工作也并不是没有成本。理解cache是干什么的就可以明白清缓存必须保证cache中的数据跟对应文件中的数据一致，才能对cache进行释放。所以伴随着cache清除的行为的，一般都是系统IO飙高。因为内核要对比cache中的数据和对应硬盘文件上的数据是否一致，如果不一致需要写回，之后才能回收。</p>
<p>在系统中除了内存将被耗尽的时候可以清缓存以外，我们还可以人工触发缓存清除的操作。</p>
<h2 id="进程内存"><a href="#进程内存" class="headerlink" title="进程内存"></a>进程内存</h2><h3 id="进程内存统计"><a href="#进程内存统计" class="headerlink" title="进程内存统计"></a>进程内存统计</h3><p>/proc/[pid]/status<br>通过/proc//status可以查看进程的内存使用情况，包括虚拟内存大小（VmSize），物理内存大小（VmRSS），数据段大小（VmData），栈的大小（VmStk），代码段的大小（VmExe），共享库的代码段大小（VmLib）等等。</p>
<p>cat /proc/[pid]/status</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Name: gedit /*进程的程序名*/</span><br><span class="line">State: S (sleeping) /*进程的状态信息,具体参见http://blog.chinaunix.net/u2/73528/showart_1106510.html*/</span><br><span class="line">Tgid: 9744 /*线程组号*/</span><br><span class="line">Pid: 9744 /*进程pid*/</span><br><span class="line">PPid: 7672 /*父进程的pid*/</span><br><span class="line">TracerPid: 0 /*跟踪进程的pid*/</span><br><span class="line">VmPeak: 60184 kB /*进程地址空间的大小*/</span><br><span class="line">VmSize: 60180 kB /*进程虚拟地址空间的大小reserved_vm：进程在预留或特殊的内存间的物理页*/</span><br><span class="line">VmLck: 0 kB /*进程已经锁住的物理内存的大小.锁住的物理内存不能交换到硬盘*/</span><br><span class="line">VmHWM: 18020 kB /*文件内存映射和匿名内存映射的大小*/</span><br><span class="line">VmRSS: 18020 kB /*应用程序正在使用的物理内存的大小，就是用ps命令的参数rss的值 (rss)*/</span><br><span class="line">VmData: 12240 kB /*程序数据段的大小（所占虚拟内存的大小），存放初始化了的数据*/</span><br><span class="line">VmStk: 84 kB /*进程在用户态的栈的大小*/</span><br><span class="line">VmExe: 576 kB /*程序所拥有的可执行虚拟内存的大小,代码段,不包括任务使用的库 */</span><br><span class="line">VmLib: 21072 kB /*被映像到任务的虚拟内存空间的库的大小*/</span><br><span class="line">VmPTE: 56 kB /*该进程的所有页表的大小*/</span><br><span class="line">Threads: 1 /*共享使用该信号描述符的任务的个数*/</span><br></pre></td></tr></table></figure>
<h3 id="JVM-内存分配"><a href="#JVM-内存分配" class="headerlink" title="JVM 内存分配"></a>JVM 内存分配</h3><p>java内存组成介绍：堆(Heap)和非堆(Non-heap)内存</p>
<p>按照官方的说法：“Java 虚拟机具有一个堆，堆是运行时数据区域，所有类实例和数组的内存均从此处分配。堆是在 Java 虚拟机启动时创建的。”“在JVM中堆之外的内存称为非堆内存(Non-heap memory)”。可以看出JVM主要管理两种类型的内存：堆和非堆。</p>
<p>简单来说堆就是Java代码可及的内存，是留给开发人员使用的；非堆就是JVM留给 自己用的，所以方法区、JVM内部处理或优化所需的内存(如JIT编译后的代码缓存)、每个类结构(如运行时常数池、字段和方法数据)以及方法和构造方法 的代码都在非堆内存中。</p>
<ol>
<li>JVM本身需要的内存，包括其加载的第三方库以及这些库分配的内存</li>
<li>NIO的DirectBuffer是分配的native memory</li>
<li>内存映射文件，包括JVM加载的一些JAR和第三方库，以及程序内部用到的。上面 pmap 输出的内容里，有一些静态文件所占用的大小不在Java的heap里，因此作为一个Web服务器，赶紧把静态文件从这个Web服务器中人移开吧，放到nginx或者CDN里去吧。</li>
<li>JIT， JVM会将Class编译成native代码，这些内存也不会少，如果使用了Spring的AOP，CGLIB会生成更多的类，JIT的内存开销也会随之变大，而且Class本身JVM的GC会将其放到Perm Generation里去，很难被回收掉，面对这种情况，应该让JVM使用ConcurrentMarkSweep GC，并启用这个GC的相关参数允许将不使用的class从Perm Generation中移除， 参数配置： -XX:+UseConcMarkSweepGC -X:+CMSPermGenSweepingEnabled -X:+CMSClassUnloadingEnabled，如果不需要移除而Perm Generation空间不够，可以加大一点： -X:PermSize=256M -X:MaxPermSize=512M</li>
<li>JNI，一些JNI接口调用的native库也会分配一些内存，如果遇到JNI库的内存泄露，可以使用valgrind等内存泄露工具来检测</li>
<li>线程栈，每个线程都会有自己的栈空间，如果线程一多，这个的开销就很明显了</li>
<li>jmap/jstack 采样，频繁的采样也会增加内存占用，如果你有服务器健康监控，记得这个频率别太高，否则健康监控变成致病监控了。</li>
</ol>
<h4 id="方法区"><a href="#方法区" class="headerlink" title="方法区"></a>方法区</h4><p>也称”永久代” 、“非堆”，它用于存储虚拟机加载的类信息、常量、静态变量、是各个线程共享的内存区域。默认最小值为16MB，最大值为64MB，可以通过-XX:PermSize 和 -XX:MaxPermSize 参数限制方法区的大小。</p>
<p>运行时常量池：是方法区的一部分，Class文件中除了有类的版本、字段、方法、接口等描述信息外，还有一项信息是常量池，用于存放编译器生成的各种符号引用，这部分内容将在类加载后放到方法区的运行时常量池中。</p>
<h4 id="虚拟机栈"><a href="#虚拟机栈" class="headerlink" title="虚拟机栈"></a>虚拟机栈</h4><p>描述的是java 方法执行的内存模型：每个方法被执行的时候 都会创建一个“栈帧”用于存储局部变量表(包括参数)、操作栈、方法出口等信息。每个方法被调用到执行完的过程，就对应着一个栈帧在虚拟机栈中从入栈到出栈的过程。声明周期与线程相同，是线程私有的。</p>
<p>局部变量表存放了编译器可知的各种基本数据类型(boolean、byte、char、short、int、float、long、double)、对象引用(引用指针，并非对象本身)，其中64位长度的long和double类型的数据会占用2个局部变量的空间，其余数据类型只占1个。局部变量表所需的内存空间在编译期间完成分配，当进入一个方法时，这个方法需要在栈帧中分配多大的局部变量是完全确定的，在运行期间栈帧不会改变局部变量表的大小空间。</p>
<h4 id="本地方法栈"><a href="#本地方法栈" class="headerlink" title="本地方法栈"></a>本地方法栈</h4><p>与虚拟机栈基本类似，区别在于虚拟机栈为虚拟机执行的java方法服务，而本地方法栈则是为Native方法服务。</p>
<h4 id="堆"><a href="#堆" class="headerlink" title="堆"></a>堆</h4><p>也叫做java 堆、GC堆是java虚拟机所管理的内存中最大的一块内存区域，也是被各个线程共享的内存区域，在JVM启动时创建。该内存区域存放了对象实例及数组(所有new的对象)。其大小通过-Xms(最小值)和-Xmx(最大值)参数设置，-Xms为JVM启动时申请的最小内存，默认为操作系统物理内存的1/64但小于1G，-Xmx为JVM可申请的最大内存，默认为物理内存的1/4但小于1G，默认当空余堆内存小于40%时，JVM会增大Heap到-Xmx指定的大小，可通过-XX:MinHeapFreeRation=来指定这个比列；当空余堆内存大于70%时，JVM会减小heap的大小到-Xms指定的大小，可通过XX:MaxHeapFreeRation=来指定这个比列，对于运行系统，为避免在运行时频繁调整Heap的大小，通常-Xms与-Xmx的值设成一样。</p>
<p>由于现在收集器都是采用分代收集算法，堆被划分为新生代和老年代。新生代主要存储新创建的对象和尚未进入老年代的对象。老年代存储经过多次新生代GC(Minor GC)任然存活的对象。</p>
<h4 id="程序计数器"><a href="#程序计数器" class="headerlink" title="程序计数器"></a>程序计数器</h4><p>是最小的一块内存区域，它的作用是当前线程所执行的字节码的行号指示器，在虚拟机的模型里，字节码解释器工作时就是通过改变这个计数器的值来选取下一条需要执行的字节码指令，分支、循环、异常处理、线程恢复等基础功能都需要依赖计数器完成。</p>
<h4 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h4><p>直接内存并不是虚拟机内存的一部分，也不是Java虚拟机规范中定义的内存区域。jdk1.4中新加入的NIO，引入了通道与缓冲区的IO方式，它可以调用Native方法直接分配堆外内存，这个堆外内存就是本机内存，不会影响到堆内存的大小。</p>
<h2 id="JVM-内存分析"><a href="#JVM-内存分析" class="headerlink" title="JVM 内存分析"></a>JVM 内存分析</h2><h3 id="查看-JVM-堆内存情况"><a href="#查看-JVM-堆内存情况" class="headerlink" title="查看 JVM 堆内存情况"></a>查看 JVM 堆内存情况</h3><p>jmap -heap [pid]</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@server ~]$ jmap -heap 837</span><br><span class="line">Attaching to process ID 837, please <span class="built_in">wait</span>...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 24.71-b01</span><br><span class="line"></span><br><span class="line">using thread-local object allocation.</span><br><span class="line">Parallel GC with 4 thread(s)//GC 方式</span><br><span class="line"></span><br><span class="line">Heap Configuration: //堆内存初始化配置</span><br><span class="line">   MinHeapFreeRatio = 0 //对应jvm启动参数-XX:MinHeapFreeRatio设置JVM堆最小空闲比率(default 40)</span><br><span class="line">   MaxHeapFreeRatio = 100 //对应jvm启动参数 -XX:MaxHeapFreeRatio设置JVM堆最大空闲比率(default 70)</span><br><span class="line">   MaxHeapSize      = 2082471936 (1986.0MB) //对应jvm启动参数-XX:MaxHeapSize=设置JVM堆的最大大小</span><br><span class="line">   NewSize          = 1310720 (1.25MB)//对应jvm启动参数-XX:NewSize=设置JVM堆的‘新生代’的默认大小</span><br><span class="line">   MaxNewSize       = 17592186044415 MB//对应jvm启动参数-XX:MaxNewSize=设置JVM堆的‘新生代’的最大大小</span><br><span class="line">   OldSize          = 5439488 (5.1875MB)//对应jvm启动参数-XX:OldSize=&lt;value&gt;:设置JVM堆的‘老生代’的大小</span><br><span class="line">   NewRatio         = 2 //对应jvm启动参数-XX:NewRatio=:‘新生代’和‘老生代’的大小比率</span><br><span class="line">   SurvivorRatio    = 8 //对应jvm启动参数-XX:SurvivorRatio=设置年轻代中Eden区与Survivor区的大小比值 </span><br><span class="line">   PermSize         = 21757952 (20.75MB)  //对应jvm启动参数-XX:PermSize=&lt;value&gt;:设置JVM堆的‘永生代’的初始大小</span><br><span class="line">   MaxPermSize      = 85983232 (82.0MB)//对应jvm启动参数-XX:MaxPermSize=&lt;value&gt;:设置JVM堆的‘永生代’的最大大小</span><br><span class="line">   G1HeapRegionSize = 0 (0.0MB)</span><br><span class="line"></span><br><span class="line">Heap Usage://堆内存使用情况</span><br><span class="line">PS Young Generation</span><br><span class="line">Eden Space://Eden区内存分布</span><br><span class="line">   capacity = 33030144 (31.5MB)//Eden区总容量</span><br><span class="line">   used     = 1524040 (1.4534378051757812MB)  //Eden区已使用</span><br><span class="line">   free     = 31506104 (30.04656219482422MB)  //Eden区剩余容量</span><br><span class="line">   4.614088270399305% used //Eden区使用比率</span><br><span class="line">From Space:  //其中一个Survivor区的内存分布</span><br><span class="line">   capacity = 5242880 (5.0MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 5242880 (5.0MB)</span><br><span class="line">   0.0% used</span><br><span class="line">To Space:  //另一个Survivor区的内存分布</span><br><span class="line">   capacity = 5242880 (5.0MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 5242880 (5.0MB)</span><br><span class="line">   0.0% used</span><br><span class="line">PS Old Generation //当前的Old区内存分布</span><br><span class="line">   capacity = 86507520 (82.5MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 86507520 (82.5MB)</span><br><span class="line">   0.0% used</span><br><span class="line">PS Perm Generation//当前的 “永生代” 内存分布</span><br><span class="line">   capacity = 22020096 (21.0MB)</span><br><span class="line">   used     = 2496528 (2.3808746337890625MB)</span><br><span class="line">   free     = 19523568 (18.619125366210938MB)</span><br><span class="line">   11.337498256138392% used</span><br><span class="line"></span><br><span class="line">670 interned Strings occupying 43720 bytes.</span><br></pre></td></tr></table></figure>
<p>关于这里的几个generation网上资料一大把就不细说了，这里算一下求和可以得知前者总共给Java环境分配了644M的内存，而ps输出的VSZ和RSS分别是7.4G和2.9G，这到底是怎么回事呢？<br>前面jmap输出的内容里，MaxHeapSize 是在命令行上配的，-Xmx4096m，这个java程序可以用到的最大堆内存。<br>VSZ是指已分配的线性空间大小，这个大小通常并不等于程序实际用到的内存大小，产生这个的可能性很多，比如内存映射，共享的动态库，或者向系统申请了更多的堆，都会扩展线性空间大小，要查看一个进程有哪些内存映射，可以使用 pmap 命令来查看：<br>pmap -x [pid]</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@server ~]$ pmap -x 837</span><br><span class="line">837:   java</span><br><span class="line">Address           Kbytes     RSS   Dirty Mode   Mapping</span><br><span class="line">0000000040000000      36       4       0 r-x--  java</span><br><span class="line">0000000040108000       8       8       8 rwx--  java</span><br><span class="line">00000000418c9000   13676   13676   13676 rwx--    [ anon ]</span><br><span class="line">00000006fae00000   83968   83968   83968 rwx--    [ anon ]</span><br><span class="line">0000000700000000  527168  451636  451636 rwx--    [ anon ]</span><br><span class="line">00000007202d0000  127040       0       0 -----    [ anon ]</span><br><span class="line">...</span><br><span class="line">...</span><br><span class="line">00007f55ee124000       4       4       0 r-xs-  az.png</span><br><span class="line">00007fff017ff000       4       4       0 r-x--    [ anon ]</span><br><span class="line">ffffffffff600000       4       0       0 r-x--    [ anon ]</span><br><span class="line">----------------  ------  ------  ------</span><br><span class="line">total kB         7796020 3037264 3023928</span><br></pre></td></tr></table></figure>
<p>这里可以看到很多anon，这些表示这块内存是由mmap分配的。</p>
<p>RSZ是Resident Set Size，常驻内存大小，即进程实际占用的物理内存大小， 在现在这个例子当中，RSZ和实际堆内存占用差了2.3G，这2.3G的内存组成分别为：</p>
<h3 id="查看-JVM-堆各个分区的内存情况"><a href="#查看-JVM-堆各个分区的内存情况" class="headerlink" title="查看 JVM 堆各个分区的内存情况"></a>查看 JVM 堆各个分区的内存情况</h3><p>jstat -gcutil [pid]</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@server ~]$ jstat -gcutil 837 1000 20</span><br><span class="line">  S0     S1     E      O      P     YGC     YGCT    FGC    FGCT     GCT   </span><br><span class="line">  0.00  80.43  24.62  87.44  98.29   7101  119.652    40   19.719  139.371</span><br><span class="line">  0.00  80.43  33.14  87.44  98.29   7101  119.652    40   19.719  139.371</span><br></pre></td></tr></table></figure>
<h3 id="分析-JVM-堆内存中的对象"><a href="#分析-JVM-堆内存中的对象" class="headerlink" title="分析 JVM 堆内存中的对象"></a>分析 JVM 堆内存中的对象</h3><p><strong>查看存活的对象统计</strong><br>jmap -histo:live [pid]</p>
<p><strong>dump 内存</strong><br>jmap -dump:format=b,file=heapDump [pid]</p>
<p>然后用jhat命令可以参看<br>jhat -port 5000 heapDump<br>在浏览器中访问：<a href="http://localhost:5000/" target="_blank" rel="noopener">http://localhost:5000/</a> 查看详细信息</p>
<h1 id="服务指标"><a href="#服务指标" class="headerlink" title="服务指标"></a>服务指标</h1><h2 id="响应时间-RT"><a href="#响应时间-RT" class="headerlink" title="响应时间(RT)"></a>响应时间(RT)</h2><p>响应时间是指系统对请求作出响应的时间。直观上看，这个指标与人对软件性能的主观感受是非常一致的，因为它完整地记录了整个计算机系统处理请求的时间。由于一个系统通常会提供许多功能，而不同功能的处理逻辑也千差万别，因而不同功能的响应时间也不尽相同，甚至同一功能在不同输入数据的情况下响应时间也不相同。所以，在讨论一个系统的响应时间时，人们通常是指该系统所有功能的平均时间或者所有功能的最大响应时间。当然，往往也需要对每个或每组功能讨论其平均响应时间和最大响应时间。</p>
<p>对于单机的没有并发操作的应用系统而言，人们普遍认为响应时间是一个合理且准确的性能指标。需要指出的是，响应时间的绝对值并不能直接反映软件的性能的高低，软件性能的高低实际上取决于用户对该响应时间的接受程度。对于一个游戏软件来说，响应时间小于100毫秒应该是不错的，响应时间在1秒左右可能属于勉强可以接受，如果响应时间达到3秒就完全难以接受了。而对于编译系统来说，完整编译一个较大规模软件的源代码可能需要几十分钟甚至更长时间，但这些响应时间对于用户来说都是可以接受的。</p>
<h2 id="吞吐量-Throughput"><a href="#吞吐量-Throughput" class="headerlink" title="吞吐量(Throughput)"></a>吞吐量(Throughput)</h2><p>吞吐量是指系统在单位时间内处理请求的数量。对于无并发的应用系统而言，吞吐量与响应时间成严格的反比关系，实际上此时吞吐量就是响应时间的倒数。前面已经说过，对于单用户的系统，响应时间（或者系统响应时间和应用延迟时间）可以很好地度量系统的性能，但对于并发系统，通常需要用吞吐量作为性能指标。</p>
<p>对于一个多用户的系统，如果只有一个用户使用时系统的平均响应时间是t，当有你n个用户使用时，每个用户看到的响应时间通常并不是n×t，而往往比n×t小很多（当然，在某些特殊情况下也可能比n×t大，甚至大很多）。这是因为处理每个请求需要用到很多资源，由于每个请求的处理过程中有许多不走难以并发执行，这导致在具体的一个时间点，所占资源往往并不多。也就是说在处理单个请求时，在每个时间点都可能有许多资源被闲置，当处理多个请求时，如果资源配置合理，每个用户看到的平均响应时间并不随用户数的增加而线性增加。实际上，不同系统的平均响应时间随用户数增加而增长的速度也不大相同，这也是采用吞吐量来度量并发系统的性能的主要原因。一般而言，吞吐量是一个比较通用的指标，两个具有不同用户数和用户使用模式的系统，如果其最大吞吐量基本一致，则可以判断两个系统的处理能力基本一致。</p>
<h2 id="并发用户数"><a href="#并发用户数" class="headerlink" title="并发用户数"></a>并发用户数</h2><p>并发用户数是指系统可以同时承载的正常使用系统功能的用户的数量。与吞吐量相比，并发用户数是一个更直观但也更笼统的性能指标。实际上，并发用户数是一个非常不准确的指标，因为用户不同的使用模式会导致不同用户在单位时间发出不同数量的请求。一网站系统为例，假设用户只有注册后才能使用，但注册用户并不是每时每刻都在使用该网站，因此具体一个时刻只有部分注册用户同时在线，在线用户就在浏览网站时会花很多时间阅读网站上的信息，因而具体一个时刻只有部分在线用户同时向系统发出请求。这样，对于网站系统我们会有三个关于用户数的统计数字：注册用户数、在线用户数和同时发请求用户数。由于注册用户可能长时间不登陆网站，使用注册用户数作为性能指标会造成很大的误差。而在线用户数和同事发请求用户数都可以作为性能指标。相比而言，以在线用户作为性能指标更直观些，而以同时发请求用户数作为性能指标更准确些。</p>
<h2 id="QPS每秒查询率-Query-Per-Second"><a href="#QPS每秒查询率-Query-Per-Second" class="headerlink" title="QPS每秒查询率(Query Per Second)"></a>QPS每秒查询率(Query Per Second)</h2><p>每秒查询率QPS是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准，在因特网上，作为域名系统服务器的机器的性能经常用每秒查询率来衡量。对应fetches/sec，即每秒的响应请求数，也即是最大吞吐能力。</p>
<p>从以上概念来看吞吐量和响应时间是衡量系统性能的重要指标，QPS虽然和吞吐量的计量单位不同，但应该是成正比的，任何一个指标都可以含量服务器的并行处理能力。当然Throughput更关心数据量，QPS更关心处理笔数。</p>
<h2 id="CPU利用率"><a href="#CPU利用率" class="headerlink" title="CPU利用率"></a>CPU利用率</h2><p>CPU Load Average &lt; CPU个数 <em>核数</em> 0.7</p>
<p><strong>Context Switch Rate</strong><br>就是Process（Thread）的切换，如果切换过多，会让CPU忙于切换，也会导致影响吞吐量。《高性能服务器架构 》这篇文章的第2节就是说的是这个问题的。究竟多少算合适？google了一大圈，没有一个确切的解释。Context Switch大体上由两个部分组成：中断和进程(包括线程)切换，一次中断（Interrupt）会引起一次切换，进程（线程）的创建、激活之类的也会引起一次切换。CS的值也和TPS（Transaction Per Second）相关的，假设每次调用会引起N次CS，那么就可以得出</p>
<p>Context Switch Rate = Interrupt Rate + TPS* N</p>
<p>CSR减掉IR，就是进程/线程的切换，假如主进程收到请求交给线程处理，线程处理完毕归还给主进程，这里就是2次切换。也可以用CSR、IR、TPS的值代入公式中，得出每次事物导致的切换数。因此，要降低CSR，就必须在每个TPS引起的切换上下功夫，只有N这个值降下去，CSR就能降低，理想情况下N=0，但是无论如何如果N &gt;= 4，则要好好检查检查。另外网上说的CSR&lt;5000，我认为标准不该如此单一。</p>
<p>这三个指标在 LoadRunner 中可以监控到；另外，在 linux 中，也可以用 vmstat 查看r（Load Arerage），in（Interrupt）和cs（Context Switch）</p>
<h1 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h1><ul>
<li>uptime</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">uptime</span><br><span class="line">  08:21:34 up 36 min,  2 users,  load average: 0.00, 0.00, 0.00</span><br><span class="line"> </span><br><span class="line"><span class="comment">#当前服务器时间：    08:21:34</span></span><br><span class="line"><span class="comment">#当前服务器运行时长  36 min</span></span><br><span class="line"><span class="comment">#当前用户数          2 users</span></span><br><span class="line"><span class="comment">#当前的负载均衡      load average  0.00, 0.00, 0.00，分别取1min,5min,15min的均值</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>dmesg</p>
<p>dmesg命令用于显示开机信息。</p>
<p>kernel会将开机信息存储在ring buffer中。您若是开机时来不及查看信息，可利用dmesg来查看。开机信息亦保存在/var/log目录中，名称为dmesg的文件里。</p>
<h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dmesg [-cn][-s &lt;缓冲区大小&gt;]</span><br></pre></td></tr></table></figure>
<p><strong>参数说明</strong>：</p>
<ul>
<li>-c 　显示信息后，清除ring buffer中的内容。</li>
<li>-s&lt;缓冲区大小&gt; 　预设置为8196，刚好等于ring buffer的大小。</li>
<li>-n 　设置记录信息的层级。</li>
</ul>
</li>
<li><p>top<br>查看进程活动状态以及一些系统状况</p>
</li>
<li><p>vmstat<br>查看系统状态、硬件和系统信息等</p>
</li>
<li><p>iostat<br>查看CPU 负载，硬盘状况</p>
</li>
<li><p>sar<br>综合工具，查看系统状况</p>
</li>
<li><p>mpstat<br>查看多处理器状况</p>
</li>
<li><p>netstat<br>查看网络状况</p>
</li>
<li><p>iptraf<br>实时网络状况监测</p>
</li>
<li><p>tcpdump<br>抓取网络数据包，详细分析</p>
</li>
<li><p>mpstat<br>查看多处理器状况</p>
</li>
<li><p>tcptrace<br>数据包分析工具</p>
</li>
<li><p>netperf<br>网络带宽工具</p>
</li>
<li><p>dstat<br>综合工具，综合了 vmstat, iostat, ifstat, netstat 等多个信息</p>
</li>
</ul>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ol>
<li><a href="http://tmq.qq.com/2016/07/it-is-necessary-to-know-the-background-performance-test/" target="_blank" rel="noopener">http://tmq.qq.com/2016/07/it-is-necessary-to-know-the-background-performance-test/</a></li>
<li><a href="https://www.ibm.com/developerworks/java/library/j-nativememory-linux/" target="_blank" rel="noopener">https://www.ibm.com/developerworks/java/library/j-nativememory-linux/</a></li>
<li><a href="http://www.oracle.com/technetwork/java/javase/index-137495.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/index-137495.html</a></li>
<li><a href="http://www.hollischuang.com/archives/303" target="_blank" rel="noopener">http://www.hollischuang.com/archives/303</a></li>
</ol>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>异常处理</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统基础概念简述</title>
    <url>/2020/02/11/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5%E7%AE%80%E8%BF%B0/</url>
    <content><![CDATA[<h2 id="操作系统概念"><a href="#操作系统概念" class="headerlink" title="操作系统概念"></a>操作系统概念</h2><p>大部分操作系统提供了特定的基础概念和抽象，例如进程、地址空间、文件等，它们是需要理解的核心内容。下面我们会简要介绍一些基本概念，为了说明这些概念，我们会不时的从 <code>UNIX</code> 中提出示例，相同的示例也会存在于其他系统中，我们后面会进行介绍。</p>
<h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><p>操作系统一个很关键的概念就是 <code>进程(Process)</code>。进程的本质就是操作系统执行的一个程序。与每个进程相关的是<code>地址空间(address space)</code>，这是从某个最小值的存储位置(通常是零)到某个最大值的存储位置的列表。在这个地址空间中，进程可以进行读写操作。地址空间中存放有可执行程序，程序所需要的数据和它的栈。与每个进程相关的还有资源集，通常包括<code>寄存器(registers)</code>（寄存器一般包括<code>程序计数器(program counter)</code>和<code>堆栈指针(stack pointer)</code>）、打开文件的清单、突发的报警、有关的进程清单和其他需要执行程序的信息。你可以把进程看作是容纳运行一个程序所有信息的一个容器。</p>
<p>对进程建立一种直观感觉的方式是考虑建立一种多程序的系统。考虑下面这种情况：用户启动一个视频编辑程序，指示它按照某种格式转换视频，然后再去浏览网页。同时，一个检查电子邮件的后台进程被唤醒并开始运行，这样，我们目前就会有三个活动进程：视频编辑器、Web 浏览器和电子邮件接收程序。操作系统周期性的挂起一个进程然后启动运行另一个进程，这可能是由于过去一两秒钟程序用完了 CPU 分配的时间片，而 CPU 转而运行另外的程序。</p>
<p>像这样暂时中断进程后，下次应用程序在此启动时，必须要恢复到与中断时刻相同的状态，这在我们用户看起来是习以为常的事情，但是操作系统内部却做了巨大的事情。<strong>这就像和足球比赛一样，一场完美精彩的比赛是可以忽略裁判的存在的</strong>。这也意味着在挂起时该进程的所有信息都要被保存下来。例如，进程可能打开了多个文件进行读取。与每个文件相关联的是提供当前位置的指针（即下一个需要读取的字节或记录的编号）。当进程被挂起时，必须要保存这些指针，以便在重新启动进程后执行的 <code>read</code>调用将能够正确的读取数据。在许多操作系统中，与一个进程有关的所有信息，除了该进程自身地址空间的内容以外，均存放在操作系统的一张表中，称为 <code>进程表(process table)</code>，进程表是数组或者链表结构，当前存在每个进程都要占据其中的一项。</p>
<p>所以，一个挂起的进程包括：进程的地址空间（往往称作<code>磁芯映像</code>， core image，纪念过去的磁芯存储器），以及对应的进程表项（其中包括寄存器以及稍后启动该进程所需要的许多其他信息）。</p>
<p>与进程管理有关的最关键的系统调用往往是决定着进程的创建和终止的系统调用。考虑一个典型的例子，有一个称为 <code>命令解释器(command interpreter)</code> 或 <code>shell</code> 的进程从终端上读取命令。此时，用户刚键入一条命令要求编译一个程序。shell 必须先创建一个新进程来执行编译程序，当编译程序结束时，它执行一个系统调用来终止自己的进程。</p>
<p>如果一个进程能够创建一个或多个进程（称为<code>子进程</code>），而且这些进程又可以创建子进程，则很容易找到进程数，如下所示</p>
<p><img src="/2020/02/11/操作系统基础概念简述/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTUxNTExMS8yMDIwMDIvMTUxNTExMS0yMDIwMDIxMDExNDgwNDc2MS05Mjg5OTEzMTUucG5n.jpg" alt="img"></p>
<p>上图表示一个进程树的示意图，进程 A 创建了两个子进程 B 和进程 C，子进程 B 又创建了三个子进程 D、E、F。</p>
<p>合作完成某些作业的相关进程经常需要彼此通信来完成作业，这种通信称为<code>进程间通信(interprocess communication)</code>。我们在后面会探讨进程间通信。</p>
<p>其他可用的进程系统调用包括：申请更多的内存（或释放不再需要的内存），等待一个子进程结束，用另一个程序覆盖该程序。</p>
<p>有时，需要向一个正在运行的进程传递信息，而该进程并没有等待接收信息。例如，一个进程通过网络向另一台机器上的进程发送消息进行通信。为了保证一条消息或消息的应答不丢失。发送者要求它所在的操作系统在指定的若干秒后发送一个通知，这样如果对方尚未收到确认消息就可以进行重新发送。在设定该定时器后，程序可以继续做其他工作。</p>
<p>在限定的时间到达后，操作系统会向进程发送一个 <code>警告信号(alarm signal)</code>。这个信号引起该进程暂时挂起，无论该进程正在做什么，系统将其寄存器的值保存到堆栈中，并开始重新启动一个特殊的信号处理程，比如重新发送可能丢失的消息。这些信号是软件模拟的硬件中断，除了定时器到期之外，该信号可以通过各种原因产生。许多由硬件检测出来的陷阱，如执行了非法指令或使用了无效地址等，也被转换成该信号并交给这个进程。</p>
<p>系统管理器授权每个进程使用一个给定的 <code>UID(User IDentification)</code>。每个启动的进程都会有一个操作系统赋予的 UID，子进程拥有与父进程一样的 UID。用户可以是某个组的成员，每个组也有一个 <code>GID(Group IDentification)</code>。</p>
<p>在 UNIX 操作系统中，有一个 UID 是 <code>超级用户(superuser)</code>，或者 Windows 中的<code>管理员(administrator)</code>，它具有特殊的权利，可以违背一些保护规则。在大型系统中，只有系统管理员掌握着那些用户可以称为超级用户。</p>
<h3 id="地址空间"><a href="#地址空间" class="headerlink" title="地址空间"></a>地址空间</h3><p>每台计算机都有一些主存用来保存正在执行的程序。在一个非常简单的操作系统中，仅仅有一个应用程序运行在内存中。为了运行第二个应用程序，需要把第一个应用程序移除才能把第二个程序装入内存。</p>
<p>复杂一些的操作系统会允许多个应用程序同时装入内存中运行。为了防止应用程序之间相互干扰（包括操作系统），需要有某种保护机制。虽然此机制是在硬件中实现，但却是由操作系统控制的。</p>
<p>上述观点涉及对计算机主存的管理和保护。另一种同等重要并与存储器有关的内容是管理进程的地址空间。通常，每个进程有一些可以使用的地址集合，典型值从 0 开始直到某个最大值。一个进程可拥有的最大地址空间小于主存。在这种情况下，即使进程用完其地址空间，内存也会有足够的内存运行该进程。</p>
<p>但是，在许多 32 位或 64 位地址的计算机中，分别有 2^32 或 2^64 字节的地址空间。如果一个进程有比计算机拥有的主存还大的地址空间，而且该进程希望使用全部的内存，那该怎么处理？在早期的计算机中是无法处理的。但是现在有了一种<code>虚拟内存</code>的技术，正如前面讲到过的，操作系统可以把部分地址空间装入主存，部分留在磁盘上，并且在需要时来回交换它们。</p>
<h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><p>几乎所有操作系统都支持的另一个关键概念就是文件系统。如前所述，操作系统的一项主要功能是屏蔽磁盘和其他 I/O 设备的细节特性，给程序员提供一个良好、清晰的独立于设备的抽象文件模型。<strong>创建文件、删除文件、读文件和写文件</strong> 都需要系统调用。在文件可以读取之前，必须先在磁盘上定位和打开文件，在文件读过之后应该关闭该文件，有关的系统调用则用于完成这类操作。</p>
<p>为了提供保存文件的地方，大多数个人计算机操作系统都有<code>目录(directory)</code> 的概念，从而可以把文件分组。比如，学生可以给每个课程都创建一个目录，用于保存该学科的资源，另一个目录可以存放电子邮件，再有一个目录可以存放万维网主页。这就需要系统调用创建和删除目录、将已有文件放入目录中，从目录中删除文件等。目录项可以是文件或者目录，目录和目录之间也可以嵌套，这样就产生了文件系统</p>
<p><img src="/2020/02/11/操作系统基础概念简述/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTUxNTExMS8yMDIwMDIvMTUxNTExMS0yMDIwMDIxMDExNTY0MjkzNS0zMTEyNDY1NDQucG5n.jpg" alt="img"></p>
<p>进程和文件层次都是以树状的结构组织，但这两种树状结构有不少不同之处。一般进程的树状结构层次不深（很少超过三层），而文件系统的树状结构要深一些，通常会到四层甚至五层。进程树层次结构是暂时的，通常最多存在几分钟，而目录层次则可能存在很长时间。进程和文件在权限保护方面也是有区别的。一般来说，父进程能控制和访问子进程，而在文件和目录中通常存在一种机制，使文件所有者之外的其他用户也能访问该文件。</p>
<p>目录层结构中的每一个文件都可以通过从目录的顶部即 <code>根目录(Root directory)</code> 开始的<code>路径名(path name)</code> 来确定。绝对路径名包含了从根目录到该文件的所有目录清单，它们之间用斜杠分隔符分开，在上面的大学院系文件系统中，文件 CS101 的路径名是 <code>/Faculty/Prof.Brown/Courses/CS101</code>。最开始的斜杠分隔符代表的是<code>根目录 /</code>，也就是文件系统的绝对路径。</p>
<blockquote>
<p>出于历史原因，Windows 下面的文件系统以 <code>\</code> 来作为分隔符，但是 Linux 会以 <code>/</code> 作为分隔符。</p>
</blockquote>
<p>在上面的系统中，每个进程会有一个 <code>工作目录(working directory)</code>，对于没有以斜线开头给出绝对地址的路径，将在这个工作目录下寻找。如果 <code>/Faculty/Prof.Brown</code> 是工作目录，那么 <code>/Courses/CS101</code> 与上面给定的绝对路径名表示的是同一个文件。进程可以通过使用系统调用指定新的工作目录，从而变更其工作目录。</p>
<p>在读写文件之前，首先需要打开文件，检查其访问权限。若权限许可，系统将返回一个小整数，称作<code>文件描述符(file descriptor)</code>，供后续操作使用。若禁止访问，系统则返回一个错误码。</p>
<p>在 UNIX 中，另一个重要的概念是 <code>特殊文件(special file)</code>。提供特殊文件是为了使 I/O 设备看起来像文件一般。这样，就像使用系统调用读写文件一样，I/O 设备也可以通过同样的系统调用进行读写。特殊文件有两种，一种是<code>块儿特殊文件(block special file)</code> 和 <code>字符特殊文件(character special file)</code>。块特殊文件指那些由可随机存取的块组成的设备，如磁盘等。比如打开一个块特殊文件，然后读取第4块，程序可以直接访问设备的第4块而不必考虑存放在该文件的文件系统结构。类似的，字符特殊文件用于打印机、调制解调器和其他接受或输出字符流的设备。按照惯例，特殊文件保存在 <code>/dev</code> 目录中。例如，/devv/lp 是打印机。</p>
<p>还有一种与进程和文件相关的特性是管道，<code>管道(pipe)</code> 是一种虚文件，他可以连接两个进程</p>
<p><img src="/2020/02/11/操作系统基础概念简述/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTUxNTExMS8yMDIwMDIvMTUxNTExMS0yMDIwMDIxMDExNTY1MjEwMy0zNzQ4Nzc5NzYucG5n.jpg" alt="img"></p>
<p>如果 A 和 B 希望通过管道对话，他们必须提前设置管道。当进程 A 相对进程 B 发送数据时，它把数据写到管道上，相当于管道就是输出文件。这样，在 UNIX 中两个进程之间的通信就非常类似于普通文件的读写了。</p>
<h3 id="保护"><a href="#保护" class="headerlink" title="保护"></a>保护</h3><p>计算机中含有大量的信息，用户希望能够对这些信息中有用而且重要的信息加以保护，这些信息包括电子邮件、商业计划等，管理这些信息的安全性完全依靠操作系统来保证。例如，文件提供授权用户访问。</p>
<p>比如 UNIX 操作系统，UNIX 操作系统通过对每个文件赋予一个 9 位二进制保护代码，对 UNIX 中的文件实现保护。该保护代码有三个位子段，一个用于所有者，一个用于与所有者同组（用户被系统管理员划分成组）的其他成员，一个用于其他人。每个字段中有一位用于读访问，一位用于写访问，一位用于执行访问。这些位就是著名的 <code>rwx位</code>。例如，保护代码<code>rwxr-x--x</code> 的含义是所有者可以读、写或执行该文件，其他的组成员可以读或执行（但不能写）此文件、而其他人可以执行（但不能读和写）该文件。</p>
<h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><p>操作系统是执行系统调用的代码。编辑器、编译器、汇编程序、链接程序、使用程序以及命令解释符等，尽管非常重要，非常有用，但是它们确实不是操作系统的组成部分。下面我们着重介绍一下 UNIX 下的命令提示符，也就是 <code>shell</code>，shell 虽然有用，但它也不是操作系统的一部分，然而它却能很好的说明操作系统很多特性，下面我们就来探讨一下。</p>
<p>shell 有许多种，例如 <strong>sh、csh、ksh 以及 bash</strong>等，它们都支持下面这些功能，最早起的 shell 可以追溯到 sh</p>
<p>用户登录时，会同时启动一个 shell，它以终端作为标准输入和标准输出。首先显示<code>提示符(prompt)</code>，它可能是一个<code>美元符号($)</code>，提示用户 shell 正在等待接收命令，假如用户输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">date</span><br></pre></td></tr></table></figure>
<p>shell 会创建一个子进程，并运行 date 做为子进程。在该子进程运行期间，shell 将等待它结束。在子进程完成时，shell 会显示提示符并等待下一行输入。</p>
<p>用户可以将标准输出重定向到一个文件中，例如</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">date &gt; file</span><br></pre></td></tr></table></figure>
<p>同样的，也可以将标准输入作为重定向</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sort &lt;file1&gt; file2</span><br></pre></td></tr></table></figure>
<p>这会调用 sort 程序来接收 file1 的内容并把结果输出到 file2。</p>
<p>可以将一个应用程序的输出通过管道作为另一个程序的输入，因此有</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cat file1 file2 file3 | sort &gt; /dev/lp</span><br></pre></td></tr></table></figure>
<p>这会调用 cat 应用程序来合并三个文件，将其结果输送到 sort 程序中并按照字典进行排序。sort 应用程序又被重定向到 /dev/lp ，显然这是一个打印操作。</p>
<h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><p>我们已经可以看到操作系统提供了两种功能：为用户提供应用程序抽象和管理计算机资源。对于大部分在应用程序和操作系统之间的交互主要是应用程序的抽象，例如创建、写入、读取和删除文件。计算机的资源管理对用户来说基本上是透明的。因此，用户程序和操作系统之间的接口主要是处理抽象。为了真正理解操作系统的行为，我们必须仔细的分析这个接口。</p>
<p>多数现代操作系统都有功能相同但是细节不同的系统调用，引发操作系统的调用依赖于计算机自身的机制，而且必须用汇编代码表达。<strong>任何单 CPU 计算机一次执行执行一条指令</strong>。如果一个进程在用户态下运行用户程序，例如从文件中读取数据。那么如果想要把控制权交给操作系统控制，那么必须执行一个异常指令或者系统调用指令。操作系统紧接着需要参数检查找出所需要的调用进程。操作系统紧接着进行参数检查找出所需要的调用进程。然后执行系统调用，把控制权移交给系统调用下面的指令。大致来说，系统调用就像是执行了一个特殊的过程调用，但是只有<strong>系统调用能够进入内核态而过程调用则不能进入内核态</strong>。</p>
<p>为了能够了解具体的调用过程，下面我们以 <code>read</code> 方法为例来看一下调用过程。像上面提到的那样，会有三个参数，第一个参数是指定文件、第二个是指向缓冲区、第三个参数是给定需要读取的字节数。就像几乎所有系统调用一样，它通过使用与系统调用相同的名称来调用一个函数库，从而从C程序中调用：read。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">count = <span class="built_in">read</span>(fd,buffer,nbytes);</span><br></pre></td></tr></table></figure>
<p>系统调用在 count 中返回实际读出的字节数。这个值通常与 nbytes 相同，但也可能更小。比如在读过程中遇到了文件尾的情况。</p>
<p>如果系统调用不能执行，不管是因为无效的参数还是磁盘错误，count 的值都会被置成 -1，然后在全局变量 <code>errno</code> 中放入错误信号。程序应该进场检查系统调用的结果以了解是否出错。</p>
<p>系统调用是通过一系列的步骤实现的，为了更清楚的说明这个概念，我们还以 read 调用为例，在准备系统调用前，首先会把参数压入堆栈，如下所示</p>
<p><img src="/2020/02/11/操作系统基础概念简述/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTUxNTExMS8yMDIwMDIvMTUxNTExMS0yMDIwMDIxMDExNTcwNzc2OC01ODY3NTgxNzUucG5n.jpg" alt="img"></p>
<p>C 和 C++ 编译器使用逆序（必须把第一个参数赋值给 printf(格式字符串)，放在堆栈的顶部）。第一个参数和第三个参数都是值调用，但是第二个参数通过引用传递，即传递的是缓冲区的地址（由 &amp; 指示），而不是缓冲的内容。然后是 C 调用系统库的 read 函数，这也是第四步。</p>
<p>在由汇编语言写成的库过程中，一般把系统调用的编号放在操作系统所期望的地方，如寄存器（第五步）。然后执行一个 <code>TRAP</code> 指令，将用户态切换到内核态，并在内核中的一个固定地址开始执行第六步。TRAP 指令实际上与过程调用指令非常相似，它们后面都跟随一个来自远处位置的指令，以及供以后使用的一个保存在栈中的返回地址。</p>
<p>TRAP 指令与过程调用指令存在两个方面的不同</p>
<ul>
<li>TRAP 指令会改变操作系统的状态，由用户态切换到内核态，而过程调用不改变模式</li>
<li>其次，TRAP 指令不能跳转到任意地址上。根据机器的体系结构，要么跳转到一个单固定地址上，或者指令中有一 8 位长的字段，它给定了内存中一张表格的索引，这张表格中含有跳转地址，然后跳转到指定地址上。</li>
</ul>
<p>跟随在 TRAP 指令后的内核代码开始检查系统调用编号，然后<code>dispatch</code>给正确的系统调用处理器，这通常是通过一张由系统调用编号所引用的、指向系统调用处理器的指针表来完成第七步。此时，系统调用处理器运行第八步，一旦系统调用处理器完成工作，控制权会根据 TRAP 指令后面的指令中返回给函数调用库第九步。这个过程接着以通常的过程调用返回的方式，返回到客户应用程序，这是第十步。然后调用完成后，操作系统还必须清除用户堆栈，然后增加<code>堆栈指针(increment stackpointer)</code>，用来清除调用 read 之前压入的参数。从而完成整个 read 调用过程。</p>
<p>在上面的第九步中我们说道，控制可能返回 TRAP 指令后面的指令，把控制权再移交给调用者这个过程中，系统调用会发生阻塞，从而避免应用程序继续执行。这么做是有原因的。例如，如果试图读键盘，此时并没有任何输入，那么调用者就必须被阻塞。在这种情形下，操作系统会检查是否有其他可以运行的进程。这样，当有用户输入 时候，进程会提醒操作系统，然后返回第 9 步继续运行。</p>
<p>下面，我们会列出一些常用的 <code>POSIX</code> 系统调用，POSIX 系统调用大概有 100 多个，它们之中最重要的一些调用见下表</p>
<p><strong>进程管理</strong></p>
<table>
<thead>
<tr>
<th>调用</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>pid = fork()</td>
<td>创建与父进程相同的子进程</td>
</tr>
<tr>
<td>pid = waitpid(pid, &amp;statloc,options)</td>
<td>等待一个子进程终止</td>
</tr>
<tr>
<td>s = execve(name,argv,environp)</td>
<td>替换一个进程的核心映像</td>
</tr>
<tr>
<td>exit(status)</td>
<td>终止进程执行并返回状态</td>
</tr>
</tbody>
</table>
<p><strong>文件管理</strong></p>
<table>
<thead>
<tr>
<th>调用</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>fd = open(file, how,…)</td>
<td>打开一个文件使用读、写</td>
</tr>
<tr>
<td>s = close(fd)</td>
<td>关闭一个打开的文件</td>
</tr>
<tr>
<td>n = read(fd,buffer,nbytes)</td>
<td>把数据从一个文件读到缓冲区中</td>
</tr>
<tr>
<td>n = write(fd,buffer,nbytes)</td>
<td>把数据从缓冲区写到一个文件中</td>
</tr>
<tr>
<td>position = iseek(fd,offset,whence)</td>
<td>移动文件指针</td>
</tr>
<tr>
<td>s = stat(name,&amp;buf)</td>
<td>取得文件状态信息</td>
</tr>
</tbody>
</table>
<p><strong>目录和文件系统管理</strong></p>
<table>
<thead>
<tr>
<th>调用</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>s = mkdir(nname,mode)</td>
<td>创建一个新目录</td>
</tr>
<tr>
<td>s = rmdir(name)</td>
<td>删去一个空目录</td>
</tr>
<tr>
<td>s = link(name1,name2)</td>
<td>创建一个新目录项 name2,并指向 name1</td>
</tr>
<tr>
<td>s = unlink(name)</td>
<td>删去一个目录项</td>
</tr>
<tr>
<td>s = mount(special,name,flag)</td>
<td>安装一个文件系统</td>
</tr>
<tr>
<td>s = umount(special)</td>
<td>卸载一个文件系统</td>
</tr>
</tbody>
</table>
<p><strong>其他</strong></p>
<table>
<thead>
<tr>
<th>调用</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>s = chdir(dirname)</td>
<td>改变工作目录</td>
</tr>
<tr>
<td>s = chmod(name,mode)</td>
<td>修改一个文件的保护位</td>
</tr>
<tr>
<td>s = kill(pid, signal)</td>
<td>发送信号给进程</td>
</tr>
<tr>
<td>seconds = time(&amp;seconds)</td>
<td>获取从 1970 年1月1日至今的时间</td>
</tr>
</tbody>
</table>
<p>上面的系统调用参数中有一些公共部分，例如 pid 系统进程 id，fd 是文件描述符，n 是字节数，position 是在文件中的偏移量、seconds 是流逝时间。</p>
<p>从宏观角度上看，这些系统调所提供的服务确定了多数操作系统应该具有的功能，下面分别来对不同的系统调用进行解释</p>
<h3 id="用于进程管理的系统调用"><a href="#用于进程管理的系统调用" class="headerlink" title="用于进程管理的系统调用"></a>用于进程管理的系统调用</h3><p>在 UNIX 中，<code>fork</code> 是唯一可以在 POSIX 中创建进程的途径，它创建一个原有进程的副本，包括所有的文件描述符、寄存器等内容。在 fork 之后，原有进程以及副本（父与子）就分开了。在 fork 过程中，所有的变量都有相同的值，虽然父进程的数据通过复制给子进程，但是后续对其中任何一个进程的修改不会影响到另外一个。fork 调用会返回一个值，在子进程中该值为 0 ，并且在父进程中等于子进程的 <code>进程标识符(Process IDentified,PID)</code>。使用返回的 PID，就可以看出来哪个是父进程和子进程。</p>
<p>在多数情况下， 在 fork 之后，子进程需要执行和父进程不一样的代码。从终端读取命令，创建一个子进程，等待子进程执行命令，当子进程结束后再读取下一个输入的指令。为了等待子进程完成，父进程需要执行 <code>waitpid</code> 系统调用，父进程会等待直至子进程终止（若有多个子进程的话，则直至任何一个子进程终止）。waitpid 可以等待一个特定的子进程，或者通过将第一个参数设为 -1 的方式，等待任何一个比较老的子进程。当 waitpid 完成后，会将第二个参数 <code>statloc</code> 所指向的地址设置为子进程的退出状态（正常或异常终止以及退出值）。有各种可使用的选项，它们由第三个参数确定。例如，如果没有已经退出的子进程则立刻返回。</p>
<p>那么 shell 该如何使用 fork 呢？在键入一条命令后，shell 会调用 fork 命令创建一个新的进程。这个子进程会执行用户的指令。通过使用 <code>execve</code>系统调用可以实现系统执行，这个系统调用会引起整个核心映像被一个文件所替代，该文件由第一个参数给定。下面是一个简化版的例子说明 fork、waitpid 和 execve 的使用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TRUE 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(TRUE)&#123;											<span class="comment">/* 一直循环下去 */</span></span><br><span class="line">	type_prompt(); 									<span class="comment">/* 在屏幕上显示提示符 */</span></span><br><span class="line">	read_command(command,parameters) 					<span class="comment">/* 从终端读取输入 */</span></span><br><span class="line">	<span class="keyword">if</span>(fork() != <span class="number">0</span>)&#123; 										<span class="comment">/* fork 子进程 */</span></span><br><span class="line">		<span class="comment">/* 父代码 */</span></span><br><span class="line">		waitpid(<span class="number">-1</span>, &amp;status, <span class="number">0</span>);							<span class="comment">/* 等待子进程执行完毕 */</span></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">/* 子代码 */</span></span><br><span class="line">		execve(command,parameters,<span class="number">0</span>)					<span class="comment">/* 执行命令 */</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>一般情况下，execve 有三个参数：将要执行的文件名称，一个指向变量数组的指针，以及一个指向环境数组的指针。这里对这些参数做一个简要的说明。</p>
<p>先看一个 shell 指令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cp file1 file2</span><br></pre></td></tr></table></figure>
<p>此命令把 file1 复制到 file2 文件中，在 shell 执行 fork 之后，子进程定位并执行文件拷贝，并将源文件和目标文件的名称传递给它。</p>
<p>cp 的主程序（以及包含其他大多数 C 程序的主程序）包含声明</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">main(argc,argv,envp)</span><br></pre></td></tr></table></figure>
<p>其中 argc 是命令行中参数数目的计数，包括程序名称。对于上面的例子，<code>argc</code> 是3。第二个参数<code>argv</code> 是数组的指针。该数组的元素 i 是指向该命令行第 i 个字符串的指针。在上面的例子中，argv[0] 指向字符串 cp，argv[1] 指向字符串 file1，argv[2] 指向字符串 file2。main 的第三个参数是指向环境的指针，该环境是一个数组，含有 <code>name = value</code> 的赋值形式，用以将诸如终端类型以及根目录等信息传送给程序。这些变量通常用来确定用户希望如何完成特定的任务（例如，使用默认打印机）。在上面的例子中，没有环境参数传递给 execve ，所以环境变量是 0 ，所以 execve 的第三个参数为 0 。</p>
<p>可能你觉得 execve 过于复杂，这时候我要鼓励一下你，execve 可能是 POSIX 的全部系统调用中最复杂的一个了，其他都比较简单。作为一个简单的例子，我们再来看一下 <code>exit</code> ，这是进程在执行完成后应执行的系统调用。这个系统调用有一个参数，它的退出状态是 0 - 255 之间，它通过 waitpid 系统调用中的 statloc 返回给父级。</p>
<p>UNIX 中的进程将内存划分成三个部分：<code>text segment,文本区</code>，例如程序代码，<code>data segment，数据区</code>，例如变量，<code>stack segment</code>，栈区域。数据向上增长而堆栈向下增长，如下图所示</p>
<p><img src="/2020/02/11/操作系统基础概念简述/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTUxNTExMS8yMDIwMDIvMTUxNTExMS0yMDIwMDIxMDExNTczNzMyOC0xNzYzNDE4MzAxLnBuZw.jpg" alt="img"></p>
<p>上图能说明三个部分的内存分配情况，夹在中间的是空闲区，也就是未分配的区域，堆栈在需要时自动的挤压空闲区域，不过数据段的扩展是显示地通过系统调用 <code>brk</code> 进行的，在数据段扩充后，该系统调用指向一个新地址。但是，这个调用不是 POSIX 标准中定义的，对于存储器的动态分配，鼓励程序员使用 <code>malloc</code> 函数，而 malloc 的内部实现则不是一个适合标准化的主题，因为几乎没有程序员直接使用它。</p>
<h3 id="用于文件管理的系统调用"><a href="#用于文件管理的系统调用" class="headerlink" title="用于文件管理的系统调用"></a>用于文件管理的系统调用</h3><p>许多系统调用都与文件系统有关，要读写一个文件，必须先将其打开。这个系统调用通过绝对路径名或指向工作目录的相对路径名指定要打开文件的名称，而代码 <code>O_RDONLY</code>、 <code>O_WRONLY</code> 或 <code>O_RDWR</code> 的含义分别是只读、只写或者两者都可以，为了创建一个新文件，使用 <code>O_CREATE</code>参数。然后可使用返回的文件描述符进行读写操作。接着，可以使用 close 关闭文件，这个调用使得文件描述符在后续的 open 中被再次使用。</p>
<p>最常用的调用还是 <code>read</code> 和 <code>write</code>，我们再前面探讨过 read 调用，write 具有与 read 相同的参数。</p>
<p>尽管多数程序频繁的读写文件，但是仍有一些应用程序需要能够随机访问一个文件的任意部分。与每个文件相关的是一个指向文件当前位置的指针。在顺序读写时，该指针通常指向要读出（写入）的下一个字节。<code>Iseek</code> 调用可以改变该位置指针的值，这样后续的 read 或 write 调用就可以在文件的任何地方开始。</p>
<p>Iseek 有三个参数，<code>position = iseek(fd,offset,whence)</code>，第一个是文件描述符，第二个是文件位置，第三个是说明该文件位置是相对于文件起始位置，当前位置还是文件的结尾。在修改了指针之后，Iseek 所返回的值是文件中的绝对位置。</p>
<p>UNIX 为每个文件保存了该文件的类型（普通文件、特殊文件、目录等）、大小，最后修改时间以及其他信息，程序可以通过 <code>stat</code> 系统调用查看这些信息。<code>s = stat(name,&amp;buf)</code>，第一个参数指定了被检查的文件；第二个参数是一个指针，该指针指向存放这些信息的结构。对于一个打开的文件而言，fstat 调用完成同样的工作。</p>
<h3 id="用于目录管理的系统调用"><a href="#用于目录管理的系统调用" class="headerlink" title="用于目录管理的系统调用"></a>用于目录管理的系统调用</h3><p>下面我们探讨目录和整个文件系统的系统调用，上面探讨的是和某个文件有关的系统调用。<code>mkdir</code> 和 <code>rmdir</code> 分别用于创建<code>s = mkdir(nname,mode)</code>和删除 <code>s = rmdir(name)</code> 空目录，下一个调用是 <code>s = link(name1,name2)</code> 它的作用是允许同一个文件以两个或者多个名称出现，多数情况下是在不同的目录中使用 link ，下面我们探讨一下 link 是如何工作的</p>
<p><img src="/2020/02/11/操作系统基础概念简述/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTUxNTExMS8yMDIwMDIvMTUxNTExMS0yMDIwMDIxMDEyMzMyNjk3My0xNDEyMzM0ODM5LnBuZw.jpg" alt="img"></p>
<p>图中有两个用户 <code>ast</code> 和 <code>jim</code>，每个用户都有他自己的一个目录和一些文件，如果 ast 要执行一个包含下面系统调用的应用程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">link(<span class="string">"/usr/jim/memo"</span>, <span class="string">"/usr/ast/note"</span>);</span><br></pre></td></tr></table></figure>
<p>jim 中的 memo 文件现在会进入到 ast 的目录中，在 note 名称下。此后，<code>/usr/jim/memo</code>和 <code>/usr/ast/note</code> 会有相同的名称。</p>
<blockquote>
<p>用户目录是保存在 /usr，/user，/home 还是其他位置，都是由本地系统管理员决定的。</p>
</blockquote>
<p>要理解 link 是如何工作的需要清楚 link 做了什么操作。UNIX 中的每个文件都有一个独一无二的版本，也称作 <code>i - number，i-编号</code>，它标示着不同文件的版本。这个 i - 编号是 <code>i-nodes,i-节点</code> 表的索引。每个文件都会表明谁拥有这个文件，这个磁盘块的位置在哪，等等。目录只是一个包含一组（i编号，ASCII名称）对应的文件。UNIX 中的第一个版本中，每个目录项都会有 16 个字节，2 个字节对应 i - 编号和 14 个字节对应其名称。现在需要一个更复杂的结构需要支持长文件名，但是从概念上讲一个目录仍是一系列（i-编号，ASCII 名称）的集合。在上图中，<code>mail</code> 的 i-编号为 16，依此类推。link 只是利用某个已有文件的 i-编号，创建一个新目录项（也许用一个新名称）。在上图 b 中，你会发现有两个相同的 70 i-编号的文件，因此它们需要有相同的文件。如果其中一个使用了 <code>unlink</code> 系统调用的话，其中一个会被移除，另一个将保留。如果两个文件都移除了，则 UNIX 会发现该文件不存在任何没有目录项（i-节点中的一个域记录着指向该文件的目录项），就会把该文件从磁盘中移除。</p>
<p>就像我们上面提到过的那样，<code>mount</code> 系统 <code>s = mount(special,name,flag)</code>调用会将两个文件系统合并为一个。通常的情况是将根文件系统分布在硬盘（子）分区上，并将用户文件分布在另一个（子）分区上，该根文件系统包含常用命令的二进制（可执行）版本和其他使用频繁的文件。然后，用户就会插入可读取的 USB 硬盘。</p>
<p>通过执行 mount 系统调用，USB 文件系统可以被添加到根文件系统中，</p>
<p><img src="/2020/02/11/操作系统基础概念简述/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTUxNTExMS8yMDIwMDIvMTUxNTExMS0yMDIwMDIxMDEyMzMzNzc1My04NzYyOTI4OTgucG5n.jpg" alt="img"></p>
<p>图 a 是安装前的系统文件，图 b 是安装后的系统文件。</p>
<p>如果用 C 语言来执行那就是</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mount(<span class="string">"/dev/sdb0"</span>,<span class="string">"/mnt"</span>,<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>这里，第一个参数是 USB 驱动器 0 的块特殊文件名称，第二个参数是被安装在树中的位置，第三个参数说明将要安装的文件系统是可读写的还是只读的。</p>
<p>当不再需要一个文件系统时，可以使用 umount 移除之。</p>
<h3 id="其他系统调用"><a href="#其他系统调用" class="headerlink" title="其他系统调用"></a>其他系统调用</h3><p>除了进程、文件、目录系统调用，也存在其他系统调用的情况，下面我们来探讨一下。我们可以看到上面其他系统调用只有四种，首先来看第一个 chdir，chdir 调用更改当前工作目录，在调用</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">chdir(<span class="string">"/usr/ast/test"</span>);</span><br></pre></td></tr></table></figure>
<p>后，打开 xyz 文件，会打开 <code>/usr/ast/test/xyz</code> 文件，工作目录的概念消除了总是需要输入长文件名的需要。</p>
<p>在 UNIX 系统中，每个文件都会有保护模式，这个模式会有一个<code>读-写-执行</code>位，它用来区分所有者、组和其他成员。<code>chmod</code> 系统调用提供改变文件模式的操作。例如，要使一个文件除了对所有者之外的用户可读，你可以执行</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">chmod(<span class="string">"file"</span>,<span class="number">0644</span>);</span><br></pre></td></tr></table></figure>
<p><code>kill</code> 系统调用是用户和用户进程发送信号的方式，如果一个进程准备好捕捉一个特定的信号，那么在信号捕捉之前，会运行一个信号处理程序。如果进程没有准备好捕捉特定的信号，那么信号的到来会杀掉该进程（此名字的由来）。</p>
<p>POSIX 定义了若干时间处理的进程。例如，<code>time</code> 以秒为单位返回当前时间，0 对应着 1970 年 1月 1日。在一台 32 位字的计算机中，time 的最大值是 (2^32) - 1秒，这个数字对应 136 年多一点。所以在 2106 年，32 位的 UNIX 系统会发飙。如果读者现在有 32 位 UNIX 系统，建议在 2106 年更换位 64 位操作系统（偷笑～）。</p>
<h3 id="Win-32-API"><a href="#Win-32-API" class="headerlink" title="Win 32 API"></a>Win 32 API</h3><p>上面我们提到的都是 UNIX 系统调用，现在我们来聊聊 Win 32 中的系统调用。Windows 和 UNIX 在各自的编程方式上有着根本的不同。UNIX 程序由执行某些操作或执行其他操作的代码组成，进行系统调用以执行某些服务。Windows 系统则不同，Windows 应用程序通常是由事件驱动的。主程序会等待一些事件发生，然后调用程序去处理。最简单的事件处理是键盘敲击和鼠标滑过，或者是鼠标点击，或者是插入 USB 驱动，然后操作系统调用处理器去处理事件，更新屏幕和更新程序内部状态。这是与 UNIX 不同的设计风格。</p>
<p>当然，Windows 也有系统调用。在 UNIX 中，系统调用（比如 read）和系统调用所使用的调用库（例如 read）几乎是一对一的关系。而在 Windows 中，情况则大不相同。首先，函数库的调用和实际的系统调用几乎是不对应的。微软定义了一系列过程，称为 <code>Win32应用编程接口(Application Programming Interface)</code>，程序员通过这套标准的接口来实现系统调用。这个接口支持从 Windows 95 版本以来所有的 Windows 版本。</p>
<p>Win32 API 调用的数量是非常巨大的，有数千个多。但这些调用并不都是在内核态的模式下运行时，有一些是在用户态的模型下运行。Win32 API 有大量的调用，用来管理视窗、几何图形、文本、字体、滚动条、对话框、菜单以及 GUI 的其他功能。为了使图形子系统在内核态下运行，需要系统调用，否则就只有函数库调用。</p>
<p>我们把关注点放在和 Win32 系统调用中来，我们可以简单看一下 Win32 API 中的系统调用和 UNIX 中有什么不同（并不是所有的系统调用）</p>
<table>
<thead>
<tr>
<th>UNIX</th>
<th>Win32</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td>fork</td>
<td>CreateProcess</td>
<td>创建一个新进程</td>
</tr>
<tr>
<td>waitpid</td>
<td>WaitForSingleObject</td>
<td>等待一个进程退出</td>
</tr>
<tr>
<td>execve</td>
<td>none</td>
<td>CraeteProcess = fork + servvice</td>
</tr>
<tr>
<td>exit</td>
<td>ExitProcess</td>
<td>终止执行</td>
</tr>
<tr>
<td>open</td>
<td>CreateFile</td>
<td>创建一个文件或打开一个已有的文件</td>
</tr>
<tr>
<td>close</td>
<td>CloseHandle</td>
<td>关闭文件</td>
</tr>
<tr>
<td>read</td>
<td>ReadFile</td>
<td>从单个文件中读取数据</td>
</tr>
<tr>
<td>write</td>
<td>WriteFile</td>
<td>向单个文件写数据</td>
</tr>
<tr>
<td>lseek</td>
<td>SetFilePointer</td>
<td>移动文件指针</td>
</tr>
<tr>
<td>stat</td>
<td>GetFileAttributesEx</td>
<td>获得不同的文件属性</td>
</tr>
<tr>
<td>mkdir</td>
<td>CreateDirectory</td>
<td>创建一个新的目录</td>
</tr>
<tr>
<td>rmdir</td>
<td>RemoveDirectory</td>
<td>移除一个空的目录</td>
</tr>
<tr>
<td>link</td>
<td>none</td>
<td>Win32 不支持 link</td>
</tr>
<tr>
<td>unlink</td>
<td>DeleteFile</td>
<td>销毁一个已有的文件</td>
</tr>
<tr>
<td>mount</td>
<td>none</td>
<td>Win32 不支持 mount</td>
</tr>
<tr>
<td>umount</td>
<td>none</td>
<td>Win32 不支持 mount，所以也不支持mount</td>
</tr>
<tr>
<td>chdir</td>
<td>SetCurrentDirectory</td>
<td>切换当前工作目录</td>
</tr>
<tr>
<td>chmod</td>
<td>none</td>
<td>Win32 不支持安全</td>
</tr>
<tr>
<td>kill</td>
<td>none</td>
<td>Win32 不支持信号</td>
</tr>
<tr>
<td>time</td>
<td>GetLocalTime</td>
<td>获取当前时间</td>
</tr>
</tbody>
</table>
<p>上表中是 UNIX 调用大致对应的 Win32 API 系统调用，简述一下上表。<code>CreateProcess</code> 用于创建一个新进程，它把 UNIX 中的 fork 和 execve 两个指令合成一个，一起执行。它有许多参数用来指定新创建进程的性质。Windows 中没有类似 UNIX 中的进程层次，所以不存在父进程和子进程的概念。在进程创建之后，创建者和被创建者是平等的。<code>WaitForSingleObject</code> 用于等待一个事件，等待的事件可以是多种可能的事件。如果有参数指定了某个进程，那么调用者将等待指定的进程退出，这通过 <code>ExitProcess</code> 来完成。</p>
<p>然后是6个文件操作，在功能上和 UNIX 的调用类似，然而在参数和细节上是不同的。和 UNIX 中一样，文件可以打开，读取，写入，关闭。<code>SetFilePointer</code> 和 <code>GetFileAttributesEx</code> 设置文件的位置并取得文件的属性。</p>
<p>Windows 中有目录，目录分别用 <code>CreateDirectory</code> 以及 <code>RemoveDirectory</code>API 调用创建和删除。也有对当前的目录的标记，这可以通过 <code>SetCurrentDirectory</code> 来设置。使用<code>GetLocalTime</code> 可获得当前时间。</p>
<p>Win32 接口中没有文件的链接、文件系统的 mount、umount 和 stat ，当然， Win32 中也有大量 UNIX 中没有的系统调用，特别是对 GUI 的管理和调用。</p>
<h2 id="操作系统结构"><a href="#操作系统结构" class="headerlink" title="操作系统结构"></a>操作系统结构</h2><p>下面我们会探讨操作系统的几种结构，主要包括<strong>单体结构、分层系统、微内核、客户-服务端系统、虚拟机和外核</strong>等。下面以此来探讨一下</p>
<h3 id="单体系统"><a href="#单体系统" class="headerlink" title="单体系统"></a>单体系统</h3><p>到目前为止，在大多数系统中，整个系统在内核态以单一程序的方式运行。整个操作系统是以程序集合来编写的，链接在一块形成一个大的二进制可执行程序。使用此技术时，如果系统中的每个过程都提供了前者所需的一些有用的计算，则它可以自由调用任何其他过程。在单体系统中，调用任何一个所需要的程序都非常高效，但是上千个不受限制的彼此调用往往非常臃肿和笨拙，而且单体系统必然存在单体问题，那就是只要系统发生故障，那么任何系统和应用程序将不可用，这往往是灾难性的。</p>
<p>在单体系统中构造实际目标程序时，会首先编译所有单个过程（或包含这些过程的文件），然后使用系统链接器将它们全部绑定到一个可执行文件中</p>
<p>对于单体系统，往往有下面几种建议</p>
<ul>
<li>需要有一个主程序，用来调用请求服务程序</li>
<li>需要一套服务过程，用来执行系统调用</li>
<li>需要一套服务程序，用来辅助服务过程调用</li>
</ul>
<p>在单体系统中，对于每个系统调用都会有一个服务程序来保障和运行。需要一组实用程序来弥补服务程序需要的功能，例如从用户程序中获取数据。可将各种过程划分为一个三层模型</p>
<p><img src="/2020/02/11/操作系统基础概念简述/image-20200211213916896.png" alt="image-20200211213916896"></p>
<p>除了在计算机初启动时所装载的核心操作系统外，许多操作系统还支持额外的扩展。比如 I/O 设备驱动和文件系统。这些部件可以按需装载。在 UNIX 中把它们叫做 <code>共享库(shared library)</code>，在 Windows 中则被称为 <code>动态链接库(Dynamic Link Library,DLL)</code>。他们的扩展名为 <code>.dll</code>，在 <code>C:\Windows\system32</code> 目录下存在 1000 多个 DLL 文件，所以不要轻易删除 C 盘文件，否则可能就炸了哦。</p>
<h3 id="分层系统"><a href="#分层系统" class="headerlink" title="分层系统"></a>分层系统</h3><p>分层系统使用层来分隔不同的功能单元。每一层只与该层的上层和下层通信。每一层都使用下面的层来执行其功能。层之间的通信通过预定义的固定接口通信。</p>
<p><img src="/2020/02/11/操作系统基础概念简述/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTUxNTExMS8yMDIwMDIvMTUxNTExMS0yMDIwMDIxMDEyMzM1NjcxNy0yMTA5NjEwMTMyLnBuZw.jpg" alt="img"></p>
<p>分层系统是由 <code>E.W.Dijkstar</code> 和他的学生在荷兰技术学院所开发的 THE 系统。</p>
<p>把上面单体系统进一步通用化，就变为了一个层次式结构的操作系统，它的上层软件都是在下层软件的基础之上构建的。该系统分为六层，如下所示</p>
<table>
<thead>
<tr>
<th style="text-align:left">层号</th>
<th style="text-align:left">功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">5</td>
<td style="text-align:left">操作员</td>
</tr>
<tr>
<td style="text-align:left">4</td>
<td style="text-align:left">用户程序</td>
</tr>
<tr>
<td style="text-align:left">3</td>
<td style="text-align:left">输入/输出管理</td>
</tr>
<tr>
<td style="text-align:left">2</td>
<td style="text-align:left">操作员-进程通信</td>
</tr>
<tr>
<td style="text-align:left">1</td>
<td style="text-align:left">存储器和磁鼓管理</td>
</tr>
<tr>
<td style="text-align:left">0</td>
<td style="text-align:left">处理器分配和多道程序编程</td>
</tr>
</tbody>
</table>
<p>处理器在 0 层运行，当中断发生或定时器到期时，由该层完成进程切换；在第 0 层之上，系统由一些连续的进程组成，编写这些进程时不用再考虑在单处理器上多进程运行的细节。内存管理在第 1 层，它分配进程的主存空间。第 1 层软件保证一旦需要访问某一页面，该页面必定已经在内存中，并且在页面不需要的时候将其移出。</p>
<p>第 2 层处理进程与操作员控制台（即用户）之间的通信。第 3 层管理 I/O 设备和相关的信息流缓冲区。第 4 层是用户程序层，用户程序不用考虑进程、内存、控制台或 I/O 设备管理等细节。系统操作员在第 5 层。</p>
<h3 id="微内核"><a href="#微内核" class="headerlink" title="微内核"></a>微内核</h3><p>在分层方式中，设计者要确定在哪里划分 <code>内核-用户</code> 的边界。传统上，所有的层都在内核中，但是这样做没有必要。事实上，尽可能减少内核态中功能可能是更好的做法。因为内核中的错误很难处理，一旦内核态中出错误会拖累整个系统。</p>
<p>所以，为了实现高可靠性，将操作系统划分成小的、层级之间能够更好定义的模块是很有必要的，只有一个模块 — 微内核 — 运行在内核态，其余模块可以作为普通用户进程运行。由于把每个设备驱动和文件系统分别作为普通用户进程，这些模块中的错误虽然会使这些模块崩溃，但是不会使整个系统死机。</p>
<p><code>MINIX 3</code> 是微内核的代表作，它的具体结构如下</p>
<p><img src="/2020/02/11/操作系统基础概念简述/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTUxNTExMS8yMDIwMDIvMTUxNTExMS0yMDIwMDIxMDEyMzQxNDIwMi0xNDMxMTgzMzcyLnBuZw.jpg" alt="img"></p>
<p>在内核的外部，系统的构造有三层，它们都在用户态下运行，最底层是设备驱动器。由于它们都在用户态下运行，所以不能物理的访问 I/O 端口空间，也不能直接发出 I/O 命令。相反，为了能够对 I/O 设备编程，驱动器构建一个结构，指明哪个参数值写到哪个 I/O 端口，并声称一个内核调用，这样就完成了一次调用过程。</p>
<p>位于用户态的驱动程序上面是<code>服务器</code>层，包含有服务器，它们完成操作系统的多数工作。由一个或多个文件服务器管理着文件系统，进程管理器创建、销毁和管理进程。服务器中有一个特殊的服务器称为 <code>再生服务器(reincarnation server)</code>，它的任务就是检查服务器和驱动程序的功能是否正确，一旦检查出来错误，它就会补上去，无需用户干预。这种方式使得系统具有可恢复性，并具有较高的可靠性。</p>
<p>微内核中的内核还具有一种 <code>机制</code> 与 <code>策略</code> 分离的思想。比如系统调度，一个比较简单的调度算法是，对每个进程赋予一个优先级，并让内核执行具有最高优先级的进程。这里，内核机制就是寻找最高的优先级进程并运行。而策略（赋予进程优先级）可以在用户态中的进程完成。在这种模式中，策略和机制是分离的，从而使内核变得更小。</p>
<h3 id="客户-服务器模式"><a href="#客户-服务器模式" class="headerlink" title="客户-服务器模式"></a>客户-服务器模式</h3><p>微内核思想的策略是把进程划分为两类：<code>服务器</code>，每个服务器用来提供服务；<code>客户端</code>，使用这些服务。这个模式就是所谓的 <code>客户-服务器</code>模式。</p>
<p>客户-服务器模式会有两种载体，一种情况是一台计算机既是客户又是服务器，在这种方式下，操作系统会有某种优化；但是普遍情况下是客户端和服务器在不同的机器上，它们通过局域网或广域网连接。</p>
<p><img src="/2020/02/11/操作系统基础概念简述/aHR0cHM6Ly9pbWcyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTUxNTExMS8yMDIwMDIvMTUxNTExMS0yMDIwMDIxMDEyMzQyMjgzNC0xNTk3MjAxOTcucG5n.jpg" alt="img"></p>
<p>客户通过发送消息与服务器通信，客户端并不需要知道这些消息是在本地机器上处理，还是通过网络被送到远程机器上处理。对于客户端而言，这两种情形是一样的：都是发送请求并得到回应。</p>
<p>越来越多的系统，包括家里的 PC，都成为客户端，而在某地运行的大型机器则成为服务器。许多 web 就是以这种方式运行的。一台 PC 向某个服务器请求一个 Web 页面，服务器把 Web 页面返回给客户端，这就是典型的客服-服务器模式</p>
<h2 id="文章参考"><a href="#文章参考" class="headerlink" title="文章参考"></a>文章参考</h2><ol>
<li><a href="第四版https://baike.baidu.com/item/操作系统/192?fr=aladdin">《现代操作系统》</a></li>
<li>《Modern Operating System》forth edition</li>
<li><a href="http://faculty.cs.niu.edu/~hutchins/csci360/hchnotes/psw.htm" target="_blank" rel="noopener">http://faculty.cs.niu.edu/~hutchins/csci360/hchnotes/psw.htm</a></li>
<li><a href="https://www.computerhope.com/jargon/c/clockcyc.htm" target="_blank" rel="noopener">https://www.computerhope.com/jargon/c/clockcyc.htm</a></li>
</ol>
]]></content>
      <categories>
        <category>架构</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>14个Java并发容器</title>
    <url>/2020/02/11/14%E4%B8%AAJava%E5%B9%B6%E5%8F%91%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h1 id="并发容器介绍"><a href="#并发容器介绍" class="headerlink" title="并发容器介绍"></a><strong>并发容器介绍</strong></h1><ol>
<li>ConcurrentHashMap：并发版HashMap</li>
<li>CopyOnWriteArrayList：并发版ArrayList</li>
<li>CopyOnWriteArraySet：并发Set</li>
<li>ConcurrentLinkedQueue：并发队列(基于链表)</li>
<li>ConcurrentLinkedDeque：并发队列(基于双向链表)</li>
<li>ConcurrentSkipListMap：基于跳表的并发Map</li>
<li>ConcurrentSkipListSet：基于跳表的并发Set</li>
<li>ArrayBlockingQueue：阻塞队列(基于数组)</li>
<li>LinkedBlockingQueue：阻塞队列(基于链表)</li>
<li>LinkedBlockingDeque：阻塞队列(基于双向链表)</li>
<li>PriorityBlockingQueue：线程安全的优先队列</li>
<li>SynchronousQueue：读写成对的队列</li>
<li>LinkedTransferQueue：基于链表的数据交换队列</li>
<li>DelayQueue：延时队列</li>
</ol>
<h2 id="1-ConcurrentHashMap-并发版HashMap"><a href="#1-ConcurrentHashMap-并发版HashMap" class="headerlink" title="1.ConcurrentHashMap 并发版HashMap"></a><strong>1.ConcurrentHashMap 并发版HashMap</strong></h2><p>最常见的并发容器之一，可以用作并发场景下的缓存。底层依然是哈希表，但在JAVA 8中有了不小的改变，而JAVA 7和JAVA 8都是用的比较多的版本，因此经常会将这两个版本的实现方式做一些比较（比如面试中）</p>
<p>一个比较大的差异就是，JAVA 7中采用分段锁来减少锁的竞争，JAVA 8中放弃了分段锁，采用CAS，同时为了防止哈希冲突严重时退化成链表（冲突时会在该位置生成一个链表，哈希值相同的对象就链在一起），会在链表长度达到阈值（8）后转换成红黑树（比起链表，树的查询效率更稳定）。</p>
<h2 id="2-CopyOnWriteArrayList-并发版ArrayList"><a href="#2-CopyOnWriteArrayList-并发版ArrayList" class="headerlink" title="2.CopyOnWriteArrayList 并发版ArrayList"></a><strong>2.CopyOnWriteArrayList 并发版ArrayList</strong></h2><p>并发版ArrayList，底层结构也是数组，和ArrayList不同之处在于：当新增和删除元素时会创建一个新的数组，在新的数组中增加或者排除指定对象，最后用新增数组替换原来的数组。</p>
<p>适用场景：由于读操作不加锁，写（增、删、改）操作加锁，因此适用于读多写少的场景。</p>
<p>局限：由于读的时候不会加锁（读的效率高，就和普通ArrayList一样），读取的当前副本，因此可能读取到脏数据。如果介意，建议不用。</p>
<p>看看源码感受下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CopyOnWriteArrayList</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="keyword">implements</span> <span class="title">List</span>&lt;<span class="title">E</span>&gt;, <span class="title">RandomAccess</span>, <span class="title">Cloneable</span>, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  <span class="keyword">final</span> <span class="keyword">transient</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">transient</span> <span class="keyword">volatile</span> Object[] array;</span><br><span class="line">  <span class="comment">// 添加元素，有锁</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lock(); <span class="comment">// 修改时加锁，保证并发安全</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      Object[] elements = getArray(); <span class="comment">// 当前数组</span></span><br><span class="line">      <span class="keyword">int</span> len = elements.length;</span><br><span class="line">      Object[] newElements = Arrays.copyOf(elements, len + <span class="number">1</span>); <span class="comment">// 创建一个新数组，比老的大一个空间</span></span><br><span class="line">      newElements[len] = e; <span class="comment">// 要添加的元素放进新数组</span></span><br><span class="line">      setArray(newElements); <span class="comment">// 用新数组替换原来的数组</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock(); <span class="comment">// 解锁</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 读元素，不加锁，因此可能读取到旧数据</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">get</span><span class="params">(<span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> get(getArray(), index);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="3-CopyOnWriteArraySet-并发Set"><a href="#3-CopyOnWriteArraySet-并发Set" class="headerlink" title="3.CopyOnWriteArraySet 并发Set"></a><strong>3.CopyOnWriteArraySet 并发Set</strong></h2><p>基于CopyOnWriteArrayList实现（内含一个CopyOnWriteArrayList成员变量），也就是说底层是一个数组，意味着每次add都要遍历整个集合才能知道是否存在，不存在时需要插入（加锁）。</p>
<p>适用场景：在CopyOnWriteArrayList适用场景下加一个，集合别太大（全部遍历伤不起）。</p>
<h2 id="4-ConcurrentLinkedQueue-并发队列-基于链表"><a href="#4-ConcurrentLinkedQueue-并发队列-基于链表" class="headerlink" title="4.ConcurrentLinkedQueue 并发队列(基于链表)"></a><strong>4.ConcurrentLinkedQueue 并发队列(基于链表)</strong></h2><p>基于链表实现的并发队列，使用乐观锁(CAS)保证线程安全。因为数据结构是链表，所以理论上是没有队列大小限制的，也就是说添加数据一定能成功。</p>
<h2 id="5-ConcurrentLinkedDeque-并发队列-基于双向链表"><a href="#5-ConcurrentLinkedDeque-并发队列-基于双向链表" class="headerlink" title="5.ConcurrentLinkedDeque 并发队列(基于双向链表)"></a><strong>5.ConcurrentLinkedDeque 并发队列(基于双向链表)</strong></h2><p>基于双向链表实现的并发队列，可以分别对头尾进行操作，因此除了先进先出(FIFO)，也可以先进后出（FILO），当然先进后出的话应该叫它栈了。</p>
<h2 id="6-ConcurrentSkipListMap-基于跳表的并发Map"><a href="#6-ConcurrentSkipListMap-基于跳表的并发Map" class="headerlink" title="6.ConcurrentSkipListMap 基于跳表的并发Map"></a><strong>6.ConcurrentSkipListMap 基于跳表的并发Map</strong></h2><p>SkipList即跳表，跳表是一种空间换时间的数据结构，通过冗余数据，将链表一层一层索引，达到类似二分查找的效果</p>
<p><img src="/2020/02/11/14个Java并发容器/640.webp" alt="img"></p>
<h2 id="7-ConcurrentSkipListSet-基于跳表的并发Set"><a href="#7-ConcurrentSkipListSet-基于跳表的并发Set" class="headerlink" title="7.ConcurrentSkipListSet 基于跳表的并发Set"></a><strong>7.ConcurrentSkipListSet 基于跳表的并发Set</strong></h2><p>类似HashSet和HashMap的关系，ConcurrentSkipListSet里面就是一个ConcurrentSkipListMap，就不细说了。</p>
<h2 id="8-ArrayBlockingQueue-阻塞队列-基于数组"><a href="#8-ArrayBlockingQueue-阻塞队列-基于数组" class="headerlink" title="8.ArrayBlockingQueue 阻塞队列(基于数组)"></a><strong>8.ArrayBlockingQueue 阻塞队列(基于数组)</strong></h2><p>基于数组实现的可阻塞队列，构造时必须制定数组大小，往里面放东西时如果数组满了便会阻塞直到有位置（也支持直接返回和超时等待），通过一个锁ReentrantLock保证线程安全。</p>
<p>用offer操作举个例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayBlockingQueue</span>&lt;<span class="title">E</span>&gt; <span class="keyword">extends</span> <span class="title">AbstractQueue</span>&lt;<span class="title">E</span>&gt;</span></span><br><span class="line"><span class="class">  <span class="keyword">implements</span> <span class="title">BlockingQueue</span>&lt;<span class="title">E</span>&gt;, <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 读写共用此锁，线程间通过下面两个Condition通信</span></span><br><span class="line"><span class="comment">   * 这两个Condition和lock有紧密联系（就是lock的方法生成的）</span></span><br><span class="line"><span class="comment">   * 类似Object的wait/notify</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">final</span> ReentrantLock lock;</span><br><span class="line">  <span class="comment">/** 队列不为空的信号，取数据的线程需要关注 */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Condition notEmpty;</span><br><span class="line">  <span class="comment">/** 队列没满的信号，写数据的线程需要关注 */</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> Condition notFull;</span><br><span class="line">  <span class="comment">// 一直阻塞直到有东西可以拿出来</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> E <span class="title">take</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lockInterruptibly();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">while</span> (count == <span class="number">0</span>)</span><br><span class="line">        notEmpty.await();</span><br><span class="line">      <span class="keyword">return</span> dequeue();</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 在尾部插入一个元素，队列已满时等待指定时间，如果还是不能插入则返回</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">offer</span><span class="params">(E e, <span class="keyword">long</span> timeout, TimeUnit unit)</span></span></span><br><span class="line"><span class="function">  <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">    checkNotNull(e);</span><br><span class="line">    <span class="keyword">long</span> nanos = unit.toNanos(timeout);</span><br><span class="line">    <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">this</span>.lock;</span><br><span class="line">    lock.lockInterruptibly(); <span class="comment">// 锁住</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// 循环等待直到队列有空闲</span></span><br><span class="line">      <span class="keyword">while</span> (count == items.length) &#123;</span><br><span class="line">        <span class="keyword">if</span> (nanos &lt;= <span class="number">0</span>)</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">false</span>;<span class="comment">// 等待超时，返回</span></span><br><span class="line">        <span class="comment">// 暂时放出锁，等待一段时间（可能被提前唤醒并抢到锁，所以需要循环判断条件）</span></span><br><span class="line">        <span class="comment">// 这段时间可能其他线程取走了元素，这样就有机会插入了</span></span><br><span class="line">        nanos = notFull.awaitNanos(nanos);</span><br><span class="line">      &#125;</span><br><span class="line">      enqueue(e);<span class="comment">//插入一个元素</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock(); <span class="comment">//解锁</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>乍一看会有点疑惑，读和写都是同一个锁，那要是空的时候正好一个读线程来了不会一直阻塞吗？</p>
<p>答案就在notEmpty、notFull里，这两个出自lock的小东西让锁有了类似synchronized + wait + notify的功能。</p>
<h2 id="9-LinkedBlockingQueue-阻塞队列-基于链表"><a href="#9-LinkedBlockingQueue-阻塞队列-基于链表" class="headerlink" title="9.LinkedBlockingQueue 阻塞队列(基于链表)"></a><strong>9.LinkedBlockingQueue 阻塞队列(基于链表)</strong></h2><p>基于链表实现的阻塞队列，想比与不阻塞的ConcurrentLinkedQueue，它多了一个容量限制，如果不设置默认为int最大值。</p>
<h2 id="10-LinkedBlockingDeque-阻塞队列-基于双向链表"><a href="#10-LinkedBlockingDeque-阻塞队列-基于双向链表" class="headerlink" title="10.LinkedBlockingDeque 阻塞队列(基于双向链表)"></a><strong>10.LinkedBlockingDeque 阻塞队列(基于双向链表)</strong></h2><p>类似LinkedBlockingQueue，但提供了双向链表特有的操作。</p>
<h2 id="11-PriorityBlockingQueue-线程安全的优先队列"><a href="#11-PriorityBlockingQueue-线程安全的优先队列" class="headerlink" title="11.PriorityBlockingQueue 线程安全的优先队列"></a><strong>11.PriorityBlockingQueue 线程安全的优先队列</strong></h2><p>构造时可以传入一个比较器，可以看做放进去的元素会被排序，然后读取的时候按顺序消费。某些低优先级的元素可能长期无法被消费，因为不断有更高优先级的元素进来。</p>
<h2 id="12-SynchronousQueue-数据同步交换的队列"><a href="#12-SynchronousQueue-数据同步交换的队列" class="headerlink" title="12.SynchronousQueue 数据同步交换的队列"></a><strong>12.SynchronousQueue 数据同步交换的队列</strong></h2><p>一个虚假的队列，因为它实际上没有真正用于存储元素的空间，每个插入操作都必须有对应的取出操作，没取出时无法继续放入。</p>
<p>一个简单的例子感受一下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SynchronousQueue&lt;Integer&gt; queue = <span class="keyword">new</span> SynchronousQueue&lt;&gt;();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 没有休息，疯狂写入</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; ; i++) &#123;</span><br><span class="line">          System.out.println(<span class="string">"放入: "</span> + i);</span><br><span class="line">          queue.put(i);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">    <span class="keyword">new</span> Thread(() -&gt; &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 咸鱼模式取数据</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">          System.out.println(<span class="string">"取出: "</span> + queue.take());</span><br><span class="line">          Thread.sleep((<span class="keyword">long</span>) (Math.random() * <span class="number">2000</span>));</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;).start();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 输出:</span></span><br><span class="line"><span class="comment">放入: 0</span></span><br><span class="line"><span class="comment">取出: 0</span></span><br><span class="line"><span class="comment">放入: 1</span></span><br><span class="line"><span class="comment">取出: 1</span></span><br><span class="line"><span class="comment">放入: 2</span></span><br><span class="line"><span class="comment">取出: 2</span></span><br><span class="line"><span class="comment">放入: 3</span></span><br><span class="line"><span class="comment">取出: 3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<p>可以看到，写入的线程没有任何sleep，可以说是全力往队列放东西，而读取的线程又很不积极，读一个又sleep一会。输出的结果却是读写操作成对出现。</p>
<p>JAVA中一个使用场景就是Executors.newCachedThreadPool()，创建一个缓存线程池。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ExecutorService <span class="title">newCachedThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> ThreadPoolExecutor(</span><br><span class="line">             <span class="number">0</span>, <span class="comment">// 核心线程为0，没用的线程都被无情抛弃</span></span><br><span class="line">             Integer.MAX_VALUE, <span class="comment">// 最大线程数理论上是无限了，还没到这个值机器资源就被掏空了</span></span><br><span class="line">             <span class="number">60L</span>, TimeUnit.SECONDS, <span class="comment">// 闲置线程60秒后销毁</span></span><br><span class="line">             <span class="keyword">new</span> SynchronousQueue&lt;Runnable&gt;()); <span class="comment">// offer时如果没有空闲线程取出任务，则会失败，线程池就会新建一个线程</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="13-LinkedTransferQueue-基于链表的数据交换队列"><a href="#13-LinkedTransferQueue-基于链表的数据交换队列" class="headerlink" title="13.LinkedTransferQueue 基于链表的数据交换队列"></a><strong>13.LinkedTransferQueue 基于链表的数据交换队列</strong></h2><p>实现了接口TransferQueue，通过transfer方法放入元素时，如果发现有线程在阻塞在取元素，会直接把这个元素给等待线程。如果没有人等着消费，那么会把这个元素放到队列尾部，并且此方法阻塞直到有人读取这个元素。和SynchronousQueue有点像，但比它更强大。</p>
<h2 id="14-DelayQueue-延时队列"><a href="#14-DelayQueue-延时队列" class="headerlink" title="14.DelayQueue 延时队列"></a><strong>14.DelayQueue 延时队列</strong></h2><p>可以使放入队列的元素在指定的延时后才被消费者取出，元素需要实现Delayed接口。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p>上面简单介绍了JAVA并发包下的一些容器类，知道有这些东西，遇到合适的场景时就能想起有个现成的东西可以用了。想要知其所以然，后续还得再深入探索一番。</p>
]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>并发</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8开发的4个小技巧</title>
    <url>/2020/02/11/Java8%E5%BC%80%E5%8F%91%E7%9A%844%E4%B8%AA%E5%B0%8F%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h1 id="1-Optional"><a href="#1-Optional" class="headerlink" title="1.Optional"></a><strong>1.Optional</strong></h1><p>Optional是一个严重被低估的功能，并且有潜力删除很多困扰我们的NullPointerExceptions。这在代码边界中（要么是正在使用的API，要么是正在暴露的API）特别有用，因为它允许你和你的调用代码来推理所期待的东西。</p>
<p>然而，不加思考和设计就应用Optional可能会导致影响大量的类，并可能导致可读性更差。下面是一些关于如何高效使用Optional的技巧。</p>
<h2 id="Optional应该只用于返回类型"><a href="#Optional应该只用于返回类型" class="headerlink" title="Optional应该只用于返回类型"></a><strong>Optional应该只用于返回类型</strong></h2><p>……不是参数，也不是字段。幸运的是，IntelliJ IDEA的让你打开检查来查看是是否遵循这些建议。</p>
<p><img src="/2020/02/11/Java8开发的4个小技巧/640.webp" alt="img"></p>
<p>Optional值应在遇到它们的地方中处理。IntelliJ IDEA的建议会防止代码Optional泄漏，所以请记得在你发现Optional的地方处理它，迅速采取行动。</p>
<p><img src="/2020/02/11/Java8开发的4个小技巧/640.webp" alt="img"></p>
<h2 id="不应该简单调用get"><a href="#不应该简单调用get" class="headerlink" title="不应该简单调用get()"></a><strong>不应该简单调用get()</strong></h2><p>Optional的功能是表达这个值可能是空的，并让你应对这种情况。因此，在对它做任何事情之前一定要检查是否有一个值。只是简单得调用get()而不先检查isPresent()在某些时候可能会导致空指针。幸运的是，IntelliJ IDEA也有检查可以提醒你这一点。</p>
<p><img src="/2020/02/11/Java8开发的4个小技巧/640.webp" alt="img"></p>
<h2 id="可能有更优雅的方式"><a href="#可能有更优雅的方式" class="headerlink" title="可能有更优雅的方式"></a><strong>可能有更优雅的方式</strong></h2><p>结合了get()的isPresent()当然会很赞…</p>
<p><img src="/2020/02/11/Java8开发的4个小技巧/640.webp" alt="img"></p>
<p>但也有更优雅的解决方案。你可以使用orElse在万一是空值的情况下给一个替代方案。</p>
<p><img src="/2020/02/11/Java8开发的4个小技巧/640.webp" alt="img"></p>
<p>或者你可以使用orElseGet说明在值为空的情况下调用哪个方法。这似乎与上面的例子相同，但supplier方法将只在需要的时候调用，因此，如果这是一种昂贵的方法，那么使用lambda会有更佳性能。</p>
<p><img src="/2020/02/11/Java8开发的4个小技巧/640-1581410974887.webp" alt="img"></p>
<h1 id="2-使用Lambda表达式"><a href="#2-使用Lambda表达式" class="headerlink" title="2.使用Lambda表达式"></a><strong>2.使用Lambda表达式</strong></h1><p>Lambda表达式是Java 8的主要特点之一。即使你还没有使用Java 8，你现在可能已经对它们有了基本的了解。它们是用Java编程的一种新的方式，并且什么是“最佳实践”还不明显。下面是我喜欢遵循的一些指引。</p>
<h2 id="保持简短"><a href="#保持简短" class="headerlink" title="保持简短"></a><strong>保持简短</strong></h2><p>函数式程序员与较长的lambda表达式相处会更愉快，但那些淫浸于Java多年的人会发现保持lambda表达式为区区几行代码更容易。你甚至可能更愿意将其限制到一行代码，并且你可以轻松重构较长的表达式为一个方法。</p>
<p><img src="/2020/02/11/Java8开发的4个小技巧/640-1581410974888.webp" alt="img"></p>
<p>这些甚至可能会成为方法引用。方法引用一开始会觉得有点陌生，但实际上坚持方法引用是有价值的，因为它们在某些情况下有助于可读性，后面我会讨论到这一点。</p>
<p><img src="/2020/02/11/Java8开发的4个小技巧/640-1581410974888.webp" alt="img"></p>
<h2 id="明确"><a href="#明确" class="headerlink" title="明确"></a><strong>明确</strong></h2><p>类型信息缺少lambda表达式，所以你可能会觉得包含类型信息用于参数会很有用。</p>
<p><img src="/2020/02/11/Java8开发的4个小技巧/640-1581410974893.webp" alt="img"></p>
<p>正如你所见，这回变得相当笨拙。所以我更喜欢给参数取一个有用的名字。当然，不管你有没有这么做，IntelliJ IDEA可以让你看到参数得类型信息。</p>
<p><img src="/2020/02/11/Java8开发的4个小技巧/640-1581410974891.webp" alt="img"></p>
<p>甚至是lambda所代表的函数式接口：</p>
<p><img src="/2020/02/11/Java8开发的4个小技巧/640-1581410974892.webp" alt="img"></p>
<p><strong>3.针对Lambda表达式设计</strong></p>
<p>我认为lambda表达式有点像泛型——和泛型一起，我们经常使用它们（例如，添加类型信息到List&lt; &gt;），但最好我们可以设计一种方法或一个具有泛型类型（例如Person&lt; T &gt;）的类。</p>
<p>同样的，当使用类似于Streams API的东西时，我们会传递lambda表达式，但更好的是创造一个需要lambda参数的方法。</p>
<p>但是，如果你发现自己处于这类情况下，下面有一些超棒的技巧。</p>
<p><strong>IntelliJ IDEA可以帮你引进函数式参数</strong></p>
<p>这让你可以在有人将传递一个lambda而非Object的地方创建一个参数。此功能的好处是，它表明，现有函数式接口匹配规格说明。</p>
<p><img src="/2020/02/11/Java8开发的4个小技巧/640-1581410974894.webp" alt="img"></p>
<p>这会导致…</p>
<p><strong>使用现有的函数式接口</strong></p>
<p>随着开发人员越来越熟悉Java 8代码，我们就能知道当使用如Supplier和 Consumer的接口时，会发生什么，以及创建一个本地的ErrorMessageCreator（举个例子）可能会造成混乱，而且浪费。看看这个函数包了解一下哪些已经是可用的。</p>
<p><strong>添加@FunctionalInterface到函数式接口</strong></p>
<p>如果你确实需要创建自己的函数式接口，那么就这样用此注释标记。这似乎没有太大的作用，但IntelliJ IDEA会告诉你，在你的接口不能匹配用于函数式接口的异常的时候。当你没有指定要覆盖的方法时，它会标志：</p>
<p><img src="/2020/02/11/Java8开发的4个小技巧/640-1581410974894.webp" alt="img"></p>
<p>当你指定了太多方法的时候，它会标志：</p>
<p><img src="/2020/02/11/Java8开发的4个小技巧/640-1581410974895.webp" alt="img"></p>
<p>并且如果你应用它到一个类而不是接口时，它会警告你：</p>
<p><img src="/2020/02/11/Java8开发的4个小技巧/640-1581410974910.webp" alt="img"></p>
<p>lambda表达式可用于带有一个单一抽象方法的任何接口，但它们不能用于符合相同标准的抽象类。似乎不合逻辑，但就是这样。</p>
<p><strong>4.Stream</strong></p>
<p>Stream API是Java 8另一个大特点，并且我认为我们还真的不知道这对我们的编码方式会产生多大的改变。下面是我发现的一些有用的东西</p>
<p><strong>排队点操作符</strong></p>
<p>我个人更喜欢排队我的流操作。当然，你没有必要这样，当我发现这样做对我有帮助：</p>
<ul>
<li>一目了然地看到我有哪些操作</li>
<li>调试更容易（虽然IntelliJ IDEA确实提供了对一行中的任意多个lambda表达式设置断点的能力，但是拆分到不同的行会变得更简单）</li>
<li>当我测试东西的时候注释操作</li>
<li>轻松插入peek()用于调试或测试</li>
</ul>
<p><img src="/2020/02/11/Java8开发的4个小技巧/640-1581410974911.webp" alt="img"></p>
<p>此外，在我看来，它更整洁。如果我们按照这个模式，在减少代码行数方面我们并没有增加很多。</p>
<p>你可能需要调整格式设置以排列点操作符。</p>
<p><img src="/2020/02/11/Java8开发的4个小技巧/640-1581410974912.webp" alt="img"></p>
<p><strong>使用方法引用</strong></p>
<p>是的，确实需要一段时间来适应这个奇怪的语法。但是，如果使用得当，它确实可以增加可读性。请看：</p>
<p><img src="/2020/02/11/Java8开发的4个小技巧/640-1581410974912.webp" alt="img"></p>
<p>与（相对）新的Objects类上的辅助方法相比较：</p>
<p><img src="/2020/02/11/Java8开发的4个小技巧/640-1581410974912.webp" alt="img"></p>
<p>后者的代码对于哪些值是要保存的更加明确。当lambda可以被折叠到方法参考的时候，IntelliJ IDEA通常会让你知道。</p>
<p><img src="/2020/02/11/Java8开发的4个小技巧/640-1581410974913.webp" alt="img"></p>
<p>当遍历一个集合时，在可行的情况下使用Streams API</p>
<p>…或者新的集合方法，如forEach。IntelliJ IDEA给你建议是：</p>
<p><img src="/2020/02/11/Java8开发的4个小技巧/640-1581410974914.webp" alt="img"></p>
<p>一般使用Streams API比循环和if语句的组合更加明确。例如：</p>
<p><img src="/2020/02/11/Java8开发的4个小技巧/640-1581410974916.webp" alt="img"></p>
<p>IntelliJ IDEA建议这可重构为：</p>
<p><img src="/2020/02/11/Java8开发的4个小技巧/640-1581410974943.webp" alt="img"></p>
<p>我所做的性能测试表明这种重构令人惊讶——并不总是可预测性能是保持不变，改善还是变得更糟。与往常一样，如果性能在应用程序中是关键，那么在交付一种风格到另一种之前衡量它。</p>
<p><strong>遍历数组时使用循环</strong></p>
<p>但是，使用Java 8并不一定意味着你必须到处使用流和新的集合方法。IntelliJ IDEA会建议转换成流，但是，这并不意味着你必须回答“yes”（记得检查是可以抑制或关闭的）。</p>
<p>特别是，遍历原始类型的小型数组几乎肯定会用，以获得更好的性能循环，很可能（至少对于Java开发人员是新的流）更具可读性。</p>
<p><img src="/2020/02/11/Java8开发的4个小技巧/640-1581410974943.webp" alt="img"></p>
<p>与任何技巧一样，规则并不是一成不变的，但你应该决定是尽可能地使用Streams API，还是依然对一些操作使用循环。总之，要一致。</p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><h2 id="Lambda表达式"><a href="#Lambda表达式" class="headerlink" title="Lambda表达式"></a>Lambda表达式</h2><p><img src="/2020/02/11/Java8开发的4个小技巧/640-1581423585086.webp" alt="img"></p>
<h3 id="Lambda语法"><a href="#Lambda语法" class="headerlink" title="Lambda语法"></a>Lambda语法</h3><p>一行执行语句的写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(parameters) -&gt; expression</span><br></pre></td></tr></table></figure>
<p>如果有多行执行语句，可以加上 <code>{}</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(parameters) -&gt; &#123; statements; &#125;</span><br></pre></td></tr></table></figure>
<p>如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;    <span class="keyword">return</span> x + y;&#125;</span><br></pre></td></tr></table></figure>
<p>转换成Lambda表达式有以下几种写法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 指定参数类型及</span></span><br><span class="line"><span class="keyword">return</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; &#123; <span class="keyword">return</span> x + y; &#125;</span><br><span class="line"><span class="comment">// 指定参数类型，不指定</span></span><br><span class="line"><span class="keyword">return</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y) -&gt; x + y;</span><br><span class="line"><span class="comment">// 不指定参数类型和return，编译器会自动推断</span></span><br><span class="line">(x, y) -&gt; x + y;</span><br></pre></td></tr></table></figure>
<h3 id="Lambda用途"><a href="#Lambda用途" class="headerlink" title="Lambda用途"></a>Lambda用途</h3><h4 id="1、只有一个抽象方法的函数式接口"><a href="#1、只有一个抽象方法的函数式接口" class="headerlink" title="1、只有一个抽象方法的函数式接口"></a>1、只有一个抽象方法的函数式接口</h4><p>Lambda表达式的目标类型是函数式接口，什么是函数式接口之后会讲。</p>
<p>下面拿创建线程来举例，用lambda表达式可以有以下几种写法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;    </span><br><span class="line">	<span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;        </span><br><span class="line">		<span class="meta">@Override</span>        </span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;            </span><br><span class="line">			System.out.println(<span class="string">"t1"</span>);        </span><br><span class="line">		&#125;    </span><br><span class="line">	&#125;).start();    </span><br><span class="line">	Runnable runnable = () -&gt; System.out.println(<span class="string">"t2"</span>);    </span><br><span class="line">	<span class="keyword">new</span> Thread(runnable).start();    </span><br><span class="line">	<span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"t3"</span>)).start();    </span><br><span class="line">	<span class="keyword">new</span> Thread(() -&gt; run(<span class="string">"t4"</span>)).start();    </span><br><span class="line">	<span class="keyword">new</span> Thread(() -&gt; &#123;        </span><br><span class="line">		String str = <span class="string">"t5"</span>;        </span><br><span class="line">		System.out.println(str);    </span><br><span class="line">	&#125;).start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">	System.out.println(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后输出：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">t1t2t3t4t5</span><br></pre></td></tr></table></figure>
<h4 id="2、集合批量操作"><a href="#2、集合批量操作" class="headerlink" title="2、集合批量操作"></a>2、集合批量操作</h4><p>下面打印list集合的两种写法是等价的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;String&gt; list = Arrays.asList(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>);</span><br><span class="line"><span class="keyword">for</span>(String str : list) &#123;    </span><br><span class="line">	System.out.println(str);</span><br><span class="line">&#125;</span><br><span class="line">list.forEach((e) -&gt; System.out.println(e));</span><br></pre></td></tr></table></figure>
<h4 id="3、流操作"><a href="#3、流操作" class="headerlink" title="3、流操作"></a>3、流操作</h4><p>下面是流查询list集合中等于 <code>&quot;a&quot;</code>的数量。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">list.stream().filter((e) -&gt; <span class="string">"a"</span>.equals(e)).count();</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA8</tag>
      </tags>
  </entry>
  <entry>
    <title>如何提高服务器的并发处理能力</title>
    <url>/2020/02/11/%E5%A6%82%E4%BD%95%E6%8F%90%E9%AB%98%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%B9%B6%E5%8F%91%E5%A4%84%E7%90%86%E8%83%BD%E5%8A%9B/</url>
    <content><![CDATA[<p>以下内容为入门级介绍，意在对老技术作较全的总结而不是较深的研究。主要参考《构建高性能Web站点》一书。</p>
<h2 id="什么是服务器并发处理能力"><a href="#什么是服务器并发处理能力" class="headerlink" title="什么是服务器并发处理能力"></a>什么是服务器并发处理能力</h2><p>一台服务器在单位时间里能处理的请求越多，服务器的能力越高，也就是服务器并发处理能力越强</p>
<h2 id="有什么方法衡量服务器并发处理能力"><a href="#有什么方法衡量服务器并发处理能力" class="headerlink" title="有什么方法衡量服务器并发处理能力"></a>有什么方法衡量服务器并发处理能力</h2><h3 id="1-吞吐率"><a href="#1-吞吐率" class="headerlink" title="1. 吞吐率"></a><strong>1. 吞吐率</strong></h3><p>吞吐率，单位时间里服务器处理的最大请求数，单位req/s</p>
<p>从服务器角度，实际并发用户数的可以理解为服务器当前维护的代表不同用户的文件描述符总数，也就是并发连接数。</p>
<p>服务器一般会限制同时服务的最多用户数，比如apache的MaxClents参数。</p>
<p>这里再深入一下，对于服务器来说，服务器希望支持高吞吐率，对于用户来说，用户只希望等待最少的时间，显然，双方不能满足，所以双方利益的平衡点，就是我们希望的最大并发用户数。</p>
<h3 id="2-压力测试"><a href="#2-压力测试" class="headerlink" title="2. 压力测试"></a><strong>2. 压力测试</strong></h3><p>有一个原理一定要先搞清楚，假如100个用户同时向服务器分别进行10个请求，与1个用户向服务器连续进行1000次请求，对服务器的压力是一样吗？</p>
<p>实际上是不一样的，因对每一个用户，连续发送请求实际上是指发送一个请求并接收到响应数据后再发送下一个请求。</p>
<p>这样对于1个用户向服务器连续进行1000次请求, 任何时刻服务器的网卡接收缓冲区中只有1个请求，而对于100个用户同时向服务器分别进行10个请求，服务器的网卡接收缓冲区最多有100个等待处理的请求，显然这时的服务器压力更大。</p>
<p>压力测试前提考虑的条件</p>
<ul>
<li>并发用户数: 指在某一时刻同时向服务器发送请求的用户总数(HttpWatch)</li>
<li>总请求数</li>
<li>请求资源描述</li>
<li>请求等待时间(用户等待时间)</li>
<li>用户平均请求的等待时间</li>
<li>服务器平均请求处理的时间</li>
<li>硬件环境</li>
</ul>
<p>压力测试中关心的时间又细分以下2种:</p>
<ol>
<li>用户平均请求等待时间（这里暂不把数据在网络的传输时间，还有用户PC本地的计算时间计算入内）</li>
<li>服务器平均请求处理时间</li>
</ol>
<p>用户平均请求等待时间主要用于衡量服务器在一定并发用户数下，单个用户的服务质量；而服务器平均请求处理时间就是吞吐率的倒数。</p>
<p>一般来说，用户平均请求等待时间 = 服务器平均请求处理时间 * 并发用户数</p>
<h2 id="怎么提高服务器的并发处理能力"><a href="#怎么提高服务器的并发处理能力" class="headerlink" title="怎么提高服务器的并发处理能力"></a>怎么提高服务器的并发处理能力</h2><h3 id="1-提高CPU并发计算能力"><a href="#1-提高CPU并发计算能力" class="headerlink" title="1. 提高CPU并发计算能力"></a><strong>1. 提高CPU并发计算能力</strong></h3><p>服务器之所以可以同时处理多个请求，在于操作系统通过多执行流体系设计使得多个任务可以轮流使用系统资源。</p>
<p>这些资源包括CPU，内存以及I/O. 这里的I/O主要指磁盘I/O, 和网络I/O。</p>
<h5 id="多进程-amp-多线程"><a href="#多进程-amp-多线程" class="headerlink" title="多进程 &amp; 多线程"></a><strong>多进程 &amp; 多线程</strong></h5><p>多执行流的一般便是进程，多进程的好处可以对CPU时间的轮流使用，对CPU计算和IO操作重叠利用。这里的IO主要是指磁盘IO和网络IO，相对CPU而言，它们慢的可怜。</p>
<p>而实际上，大多数进程的时间主要消耗在I/O操作上。</p>
<p>现代计算机的DMA技术可以让CPU不参与I/O操作的全过程，比如进程通过系统调用，使得CPU向网卡或者磁盘等I/O设备发出指令，然后进程被挂起，释放出CPU资源，等待I/O设备完成工作后通过中断来通知进程重新就绪。</p>
<p>对于单任务而言，CPU大部分时间空闲，这时候多进程的作用尤为重要。</p>
<p>多进程不仅能够提高CPU的并发度。其优越性还体现在独立的内存地址空间和生命周期所带来的稳定性和健壮性，其中一个进程崩溃不会影响到另一个进程。</p>
<p>但是进程也有如下<strong>缺点</strong>：</p>
<ol>
<li>fork()系统调用开销很大: prefork</li>
<li>进程间调度和上下文切换成本: 减少进程数量</li>
<li>庞大的内存重复：共享内存</li>
<li>IPC编程相对比较麻烦</li>
</ol>
<h4 id="减少进程切换"><a href="#减少进程切换" class="headerlink" title="减少进程切换"></a><strong>减少进程切换</strong></h4><p>当硬件上下文频繁装入和移出时，所消耗的时间是非常可观的。可用Nmon工具监视服务器每秒的上下文切换次数。</p>
<p>为了尽量减少上下文切换次数，最简单的做法就是减少进程数，尽量使用线程并配合其它I/O模型来设计并发策略。</p>
<p>还可以考虑使用进程绑定CPU技术，增加CPU缓存的命中率。若进程不断在各CPU上切换，这样旧的CPU缓存就会失效。</p>
<h4 id="减少使用不必要的锁"><a href="#减少使用不必要的锁" class="headerlink" title="减少使用不必要的锁"></a><strong>减少使用不必要的锁</strong></h4><p>服务器处理大量并发请求时，多个请求处理任务时存在一些资源抢占竞争，这时一般采用“锁”机制来控制资源的占用。到底<code>什么是重入锁</code>附录内容推荐大家看下。</p>
<p>当一个任务占用资源时，我们锁住资源，这时其它任务都在等待锁的释放，这个现象称为<strong>锁竞争</strong>。</p>
<p>通过锁竞争的本质，我们要意识到尽量减少并发请求对于共享资源的竞争。</p>
<p>比如在允许情况下关闭服务器访问日志，这可以大大减少在锁等待时的延迟时间。要最大程度减少无辜的等待时间。</p>
<p>这里说下无锁编程，就是由内核完成这个锁机制，主要是使用原子操作替代锁来实现对共享资源的访问保护。</p>
<p>使用原子操作时，在进行实际的写操作时，使用了lock指令，这样就可以阻止其他任务写这块内存，避免出现数据竞争现象。<strong>原子操作速度比锁快，一般要快一倍以上</strong>。</p>
<p>例如fwrite(), fopen()，其是使用append方式写文件，其原理就是使用了无锁编程，无锁编程的复杂度高，但是效率快，而且发生死锁概率低。</p>
<h4 id="考虑进程优先级"><a href="#考虑进程优先级" class="headerlink" title="考虑进程优先级"></a><strong>考虑进程优先级</strong></h4><p>进程调度器会动态调整运行队列中进程的优先级，通过top观察进程的PR值</p>
<h4 id="考虑系统负载"><a href="#考虑系统负载" class="headerlink" title="考虑系统负载"></a><strong>考虑系统负载</strong></h4><p>可在任何时刻查看/proc/loadavg, top中的load average也可看出</p>
<h4 id="考虑CPU使用率"><a href="#考虑CPU使用率" class="headerlink" title="考虑CPU使用率"></a><strong>考虑CPU使用率</strong></h4><p>除了用户空间和内核空间的CPU使用率以外，还要关注I/O wait,它是指CPU空闲并且等待I/O操作完成的时间比例（top中查看wa的值）。</p>
<h3 id="2-考虑减少内存分配和释放"><a href="#2-考虑减少内存分配和释放" class="headerlink" title="2. 考虑减少内存分配和释放"></a><strong>2. 考虑减少内存分配和释放</strong></h3><p>服务器的工作过程中，需要大量的内存，使得内存的分配和释放工作尤为重要。</p>
<p>可以通过改善数据结构和算法复制度来适当减少中间临时变量的内存分配及数据复制时间，而服务器本身也使用了各自的策略来提高效率。</p>
<p>例如Apache,在运行开始时一次申请大片的内存作为内存池，若随后需要时就在内存池中直接获取，不需要再次分配，避免了频繁的内存分配和释放引起的内存整理时间。</p>
<p>再如Nginx使用多线程来处理请求，使得多个线程之间可以共享内存资源，从而令它的内存总体使用量大大减少。</p>
<p>另外，Nginx分阶段的内存分配策略，按需分配，及时释放，使得内存使用量保持在很小的数量范围。</p>
<p>另外，还可以考虑<strong>共享内存</strong>。</p>
<p>共享内存指在多处理器的计算机系统中，可以被不同中央处理器（CPU）访问的大容量内存，也可以由不同进程共享，是非常快的进程通信方式。</p>
<p>但是使用共享内存也有不好的地方，就是对于多机器时数据不好统一。</p>
<p>shell命令ipcs可用来显示系统下共享内存的状态，函数shmget可以创建或打开一块共享内存区，函数shmat将一个存在的共享内存段连接到本进程空间, 函数shmctl可以对共享内存段进行多种操作，函数shmdt函数分离该共享内存。</p>
<h3 id="3-考虑使用持久连接"><a href="#3-考虑使用持久连接" class="headerlink" title="3. 考虑使用持久连接"></a><strong>3. 考虑使用持久连接</strong></h3><p>持久连接也为<strong>长连接</strong>，它本身是TCP通信的一种普通方式，即在一次TCP连接中持续发送多分数据而不断开连接。</p>
<p>与它相反的方式称为<strong>短连接</strong>，也就是建立连接后发送一份数据就断开，然后再次建立连接发送下一份数据， 周而复始。</p>
<p>是否采用持久连接，完全取决于应用特点。</p>
<p>从性能角度看，建立TCP连接的操作本身是一项不小的开销，在允许的情况下，连接次数越少，越有利于性能的提升; 尤其对于密集型的图片或网页等小数据请求处理有明显的加速所用。</p>
<p>HTTP长连接需要浏览器和web服务器的共同协作，目前浏览器普遍支持长连接，表现在其发出的HTTP请求数据头中包含关于长连接的声明，如下：Connection: Keep-Alive</p>
<p>主流的web服务器都支持长连接，比如apache中，可以用KeepAlive off关闭长连接。</p>
<p>对于长连接的有效使用，还有关键一点在于长连接超时时间的设置，即长连接在什么时候关闭吗？</p>
<p>Apache的默认设置为5s, 若这个时间设置过长，则可能导致资源无效占有，维持大量空闲进程，影响服务器性能。</p>
<h3 id="4-改进I-O-模型"><a href="#4-改进I-O-模型" class="headerlink" title="4. 改进I/O 模型"></a><strong>4. 改进I/O 模型</strong></h3><p>I/O操作根据设备的不同分为很多类型，比如内存I/O, 网络I/O, 磁盘I/O。</p>
<p>对于网络I/O和磁盘I/O, 它们的速度要慢很多，尽管使用RAID磁盘阵列可通过并行磁盘磁盘来加快磁盘I/O速度，购买大连独享网络带宽以及使用高带宽网络适配器可以提高网络I/O的速度。</p>
<p>但这些I/O操作需要内核系统调用来完成，这些需要CPU来调度，这使得CPU不得不浪费宝贵的时间来等待慢速I/O操作。</p>
<p>我们希望让CPU足够少的时间在i/O操作的调度上，如何让高速的CPU和慢速的I/O设备更好地协调工作，是现代计算机一直探讨的话题。各种I/O模型的本质区别在于CPU的参与方式。</p>
<h4 id="DMA技术"><a href="#DMA技术" class="headerlink" title="DMA技术"></a><strong>DMA技术</strong></h4><p>I/O设备和内存之间的数据传输方式由DMA控制器完成。在DMA模式下，CPU只需向DMA下达命令，让DMA控制器来处理数据的传送，这样可以大大节省系统资源。</p>
<h4 id="异步I-O"><a href="#异步I-O" class="headerlink" title="异步I/O"></a><strong>异步I/O</strong></h4><p>异步I/O指主动请求数据后便可以继续处理其它任务，随后等待I/O操作的通知，这样进程在数据读写时不发生阻塞。</p>
<p>异步I/O是非阻塞的，当函数返回时，真正的I/O传输已经完成，这让CPU处理和I/O操作达到很好的重叠。</p>
<h4 id="I-O多路复用"><a href="#I-O多路复用" class="headerlink" title="I/O多路复用"></a><strong>I/O多路复用</strong></h4><p>epoll服务器同时处理大量的文件描述符是必不可少的，若采用同步非阻塞I/O模型，若同时接收TCP连接的数据，就必须轮流对每个socket调用接收数据的方法，不管这些socket有没有可接收的数据，都要询问一次。</p>
<p>假如大部分socket并没有数据可以接收，那么进程便会浪费很多CPU时间用于检查这些socket有没有可以接收的数据。</p>
<p>多路I/O就绪通知的出现，提供了对大量文件描述符就绪检查的高性能方案，它允许进程通过一种方法同时监视所有文件描述符，并可以快速获得所有就绪的文件描述符，然后只针对这些文件描述符进行数据访问。</p>
<p>epoll可以同时支持水平触发和边缘触发，理论上边缘触发性能更高，但是代码实现复杂，因为任何意外的丢失事件都会造成请求处理错误。</p>
<p>epoll主要有2大改进：</p>
<ol>
<li><p>epoll只告知就绪的文件描述符，而且当调用epoll_wait()获得文件描述符时，返回并不是实际的描述符，而是一个代表就绪描述符数量的值，然后只需去epoll指定的一个数组中依次取得相应数量的文件描述符即可。</p>
<p>这里使用了内存映射(mmap)技术，这样彻底省掉了这些文件描述符在系统调用时复制的开销。</p>
</li>
<li><p>epoll采用基于事件的就绪通知方式。其事先通过epoll_ctrl()注册每一个文件描述符，一旦某个文件描述符就绪时，内核会采用类似callback的回调机制，当进程调用epoll_wait()时得到通知</p>
</li>
</ol>
<p>关于IO模型，可以参考笔者前面写的相关文章Java NIO.2；关于epoll，可以参考笔者前面写的文章select、poll和epoll简介。</p>
<h4 id="Sendfile"><a href="#Sendfile" class="headerlink" title="Sendfile"></a><strong>Sendfile</strong></h4><p>大多数时候，我们都向服务器请求静态文件，比如图片，样式表等。</p>
<p>在处理这些请求时，磁盘文件的数据先经过内核缓冲区，然后到用户内存空间，不需经过任何处理，其又被送到网卡对应的内核缓冲区，接着再被送入网卡进行发送。</p>
<p>Linux提供sendfile()系统调用，可以讲磁盘文件的特定部分直接传送到代表客户端的socket描述符，加快了静态文件的请求速度，同时减少CPU和内存的开销。</p>
<p>适用场景：对于请求较小的静态文件，sendfile发挥的作用不那么明显，因发送数据的环节在整个过程中所占时间的比例相比于大文件请求时小很多。</p>
<h4 id="内存映射"><a href="#内存映射" class="headerlink" title="内存映射"></a><strong>内存映射</strong></h4><p>Linux内核提供一种访问磁盘文件的特殊方式，它可以将内存中某块地址空间和我们指定的磁盘文件相关联，从而对这块内存的访问转换为对磁盘文件的访问。这种技术称为<strong>内存映射</strong>。</p>
<p>多数情况下，内存映射可以提高磁盘I/O的性能，无须使用read()或write()等系统调用来访问文件，而是通过mmap()系统调用来建立内存和磁盘文件的关联，然后像访问内存一样自由访问文件。</p>
<p><strong>缺点</strong>：在处理较大文件时，内存映射会导致较大的内存开销，得不偿失。</p>
<h4 id="直接I-O"><a href="#直接I-O" class="headerlink" title="直接I/O"></a><strong>直接I/O</strong></h4><p>在linux 2.6中，内存映射和直接访问文件没有本质差异，因为数据需要经过2次复制，即在磁盘与内核缓冲区之间以及在内核缓冲区与用户态内存空间。</p>
<p>引入内核缓冲区的目的在于<strong>提高磁盘文件的访问性能</strong>，然而对于一些复杂的应用，比如数据库服务器，它们为了进一步提高性能，希望绕过内核缓冲区，由自己在用户态空间实现并管理I/O缓冲区，比如数据库可根据更加合理的策略来提高查询缓存命中率。</p>
<p>另一方面，绕过内核缓冲区也可以减少系统内存的开销，因内核缓冲区本身就在使用系统内存。</p>
<p>Linux在open()系统调用中增加参数选项O_DIRECT,即可绕过内核缓冲区直接访问文件,实现直接I/O。</p>
<p>在Mysql中，对于Innodb存储引擎，自身进行数据和索引的缓存管理，可在my.cnf配置中分配raw分区跳过内核缓冲区，实现直接I/O。</p>
<h3 id="5-改进服务器并发策略"><a href="#5-改进服务器并发策略" class="headerlink" title="5. 改进服务器并发策略"></a><strong>5. 改进服务器并发策略</strong></h3><p>服务器并发策略的目的，是让I/O操作和CPU计算尽量重叠进行，一方面让CPU在I/O等待时不要空闲，另一方面让CPU在I/O调度上尽量花最少的时间。</p>
<h4 id="一个进程处理一个连接，非阻塞I-O"><a href="#一个进程处理一个连接，非阻塞I-O" class="headerlink" title="一个进程处理一个连接，非阻塞I/O"></a><strong>一个进程处理一个连接，非阻塞I/O</strong></h4><p>这样会存在多个并发请求同时到达时，服务器必然要准备多个进程来处理请求。其进程的开销限制了它的并发连接数。</p>
<p>但从稳定性和兼容性的角度，则其相对安全，任何一个子进程的崩溃不会影响服务器本身，父进程可以创建新的子进程；这种策略典型的例子就是Apache的fork和prefork模式。</p>
<p>对于并发数不高（如150以内）的站点同时依赖Apache其它功能时的应用选择Apache还是可以的。</p>
<h4 id="一个线程处理一个连接，非阻塞IO"><a href="#一个线程处理一个连接，非阻塞IO" class="headerlink" title="一个线程处理一个连接，非阻塞IO"></a><strong>一个线程处理一个连接，非阻塞IO</strong></h4><p>这种方式允许在一个进程中通过多个线程来处理多个连接，一个线程处理一个连接。Apache的worker模式就是这种典型例子，使其可支持更多的并发连接。不过这种模式的总体性能还不如prefork，所以一般不选用worker模式。</p>
<h4 id="一个进程处理多个连接，异步I-O"><a href="#一个进程处理多个连接，异步I-O" class="headerlink" title="一个进程处理多个连接，异步I/O"></a><strong>一个进程处理多个连接，异步I/O</strong></h4><p>一个线程同时处理多个连接，潜在的前提条件就是使用IO多路复用就绪通知。</p>
<p>这种情况下，将处理多个连接的进程叫做worker进程或服务进程。worker的数量可以配置，如Nginx中的worker_processes 4。</p>
<h4 id="一个线程处理多个连接，异步IO"><a href="#一个线程处理多个连接，异步IO" class="headerlink" title="一个线程处理多个连接，异步IO"></a><strong>一个线程处理多个连接，异步IO</strong></h4><p>即使有高性能的IO多路复用就绪通知，但磁盘IO的等待还是无法避免的。更加高效的方法是对磁盘文件使用异步IO，目前很少有Web服务器真正意义上支持这种异步IO。</p>
<h3 id="6-改进硬件环境"><a href="#6-改进硬件环境" class="headerlink" title="6. 改进硬件环境"></a><strong>6. 改进硬件环境</strong></h3><p>还有一点要提及的是硬件环境，服务器的硬件配置对应用程序的性能提升往往是最直接，也是最简单的方式，这就是所谓的scale up。这里不做论述。</p>
<h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="什么是重入锁"><a href="#什么是重入锁" class="headerlink" title="什么是重入锁"></a>什么是重入锁</h3><blockquote>
<p>java.util.concurrent.locks.ReentrantLock</p>
</blockquote>
<p>这个是 JDK @since 1.5 添加的一种颗粒度更小的锁，它完全可以替代 synchronized 关键字来实现它的所有功能，而且 ReentrantLock 锁的灵活度要远远大于 synchronized 关键字。</p>
<p><img src="/2020/02/11/如何提高服务器的并发处理能力/640.webp" alt="img"></p>
<p>从类结构图看出，ReentrantLock 实现了 Lock 接口，ReentrantLock 只是 Lock 接口的一个实现而已。</p>
<blockquote>
<p>java.util.concurrent.locks.Lock</p>
</blockquote>
<p>它们都是 java.util.concurrent 包里面的内容（俗称 JUC、并发包），也都是 JDK 1.5 开始加入的。</p>
<h3 id="为什么叫重入锁呢？"><a href="#为什么叫重入锁呢？" class="headerlink" title="为什么叫重入锁呢？"></a>为什么叫重入锁呢？</h3><p><code>ReentrantLock</code>，我们把它拆开来看就明了了。</p>
<p>Re-Entrant-Lock：即表示可重新反复进入的锁，但仅限于当前线程；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lock.lock();</span><br><span class="line">    lock.lock();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// ... method body</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock()</span><br><span class="line">      lock.unlock()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如示例代码所示，当前线程可以反复加锁，但也需要释放同样加锁次数的锁，即重入了多少次，就要释放多少次，不然也会导入锁不被释放。</p>
<p>试想一下，如果不设计成可重入锁，那自己如果反复给自己加锁，不是会把自己加死锁了吗？所以，到现在，重入锁的概念大概应该清楚了吧？</p>
<h3 id="重入锁最重要的几个方法"><a href="#重入锁最重要的几个方法" class="headerlink" title="重入锁最重要的几个方法"></a>重入锁最重要的几个方法</h3><p>这几个方法都是 Lock 接口中定义的：</p>
<p><img src="/2020/02/11/如何提高服务器的并发处理能力/640.webp" alt="img"></p>
<p><strong>1）lock()</strong></p>
<p>获取锁，有以下三种情况：</p>
<ul>
<li>锁空闲：直接获取锁并返回，同时设置锁持有者数量为：1；</li>
<li>当前线程持有锁：直接获取锁并返回，同时锁持有者数量递增1；</li>
<li>其他线程持有锁：当前线程会休眠等待，直至获取锁为止；</li>
</ul>
<p><strong>2）lockInterruptibly()</strong></p>
<p>获取锁，逻辑和 lock() 方法一样，但这个方法在获取锁过程中能响应中断。</p>
<p><strong>3）tryLock()</strong></p>
<p>从关键字字面理解，这是在尝试获取锁，获取成功返回：true，获取失败返回：false, 这个方法不会等待，有以下三种情况：</p>
<ul>
<li>锁空闲：直接获取锁并返回：true，同时设置锁持有者数量为：1；</li>
<li>当前线程持有锁：直接获取锁并返回：true，同时锁持有者数量递增1；</li>
<li>其他线程持有锁：获取锁失败，返回：false；</li>
</ul>
<p><strong>4）tryLock(long timeout, TimeUnit unit)</strong></p>
<p>逻辑和 tryLock() 差不多，只是这个方法是带时间的。</p>
<p><strong>5）unlock()</strong></p>
<p>释放锁，每次锁持有者数量递减 1，直到 0 为止。所以，现在知道为什么 lock 多少次，就要对应 unlock 多少次了吧。</p>
<p><strong>6）newCondition</strong></p>
<p>返回一个这个锁的 Condition 实例，可以实现 synchronized 关键字类似 wait/ notify 实现多线程通信的功能，不过这个比 wait/ notify 要更灵活，更强大！</p>
<h3 id="重入锁大概的用法"><a href="#重入锁大概的用法" class="headerlink" title="重入锁大概的用法"></a>重入锁大概的用法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    lock.lock();  <span class="comment">// block until condition holds</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">// ... method body</span></span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      lock.unlock()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;&#125;</span><br></pre></td></tr></table></figure>
<p>看见没有，加锁和释放锁都在方法里面进行，可以自由控制，比 synchronized 更灵活，更方便。但要注意的是，释放锁操作必须在 finally 里面，不然如果出现异常导致锁不能被正常释放，进而会卡死后续所有访问该锁的线程。</p>
<h3 id="synchronized-是重入锁吗？"><a href="#synchronized-是重入锁吗？" class="headerlink" title="synchronized 是重入锁吗？"></a>synchronized 是重入锁吗？</h3><p>那么问题来了，synchronized 是重入锁吗？</p>
<p>你可能会说不是，因为 ReentrantLock 既然是重入锁，根据推理，相反，那 synchronized 肯定就不是重入锁，那你就错了。</p>
<p>答案是：yes，为什么？看下面的例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">operation</span><span class="params">()</span></span>&#123;</span><br><span class="line">    add();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>operation 方法调用了 add 方法，两个方法都是用 synchronized 修饰的，add()  方法可以成功获取当前线程 operation() 方法已经获取到的锁，说明 synchronized 就是可重入锁。</p>
]]></content>
      <categories>
        <category>架构设计</category>
      </categories>
      <tags>
        <tag>分布式架构</tag>
        <tag>资源管理</tag>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式基础要点</title>
    <url>/2020/02/06/%E5%88%86%E5%B8%83%E5%BC%8F%E5%9F%BA%E7%A1%80%E8%A6%81%E7%82%B9/</url>
    <content><![CDATA[<h2 id="1-概念"><a href="#1-概念" class="headerlink" title="1 概念"></a><strong>1 概念</strong></h2><h3 id="1-1-模型"><a href="#1-1-模型" class="headerlink" title="1.1 模型"></a><strong>1.1 模型</strong></h3><h4 id="节点"><a href="#节点" class="headerlink" title="节点"></a><strong>节点</strong></h4><p>在具体的工程项目中，一个节点往往是一个操作系统上的进程。在本文的模型中，认为节点是一个完整的、不可分的整体，如果某个程序进程实际上由若干相对独立部分构成，则在模型中可以将一个进程划分为多个节点。</p>
<h4 id="异常"><a href="#异常" class="headerlink" title="异常"></a><strong>异常</strong></h4><ol>
<li><strong>机器宕机</strong>：机器宕机是最常见的异常之一。在大型集群中每日宕机发生的概率为千分之一左右，在实践中，一台宕机的机器恢复的时间通常认为是24 小时，一般需要人工介入重启机器。</li>
<li><strong>网络异常</strong>：消息丢失，两片节点之间彼此完全无法通信，即出现了“网络分化”；消息乱序，有一定的概率不是按照发送时的顺序依次到达目的节点，考虑使用序列号等机制处理网络消息的乱序问题，使得无效的、过期的网络消息不影响系统的正确性；数据错误；不可靠的TCP，TCP 协议为应用层提供了可靠的、面向连接的传输服务，但在分布式系统的协议设计中不能认为所有网络通信都基于TCP 协议则通信就是可靠的。TCP协议只能保证同一个TCP 链接内的网络消息不乱序，TCP 链接之间的网络消息顺序则无法保证。</li>
<li><strong>分布式三态</strong>：如果某个节点向另一个节点发起RPC(Remote procedure call)调用，即某个节点A 向另一个节点B 发送一个消息，节点B 根据收到的消息内容完成某些操作，并将操作的结果通过另一个消息返回给节点A，那么这个RPC 执行的结果有三种状态：“成功”、“失败”、“超时（未知）”，称之为分布式系统的三态。</li>
<li><strong>存储数据丢失</strong>:对于有状态节点来说，数据丢失意味着状态丢失，通常只能从其他节点读取、恢复存储的状态。</li>
<li><strong><em>异常处理原则\</em></strong>：被大量工程实践所检验过的异常处理黄金原则是：任何在设计阶段考虑到的异常情况一定会在系统实际运行中发生，但在系统实际运行遇到的异常却很有可能在设计时未能考虑，所以，除非需求指标允许，在系统设计时不能放过任何异常情况。</li>
</ol>
<h3 id="1-2-副本"><a href="#1-2-副本" class="headerlink" title="1.2 副本"></a><strong>1.2 副本</strong></h3><p>副本（replica/copy）指在分布式系统中为数据或服务提供的冗余。对于数据副本指在不同的节点上持久化同一份数据，当出现某一个节点的存储的数据丢失时，可以从副本上读到数据。数据副本是分布式系统解决数据丢失异常的唯一手段。另一类副本是服务副本，指数个节点提供某种相同的服务，这种服务一般并不依赖于节点的本地存储，其所需数据一般来自其他节点。</p>
<p>副本协议是贯穿整个分布式系统的理论核心。</p>
<h4 id="副本一致性"><a href="#副本一致性" class="headerlink" title="副本一致性"></a><strong>副本一致性</strong></h4><p>分布式系统通过副本控制协议，使得从系统外部读取系统内部各个副本的数据在一定的约束条件下相同，称之为副本一致性(consistency)。副本一致性是针对分布式系统而言的，不是针对某一个副本而言。</p>
<ol>
<li><strong>强一致性(strong consistency)</strong>：任何时刻任何用户或节点都可以读到最近一次成功更新的副本数据。强一致性是程度最高的一致性要求，也是实践中最难以实现的一致性。</li>
<li><strong>单调一致性(monotonic consistency)</strong>：任何时刻，任何用户一旦读到某个数据在某次更新后的值，这个用户不会再读到比这个值更旧的值。单调一致性是弱于强一致性却非常实用的一种一致性级别。因为通常来说，用户只关心从己方视角观察到的一致性，而不会关注其他用户的一致性情况。</li>
<li><strong>会话一致性(session consistency)</strong>：任何用户在某一次会话内一旦读到某个数据在某次更新后的值，这个用户在这次会话过程中不会再读到比这个值更旧的值。会话一致性通过引入会话的概念，在单调一致性的基础上进一步放松约束，会话一致性只保证单个用户单次会话内数据的单调修改，对于不同用户间的一致性和同一用户不同会话间的一致性没有保障。实践中有许多机制正好对应会话的概念，例如php 中的session 概念。</li>
<li><strong>最终一致性(eventual consistency)</strong>：最终一致性要求一旦更新成功，各个副本上的数据最终将达 到完全一致的状态，但达到完全一致状态所需要的时间不能保障。对于最终一致性系统而言，一个用户只要始终读取某一个副本的数据，则可以实现类似单调一致性的效果，但一旦用户更换读取的副本，则无法保障任何一致性。</li>
<li><strong>弱一致性(week consistency)</strong>：一旦某个更新成功，用户无法在一个确定时间内读到这次更新的值，且即使在某个副本上读到了新的值，也不能保证在其他副本上可以读到新的值。弱一致性系统一般很难在实际中使用，使用弱一致性系统需要应用方做更多的工作从而使得系统可用。</li>
</ol>
<h3 id="1-3-衡量分布式系统的指标"><a href="#1-3-衡量分布式系统的指标" class="headerlink" title="1.3 衡量分布式系统的指标"></a><strong>1.3 衡量分布式系统的指标</strong></h3><ol>
<li><strong>性能</strong>：系统的吞吐能力，指系统在某一时间可以处理的数据总量，通常可以用系统每秒处理的总的数据量来衡量；系统的响应延迟，指系统完成某一功能需要使用的时间；系统的并发能力，指系统可以同时完成某一功能的能力，通常也用QPS(query per second)来衡量。上述三个性能指标往往会相互制约，追求高吞吐的系统，往往很难做到低延迟；系统平均响应时间较长时，也很难提高QPS。</li>
<li><strong>可用性</strong>：系统的可用性(availability)指系统在面对各种异常时可以正确提供服务的能力。系统的可用性可以用系统停服务的时间与正常服务的时间的比例来衡量，也可以用某功能的失败次数与成功次数的比例来衡量。可用性是分布式的重要指标，衡量了系统的鲁棒性，是系统容错能力的体现。</li>
<li><strong>可扩展性</strong>：系统的可扩展性(scalability)指分布式系统通过扩展集群机器规模提高系统性能（吞吐、延迟、并发）、存储容量、计算能力的特性。好的分布式系统总在追求“线性扩展性”，也就是使得系统的某一指标可以随着集群中的机器数量线性增长。</li>
<li><strong>一致性</strong>：分布式系统为了提高可用性，总是不可避免的使用副本的机制，从而引发副本一致性的问题。越是强的一致的性模型，对于用户使用来说使用起来越简单。</li>
</ol>
<h2 id="2-分布式系统原理"><a href="#2-分布式系统原理" class="headerlink" title="2 分布式系统原理"></a><strong>2 分布式系统原理</strong></h2><h3 id="2-1-数据分布方式"><a href="#2-1-数据分布方式" class="headerlink" title="2.1 数据分布方式"></a><strong>2.1 数据分布方式</strong></h3><p>所谓分布式系统顾名思义就是利用多台计算机协同解决单台计算机所不能解决的计算、存储等问题。单机系统与分布式系统的最大的区别在于问题的规模，即计算、存储的数据量的区别。将一个单机问题使用分布式解决，首先要解决的就是如何将问题拆解为可以使用多机分布式解决，使得分布式系统中的每台机器负责原问题的一个子集。由于无论是计算还是存储，其问题输入对象都是数据，所以如何拆解分布式系统的输入数据成为分布式系统的基本问题。</p>
<h4 id="哈希方式"><a href="#哈希方式" class="headerlink" title="哈希方式"></a><strong>哈希方式</strong></h4><p><img src="/2020/02/06/分布式基础要点/image-20200206203106202.png" alt="image-20200206203106202"></p>
<p>哈希分布数据的缺点同样明显，突出表现为可扩展性不高，一旦集群规模需要扩展，则几乎所有的数据需要被迁移并重新分布。工程中，扩展哈希分布数据的系统时，往往使得集群规模成倍扩展，按照数据重新计算哈希，这样原本一台机器上的数据只需迁移一半到另一台对应的机器上即可完成扩展。</p>
<p>针对哈希方式扩展性差的问题，一种思路是不再简单的将哈希值与机器做除法取模映射，而是将对应关系作为元数据由专门的元数据服务器管理.同时，哈希值取模个数往往大于机器个数，这样同一台机器上需要负责多个哈希取模的余数。但需要以较复杂的机制维护大量的元数据。哈希分布数据的另一个缺点是，一旦某数据特征值的数据严重不均，容易出现“数据倾斜”（data skew）问题。</p>
<p>哈希分布数据的另一个缺点是，一旦某数据特征值的数据严重不均，容易出现“数据倾斜”（data skew）问题</p>
<p><img src="/2020/02/06/分布式基础要点/image-20200207095335209.png" alt="image-20200207095335209"></p>
<h4 id="按数据范围分布"><a href="#按数据范围分布" class="headerlink" title="按数据范围分布"></a><strong>按数据范围分布</strong></h4><p>按数据范围分布是另一个常见的数据分布式，将数据按特征值的值域范围划分为不同的区间，使得集群中每台（组）服务器处理不同区间的数据。</p>
<p><img src="/2020/02/06/分布式基础要点/image-20200206203344509.png" alt="image-20200206203344509"></p>
<p>工程中，为了数据迁移等负载均衡操作的方便，往往利用动态划分区间的技术，使得每个区间中服务的数据量尽量的一样多。当某个区间的数据量较大时，通过将区间“分裂”的方式拆分为两个区间，使得每个数据区间中的数据量都尽量维持在一个较为固定的阈值之下。</p>
<p>一般的，往往需要使用专门的服务器在内存中维护数据分布信息，称这种数据的分布信息为一种元信息。甚至对于大规模的集群，由于元信息的规模非常庞大，单台 计算机无法独立维护，需要使用多台机器作为元信息服务器。</p>
<h4 id="按数据量分布"><a href="#按数据量分布" class="headerlink" title="按数据量分布"></a><strong>按数据量分布</strong></h4><p>数据量分布数据与具体的数据特征无关，而是将数据视为一个顺序增长的文件，并将这个文件按照某一较为固定的大小划分为若干数据块（chunk），不同的数据块分布到不同的服务器上。与按数据范围分布数据的方式类似的是，按数据量分布数据也需要记录数据块的具体分布情况，并将该分布信息作为元数据使用元数据服务器管理。</p>
<p>由于与具体的数据内容无关，按数据量分布数据的方式一般没有数据倾斜的问题，数据总是被均匀切分并分布到集群中。当集群需要重新负载均衡时，只需通过迁移数据块即可完成。集群扩容也没有太大的限制，只需将部分数据库迁移到新加入的机器上即可以完成扩容。按数据量划分数据的缺点是需要管理较为复杂的元信息，与按范围分布数据的方式类似，当集群规模较大时，元信息的数据量也变得很大，高效的管理元信息成为新的课题。</p>
<h4 id="一致性哈希"><a href="#一致性哈希" class="headerlink" title="一致性哈希"></a><strong>一致性哈希</strong></h4><p>一致性哈希（consistent hashing）是另一个种在工程中使用较为广泛的数据分布方式。一致性哈希最初在P2P 网络中作为分布式哈希表（DHT）的常用数据分布算法。一致性哈希的基本方式是使用一个哈希函数计算数据或数据特征的哈希值，令该哈希函数的输出值域为一个封闭的环，即哈希函数输出的最大值是最小值的前序。将节点随机分布到这个环上，每个节点负责处理从自己开始顺时针至下一个节点的全部哈希值域上的数据。</p>
<p><img src="/2020/02/06/分布式基础要点/image-20200206203409796.png" alt="image-20200206203409796"></p>
<p>使用一致性哈希的方式需要将节点在一致性哈希环上的位置作为元信息加以管理，这点比直接使用哈希分布数据的方式要复杂。然而，节点的位置信息只于集群中的机器规模相关，其元信息的量通常比按数据范围分布数据和按数据量分布数据的元信息量要小很多。</p>
<p>为此一种常见的改进算法是引入虚节点（virtual node）的概念，系统初始时就创建许多虚节点，虚节点的个数一般远大于未来集群中机器的个数，将虚节点均匀分布到一致性哈希值域环上，其功能与基本一致性哈希算法中的节点相同。为每个节点分配若干虚节点。操作数据时，首先通过数据的哈希值在环上找到对应的虚节点，进而查找元数据找到对应的真实节点。使用虚节点改进有多个优点。首先，一旦某个节点不可用，该节点将使得多个虚节点不可用，从而使得多个相邻的真实节点负载失效节点的压里。同理，一旦加入一个新节点，可以分配多个虚节点，从而使得新节点可以 负载多个原有节点的压力，从全局看，较容易实现扩容时的负载均衡。</p>
<h4 id="副本与数据分布"><a href="#副本与数据分布" class="headerlink" title="副本与数据分布"></a><strong>副本与数据分布</strong></h4><p>分布式系统容错、提高可用性的基本手段就是使用副本。对于数据副本的分布方式主要影响系统的可扩展性。一种基本的数据副本策略是以机器为单位，若干机器互为副本，副本机器之间的数据完全相同。这种策略适用于上述各种数据分布方式。其优点是非常简单，其缺点是恢复数据的效率不高、可扩展性也不高。</p>
<p>更合适的做法不是以机器作为副本单位，而是将数据拆为较合理的数据段，以数据段为单位作为副本。实践中，常常使得每个数据段的大小尽量相等且控制在一定的大小以内。数据段有很多不同的称谓，segment，fragment，chunk，partition 等等。数据段的选择与数据分布方式直接相关。对于哈希分数据的方式，每个哈希分桶后的余数可以作为一个数据段，为了控制数据段的大小，常常使得分桶个数大于集群规模。一旦将数据分为数据段，则可以以数据段为单位管理副本，从而副本与机器不再硬相关，每台机器都可以负责一定数据段的副本。</p>
<p><img src="/2020/02/06/分布式基础要点/image-20200206203433498.png" alt="image-20200206203433498"></p>
<p>一旦副本分布与机器无关，数据丢失后的恢复效率将非常高。这是因为，一旦某台机器的数据丢失，其上数据段的副本将分布在整个集群的所有机器中，而不是仅在几个副本机器中，从而可以从整个集群同时拷贝恢复数据，而集群中每台数据源机器都可以以非常低的资源做拷贝。作为恢复数据源的机器即使都限速1MB/s，若有100 台机器参与恢复，恢复速度也能达到100MB/s。再者，副本分布与机器无关也利于集群容错。如果出现机器宕机，由于宕机机器上的副本分散于整个集群，其压力也自然分散到整个集群。最后，副本分布与机器无关也利于集群扩展。理论上，设集群规模 为N 台机器，当加入一台新的机器时，只需从各台机器上迁移1/N – 1/N+1 比例的数据段到新机器即实现了新的负载均衡。由于是从集群中各机器迁移数据，与数据恢复同理，效率也较高。工程中，完全按照数据段建立副本会引起需要管理的元数据的开销增大，副本维护的难度也相应增大。一种折中的做法是将某些数据段组成一个数据段分组，按数据段分组为粒度进行副本管理。这样做可以将副本粒度控制在一个较为合适的范围内。</p>
<h4 id="本地化计算"><a href="#本地化计算" class="headerlink" title="本地化计算"></a><strong>本地化计算</strong></h4><p>在分布式系统中，数据的分布方式也深深影响着计算的分布方式。在分布式系统中计算节点和保存计算数据的存储节点可以在同一台物理机器上，也可以位于不同的物理机器。如果计算节点和存储节点位于不同的物理机器则计算的数据需要通过网络传输，此种方式的开销很大，甚至网络带宽会成为系统的总体瓶颈。另一种思路是，将计算尽量调度到与存储节点在同一台物理机器上的计算节点上进行，这称之为本地化计算。本地化计算是计算调度的一种重要优化，其体现了一种重要的分布式调度思想：“移动数据不如移动计算”。</p>
<h4 id="数据分布方式的选择"><a href="#数据分布方式的选择" class="headerlink" title="数据分布方式的选择"></a><strong>数据分布方式的选择</strong></h4><p>在实际工程实践中，可以根据需求及实施复杂度合理选择数据分布方式。另外，数据分布方式是可以灵活组合使用的，往往可以兼备各种方式的优点，收到较好的综合效果。</p>
<p>例：数据倾斜问题，在按哈希分数据的基础上引入按数据量分布数据的方式，解决该数据倾斜问题。按用户id 的哈希值分数据，当某个用户id 的数据量特别大时，该用户的数据始终落在某一台机器上。此时，引入按数据量分布数据的方式，统计用户的数据量，并按某一阈值将用户的数据切为多个均匀的数据段，将这些数据段分布到集群中去。由于大部分用户的数据量不会超过阈值，所以元数据中仅仅保存超过阈值的用户的数据段分布信息，从而可以控制元数据的规模。这种哈希分布数据方式与按数据量分布数据方式组合使用的方案，在某真实系统中使用，取得了较好的效果。</p>
<h3 id="2-2-基本副本协议"><a href="#2-2-基本副本协议" class="headerlink" title="2.2 基本副本协议"></a><strong>2.2 基本副本协议</strong></h3><p>副本控制协议指按特定的协议流程控制副本数据的读写行为，使得副本满足一定的可用性和一致性要求的分布式协议。副本控制协议要具有一定的对抗异常状态的容错能力，从而使得系统具有一定的可用性，同时副本控制协议要能提供一定一致性级别。由CAP 原理（在2.9 节详细分析）可知，要设计一种满足强一致性，且在出现任何网络异常时都可用的副本协议是不可能的。为此，实际中的副本控制协议总是在可用性、一致性与性能等各要素之间按照具体需求折中。</p>
<p>副本控制协议可以分为两大类：“中心化(centralized)副本控制协议”和“去中心化(decentralized)副本控制协议”。</p>
<h4 id="中心化副本控制协议"><a href="#中心化副本控制协议" class="headerlink" title="中心化副本控制协议"></a><strong>中心化副本控制协议</strong></h4><p>中心化副本控制协议的基本思路是由一个中心节点协调副本数据的更新、维护副本之间的一致性。图给出了中心化副本协议的通用架构。中心化副本控制协议的优点是协议相对较为简单，所有的副本相关的控制交由中心节点完成。并发控制将由中心节点完成，从而使得一个分布式并发控制问题，简化为一个单机并发控制问题。所谓并发控制，即多个节点同时需要修改副本数据时，需要解决“写写”、“读写”等并发冲突。单机系统上常用加锁等方式进行并发控制。对于分布式并发控制，加锁也是一个常用的方法，但如果没有中心节点统一进行锁管理，就需要完全分布式化的锁系统，会使得协议非常复杂。中心化副本控制协议的缺点是系统的可用性依赖于中心化节点，当中心节点异常或与中心节点通信中断时，系统将失去某些服务（通常至少失去更新服务），所以中心化副本控制协议的缺点正是存在一定的停服务时间。</p>
<p><img src="/2020/02/06/分布式基础要点/image-20200206203512899.png" alt="image-20200206203512899"></p>
<h4 id="primary-secondary-协议"><a href="#primary-secondary-协议" class="headerlink" title="primary-secondary 协议"></a><strong>primary-secondary 协议</strong></h4><p>在primary-secondary 类型的协议中，副本被分为两大类，其中有且仅有一个副本作为primary 副本，除primary 以外的副本都作为secondary 副本。维护primary 副本的节点作为中心节点，中心节点负责维护数据的更新、并发控制、协调副本的一致性。</p>
<p>Primary-secondary 类型的协议一般要解决四大类问题：数据更新流程、数据读取方式、Primary 副本的确定和切换、数据同步（reconcile）。</p>
<h5 id="数据更新基本流程"><a href="#数据更新基本流程" class="headerlink" title="数据更新基本流程"></a>数据更新基本流程</h5><ol>
<li>数据更新都由primary 节点协调完成。</li>
<li>外部节点将更新操作发给primary 节点</li>
<li>primary 节点进行并发控制即确定并发更新操作的先后顺序</li>
<li>primary 节点将更新操作发送给secondary 节点</li>
<li>primary 根据secondary 节点的完成情况决定更新是否成功并将结果返回外部节点</li>
</ol>
<p><img src="/2020/02/06/分布式基础要点/image-20200206203526071.png" alt="image-20200206203526071"></p>
<p>在工程实践中，如果由primary 直接同时发送给其他N 个副本发送数据，则每个 secondary 的更新吞吐受限于primary 总的出口网络带宽，最大为primary 网络出口带宽的1/N。为了解决这个问题，有些系统（例如，GFS），使用接力的方式同步数据，即primary 将更新发送给第一 个secondary 副本，第一个secondary 副本发送给第二secondary 副本，依次类推。</p>
<h5 id="数据读取方式"><a href="#数据读取方式" class="headerlink" title="数据读取方式"></a><strong>数据读取方式</strong></h5><p>数据读取方式也与一致性高度相关。如果只需要最终一致性，则读取任何副本都可以满足需求。如果需要会话一致性，则可以为副本设置版本号，每次更新后递增版本号，用户读取副本时验证版本号，从而保证用户读到的数据在会话范围内单调递增。使用primary-secondary 比较困难的是实现强一致性。</p>
<ol>
<li>由于数据的更新流程都是由primary 控制的，primary 副本上的数据一定是最新的，所以 如果始终只读primary 副本的数据，可以实现强一致性。如果只读primary 副本，则secondary 副本将不提供读服务。实践中，如果副本不与机器绑定，而是按照数据段为单位维护副本，仅有primary 副本提供读服务在很多场景下并不会造出机器资源浪费。</li>
</ol>
<p>将副本分散到集群中个，假设primary 也是随机的确定的，那么每台机器上都有一些数据的primary 副本，也有另一些数据段的secondary 副本。从而某台服务器实际都提供读写服务。</p>
<ol>
<li>由primary 控制节点secondary 节点的可用性。当primary 更新某个secondary 副本不成功时，primary 将该secondary 副本标记为不可用，从而用户不再读取该不可用的副本。不可用的 secondary 副本可以继续尝试与primary 同步数据，当与primary 完成数据同步后，primary 可以副本标记为可用。这种方式使得所有的可用的副本，无论是primary 还是secondary 都是可读的，且在一个确定的时间内，某secondary 副本要么更新到与primary 一致的最新状态，要么被标记为不可用，从而符合较高的一致性要求。这种方式依赖于一个中心元数据管理系统，用于记录哪些副本可用，哪些副本不可用。某种意义上，该方式通过降低系统的可用性来提高系统的一致性。</li>
</ol>
<h5 id="primary-副本的确定与切换"><a href="#primary-副本的确定与切换" class="headerlink" title="primary 副本的确定与切换"></a><strong>primary 副本的确定与切换</strong></h5><p>在primary-secondary 类型的协议中，另一个核心的问题是如何确定primary 副本，尤其是在原primary 副本所在机器出现宕机等异常时，需要有某种机制切换primary 副本，使得某个secondary 副本成为新的primary 副本。</p>
<p>通常的，在primary-secondary 类型的分布式系统中，哪个副本是primary 这一信息都属于元信息，由专门的元数据服务器维护。执行更新操作时，首先查询元数据服务器获取副本的primary 信息，从而进一步执行数据更新流程。</p>
<p>由于分布式系统中可靠的发现节点异常是需要一定的探测时间的，这样的探测时间通常是10 秒级别，这也意味着一旦primary 异常，最多需要10 秒级别的发现时间，系统才能开始primary 的切换，在这10 秒时间内，由于没有primary，系统不能提供更 新服务，如果系统只能读primary 副本，则这段时间内甚至不能提供读服务。从这里可以看到，primary-backup 类副本协议的最大缺点就是由于primary 切换带来的一定的停服务时间。</p>
<h5 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a><strong>数据同步</strong></h5><p>不一致的secondary 副本需要与primary 进行同步（reconcile）。</p>
<p>通常不一致的形式有三种：一、由于网络分化等异常，secondary 上的数据落后于primary 上的数据。二、在某些协议下，secondary 上的数据有可能是脏数据，需要被丢弃。所谓脏数据是由于primary 副本没有进行某一更新操作，而secondary 副本上反而进行的多余的修改操作，从而造成secondary 副本数据错误。三、secondary 是一个新增加的副本，完全没有数据，需要从其他副本上拷贝数据。</p>
<p>对于第一种secondary 数据落后的情况，常见的同步方式是回放primary 上的操作日志（通常是redo 日志），从而追上primary 的更新进度。对于脏数据的情况，较好的做法是设计的分布式协议不产生脏数据。如果协议一定有产生脏数据的可能，则也应该使得产生脏数据的概率降到非常低得情况，从而一旦发生脏数据的情况可以简单的直接丢弃有脏数据的副本，这样相当于副本没有数据。另外，也可以设计一些基于undo 日志的方式从而可以删除脏数据。如果secondary 副本完全没有数据，则常见的做法是直接拷贝primary 副本的数据，这种方法往往比回放日志追更新进度的方法快很多。但拷贝数据时primary 副本需要能够继续提供更新服务，这就要求primary 副本支持快照(snapshot)功能。即对某一刻的副本数据形成快照，然后拷贝快照，拷贝完成后使用回放日志的方式追快照形成后的更新操作。</p>
<h4 id="去中心化副本控制协议"><a href="#去中心化副本控制协议" class="headerlink" title="去中心化副本控制协议"></a><strong>去中心化副本控制协议</strong></h4><p>去中心化副本控制协议没有中心节点，协议中所有的节点都是完全对等的，节点之间通过平等协商达到一致。从而去中心化协议没有因为中心化节点异常而带来的停服务等问题。</p>
<p>去中心化协议的最大的缺点是协议过程通常比较复杂。尤其当去中心化协议需要实现强一致性时，协议流程变得复杂且不容易理解。由于流程的复杂，去中心化协议的效率或者性能一般也较中心化协议低。一个不恰当的比方就是，中心化副本控制协议类似专制制度，系统效率高但高度依赖于中心节点，一旦中心节点异常，系统受到的影响较大；去中心化副本控制协议类似民主制度，节点集体协商，效率低下，但个别节点的异常不会对系统总体造成太大影响。</p>
<p><img src="/2020/02/06/分布式基础要点/image-20200206203546614.png" alt="image-20200206203546614"></p>
<h3 id="2-3-Lease-机制"><a href="#2-3-Lease-机制" class="headerlink" title="2.3 Lease 机制"></a><strong>2.3 Lease 机制</strong></h3><p>Lease 机制是最重要的分布式协议，广泛应用于各种实际的分布式系统中。</p>
<h4 id="基于lease-的分布式cache-系统"><a href="#基于lease-的分布式cache-系统" class="headerlink" title="基于lease 的分布式cache 系统"></a><strong>基于lease 的分布式cache 系统</strong></h4><p>基本的问题背景如下：在一个分布式系统中，有一个中心服务器节点，中心服务器存储、维护着一些数据，这些数据是系统的元数据。系统中其他的节点通过访问中心服务器节点读取、修改其上的元数据。由于系统中各种操作都依赖于元数据，如果每次读取元数据的操作都访问中心服务器 节点，那么中心服务器节点的性能成为系统的瓶颈。为此，设计一种元数据cache，在各个节点上 cache 元数据信息，从而减少对中心服务器节点的访问，提高性能。另一方面，系统的正确运行严格依赖于元数据的正确，这就要求各个节点上cache 的数据始终与中心服务器上的数据一致，cache 中的数据不能是旧的脏数据。最后，设计的cache 系统要能最大可能的处理节点宕机、网络中断等异常，最大程度的提高系统的可用性。</p>
<p>为此，利用lease 机制设计一套cache 系统，其基本原理为如下。中心服务器在向各节点发送数据时同时向节点颁发一个lease。每个lease 具有一个有效期，和信用卡上的有效期类似，lease 上的 有效期通常是一个明确的时间点，例如12:00:10，一旦真实时间超过这个时间点，则lease 过期失效。这样lease 的有效期与节点收到lease 的时间无关，节点可能收到lease 时该lease 就已经过期失效。这里首先假设中心服务器与各节点的时钟是同步的，在下节中讨论时钟不同步对lease 的影响。中心服务器发出的lease 的含义为：在lease 的有效期内，中心服务器保证不会修改对应数据的值。因此，节点收到数据和lease 后，将数据加入本地Cache，一旦对应的lease 超时，节点将对应的本地cache 数据删除。中心服务器在修改数据时，首先阻塞所有新的读请求，并等待之前为该数据发出的所有lease 超时过期，然后修改数据的值。</p>
<p>基于lease 的cache，客户端节点读取元数据</p>
<ol>
<li>判断元数据是否已经处于本地cache 且lease 处于有效期内1.1 是：直接返回cache 中的元数据1.2 否：向中心服务器节点请求读取元数据信息1.2.1 服务器收到读取请求后，返回元数据及一个对应的lease 1.2.2 客户端是否成功收到服务器返回的数据  1.2.2.1 失败或超时：退出流程，读取失败，可重试1.2.2.2 成功：将元数据与该元数据的lease 记录到内存中，返回元数据</li>
<li>基于lease 的cache，客户端节点修改元数据流程2.1 节点向服务器发起修改元数据请求。2.2 服务器收到修改请求后，阻塞所有新的读数据请求，即接收读请求，但不返回数据。2.3 服务器等待所有与该元数据相关的lease 超时。2.4 服务器修改元数据并向客户端节点返回修改成功。</li>
</ol>
<p>上述机制可以保证各个节点上的cache 与中心服务器上的中心始终一致。这是因为中心服务器节点在发送数据的同时授予了节点对应的lease，在lease 有效期内，服务器不会修改数据，从而客户端节点可以放心的在lease 有效期内cache 数据。上述lease 机制可以容错的关键是：服务器一旦 发出数据及lease，无论客户端是否收到，也无论后续客户端是否宕机，也无论后续网络是否正常，服务器只要等待lease 超时，就可以保证对应的客户端节点不会再继续cache 数据，从而可以放心的修改数据而不会破坏cache 的一致性。</p>
<p>上述基础流程有一些性能和可用性上的问题，但可以很容易就优化改性。优化点一：服务器在修改元数据时首先要阻塞所有新的读请求，造成没有读服务。这是为了防止发出新的lease 从而引起不断有新客户端节点持有lease 并缓存着数据，形成“活锁”。优化的方法很简单，服务器在进入修改数据流程后，一旦收到读请求则只返回数据但不颁发lease。从而造成在修改流程执行的过程中，客户端可以读到元数据，只是不能缓存元数据。进一步的优化是，当进入修改流程，服务器颁发的lease 有效期限选择为已发出的lease 的最大有效期限。这样做，客户端可以继续在服务器进入修改流程后继续缓存元数据，但服务器的等待所有lease 过期的时间也不会因为颁发新的lease 而不断延长。</p>
<p>最后，cache 机制与多副本机制的区别。Cache 机制与多副本机制的相似之处都 是将一份数据保存在多个节点上。但Cache 机制却要简单许多，对于cache 的数据，可以随时删除丢弃，并命中cache 的后果仅仅是需要访问数据源读取数据；然而副本机制却不一样，副本是不能随意丢弃的，每失去一个副本，服务质量都在下降，一旦副本数下降到一定程度，则往往服务将不再可用。</p>
<h5 id="lease-机制的分析"><a href="#lease-机制的分析" class="headerlink" title="lease 机制的分析"></a><strong>lease 机制的分析</strong></h5><p>lease 的定义：Lease 是由颁发者授予的在某一有效期内的承诺。颁发者一旦发出lease，则无论接受方是否收到，也无论后续接收方处于何种状态，只要lease 不过期，颁发者一定严守承诺；另一方面，接收方在lease 的有效期内可以使用颁发者的承诺，但一旦lease 过期，接收方一定不能继续使用颁发者的承诺。</p>
<p>Lease 机制具有很高的容错能力。首先，通过引入有效期，Lease 机制能否非常好的容错网络异常。Lease 颁发过程只依赖于网络可以单向通信，即使接收方无法向颁发者发送消息，也不影响lease 的颁发。由于lease 的有效期是一个确定的时间点，lease 的语义与发送lease 的具体时间无关，所以 同一个lease 可以被颁发者不断重复向接受方发送。即使颁发者偶尔发送lease 失败，颁发者也可以 简单的通过重发的办法解决。一旦lease 被接收方成功接受，后续lease 机制不再依赖于网络通信，即使网络完全中断lease 机制也不受影响。再者，Lease 机制能较好的容错节点宕机。如果颁发者宕机，则宕机的颁发者通常无法改变之前的承诺，不会影响lease 的正确性。在颁发者机恢复后，如果颁发者恢复出了之前的lease 信息，颁发者可以继续遵守lease 的承诺。如果颁发者无法恢复lease 信息，则只需等待一个最大的lease 超时时间就可以使得所有的lease 都失效，从而不破坏lease机制。</p>
<p>例如上节中的cache 系统的例子中，一旦服务器宕机，肯定不会修改元数据，重新恢复后，只需等待一个最大的lease 超时时间，所有节点上的缓存信息都将被清空。对于接受方宕机的情况，颁发者 不需要做更多的容错处理，只需等待lease 过期失效，就可以收回承诺，实践中也就是收回之前赋予的权限、身份等。最后，lease 机制不依赖于存储。颁发者可以持久化颁发过的lease 信息，从而在 宕机恢复后可以使得在有效期的lease 继续有效。但这对于lease 机制只是一个优化，如之前的分析，即使颁发者没有持久化lease 信息，也可以通过等待一个最大的lease 时间的方式使得之前所有颁发 的lease 失效，从而保证机制继续有效。</p>
<p>Lease 机制依赖于有效期，这就要求颁发者和接收者的时钟是同步的。一方面，如果颁发者的 时钟比接收者的时钟慢，则当接收者认为lease 已经过期的时候，颁发者依旧认为lease 有效。接收者可以用在lease 到期前申请新的lease 的方式解决这个问题。另一方面，如果颁发者的时钟比接收 者的时钟快，则当颁发者认为lease 已经过期的时候，接收者依旧认为lease 有效，颁发者可能将lease 颁发给其他节点，造成承诺失效，影响系统的正确性。对于这种时钟不同步，实践中的通常做法是将颁发者的有效期设置得比接收者的略大，只需大过时钟误差就可以避免对lease 的有效性的影响。</p>
<h5 id="基于lease-机制确定节点状态"><a href="#基于lease-机制确定节点状态" class="headerlink" title="基于lease 机制确定节点状态"></a><strong>基于lease 机制确定节点状态</strong></h5><p>分布式协议依赖于对节点状态认知的全局一致性，即一旦节点Q 认为某个节点 A 异常，则节点A 也必须认为自己异常，从而节点A 停止作为primary，避免“双主”问题的出现。解决这种问题有两种思路，第一、设计的分布式协议可以容忍“双主”错误，即不依赖于对节点状 态的全局一致性认识，或者全局一致性状态是全体协商后的结果；第二、利用lease 机制。对于第一 种思路即放弃使用中心化的设计，而改用去中心化设计，超过本节的讨论范畴。下面着重讨论利用 lease 机制确定节点状态。</p>
<p>由中心节点向其他节点发送lease，若某个节点持有有效的lease，则认为该节点正常可以提供服 务。用于例2.3.1 中，节点A、B、C 依然周期性的发送heart beat 报告自身状态，节点Q 收到heart beat 后发送一个lease，表示节点Q 确认了节点A、B、C 的状态，并允许节点在lease 有效期内正常工 作。节点Q 可以给primary 节点一个特殊的lease，表示节点可以作为primary 工作。一旦节点Q 希望切换新的primary，则只需等前一个primary 的lease 过期，则就可以安全的颁发新的lease 给新的 primary 节点，而不会出现“双主”问题。</p>
<p>在实际系统中，若用一个中心节点发送lease 也有很大的风险，一旦该中心节点宕机或网络异常，则所有的节点没有lease，从而造成系统高度不可用。为此，实际系统总是使用多个中心节点互为副本，成为一个小的集群，该小集群具有高可用性，对外提供颁发lease 的功能。chubby 和zookeeper 都是基于这样的设计。</p>
<h5 id="lease-的有效期时间选择"><a href="#lease-的有效期时间选择" class="headerlink" title="lease 的有效期时间选择"></a><strong>lease 的有效期时间选择</strong></h5><p>工程中，常选择的lease 时长是10 秒级别，这是一个经过验证的经验值，实践中可以作为参考并综合选择合适的时长。</p>
<h3 id="2-4-Quorum-机制"><a href="#2-4-Quorum-机制" class="headerlink" title="2.4 Quorum 机制"></a><strong>2.4 Quorum 机制</strong></h3><p>先做这样的约定：更新操作（write）是一系列顺序的过程，通过其他机制确定更新操作的顺序（例如primary-secondary 架构中由primary 决定顺序），每个更新操作记为wi， i 为更新操作单调递增的序号，每个wi 执行成功后副本数据都发生变化，称为不同的数据版本，记 作vi。假设每个副本都保存了历史上所有版本的数据。</p>
<h4 id="write-all-read-one"><a href="#write-all-read-one" class="headerlink" title="write-all-read-one"></a><strong>write-all-read-one</strong></h4><p>Write-all-read-one（简称WARO）是一种最简单的副本控制规则，顾名思义即在更新时写所有的副本，只有在所有的副本上更新成功，才认为更新成功，从而保证所有的副本一致，这样在读取数据时可以读任一副本上的数据。</p>
<p>由于更新操作需要在所有的N 个副本上都成功，更新操作才能成 功，所以一旦有一个副本异常，更新操作失败，更新服务不可用。对于更新服务，虽然有N 个副本， 但系统无法容忍任何一个副本异常。另一方面，N 个副本中只要有一个副本正常，系统就可以提供读服务。对于读服务而言，当有N 个副本时，系统可以容忍N-1 个副本异常。从上述分析可以发现WARO 读服务的可用性较高，但更新服务的可用性不高，甚至虽然使用了副本，但更新服务的可用性等效于没有副本。</p>
<h4 id="Quorum-定义"><a href="#Quorum-定义" class="headerlink" title="Quorum 定义"></a><strong>Quorum 定义</strong></h4><p>在Quorum 机制下，当某次更新操作wi 一旦在所有N 个副本中的W 个副本上都成功，则就称 该更新操作为“成功提交的更新操作”，称对应的数据为“成功提交的数据”。令R&gt;N-W，由于更新 操作wi 仅在W 个副本上成功，所以在读取数据时，最多需要读取R 个副本则一定能读到wi 更新后 的数据vi 。如果某次更新wi 在W 个副本上成功，由于W+R&gt;N，任意R 个副本组成的集合一定与 成功的W个副本组成的集合有交集，所以读取R 个副本一定能读到wi 更新后的数据vi。如图 2-10， Quorum 机制的原理可以文森图表示。</p>
<p><img src="/2020/02/06/分布式基础要点/image-20200206203639455.png" alt="image-20200206203639455"></p>
<p>某系统有5 个副本，W=3，R=3，最初5 个副本的数据一致，都是v1，某次更新操作 w2 在前3 副本上成功，副本情况变成（v2 v2 v2 v1 v1）。此时，任意3 个副本组成的集合中一定包括 v2。在上述定义中，令W=N，R=1，就得到WARO，即WARO 是Quorum 机制的一种特例。与分析WARO 相似，分析Quorum 机制的可用性。限制Quorum 参数为W+R=N+1。由于更新 操作需要在W 个副本上都成功，更新操作才能成功，所以一旦N-W+1 个副本异常，更新操作始终无法在W 个副本上成功，更新服务不可用。另一方面，一旦N-R+1 个副本异常，则无法保证一定可以读到与W 个副本有交集的副本集合，则读服务的一致性下降。</p>
<p>再次强调：仅仅依赖quorum 机制是无法保证强一致性的。因为仅有quorum 机制时无法确定最新已成功提交的版本号，除非将最新已提交的版本号作为元数据由特定的元数据服务器或元数据集群管理，否则很难确定最新成功提交的版本号。在下一节中，将讨论在哪些情况下，可以仅仅 通过quorum 机制来确定最新成功提交的版本号。</p>
<p>Quorum 机制的三个系统参数N、W、R 控制了系统的可用性，也是系统对用户的服务承诺：数据最多有N 个副本，但数据更新成功W 个副本即返回用户成功。对于一致性要求较高的Quorum 系统，系统还应该承诺任何时候不读取未成功提交的数据，即读取到的数据都是曾经在W 个副本上成功的数据。</p>
<h4 id="读取最新成功提交的数据"><a href="#读取最新成功提交的数据" class="headerlink" title="读取最新成功提交的数据"></a><strong>读取最新成功提交的数据</strong></h4><p>Quorum 机制只需成功更新N 个副本中的W 个，在读取R 个副本时，一定可以读到最新的成功提交的数据。但由于有不成功的更新情况存在，仅仅读取R 个副本却不一定能确定哪个版本的数据 是最新的已提交的数据。对于一个强一致性Quorum 系统，若存在个数据少于W 个，假设为X 个，则继续读取其他副本，直若成功读取到W 个 该版本的副本，则该数据为最新的成功提交的数据；如果在所有副本中该数据的个数肯定不满 足W 个，则R 中版本号第二大的为最新的成功提交的副本。例：在读取到（v2 v1 v1）时，继续读取剩余的副本，若读到剩余两个副本 为（v2 v2）则v2 是最新的已提交的副本；若读到剩余的两个副本为（v2 v1）或（v1 v1）则v1 是最新成功提交的版本；若读取后续两个副本有任一超时或失败，则无法判断哪个版本是最新的成功提交的版本。</p>
<p>可以看出，在单纯使用Quorum 机制时，若要确定最新的成功提交的版本，最多需要读取R+ （W-R-1）=N 个副本，当出现任一副本异常时，读最新的成功提交的版本这一功能都有可能不可用。实际工程中，应该尽量通过其他技术手段，回避通过Quorum 机制读取最新的成功提交的版本。例如，当quorum 机制与primary-secondary 控制协议结合使用时，可以通过读取primary 的方式读取到最新的已提交的数据。</p>
<h4 id="基于Quorum-机制选择primary副本"><a href="#基于Quorum-机制选择primary副本" class="headerlink" title="基于Quorum 机制选择primary副本"></a><strong>基于Quorum 机制选择primary副本</strong></h4><p>读取数据时依照一致性要求的不同可以有不同的做法：如果需要强一致性的立刻读取到最新的成功提交的数据，则可以简单的只读取primary 副本上的数据即可，也可以通过上节的方式读取；如果需要会话一致性，则可以根据之前已经读到的数据版本号在各个副本上进行选择性读取；如果只需要弱一致性，则可以选择任意副本读取。</p>
<p>在primary-secondary 协议中，当primary 异常时，需要选择出一个新的primary，之后secondary 副本与primary 同步数据。通常情况下，选择新的primary 的工作是由某一中心节点完成的，在引入 quorum 机制后，常用的primary 选择方式与读取数据的方式类似，即中心节点读取R 个副本，选择 R 个副本中版本号最高的副本作为新的primary。新primary 与至少W 个副本完成数据同步后作为新的primary 提供读写服务。首先，R 个副本中版本号最高的副本一定蕴含了最新的成功提交的数据。再者，虽然不能确定最高版本号的数是一个成功提交的数据，但新的primary 在随后与secondary 同 步数据，使得该版本的副本个数达到W，从而使得该版本的数据成为成功提交的数据。</p>
<p>例：在N=5，W=3，R=3 的系统中，某时刻副本最大版本号为（v2 v2 v1 v1 v1），此时v1 是系统的最新的成功提交的数据，v2 是一个处于中间状态的未成功提交的数据。假设此刻原primary 副本异常，中心节点进行primary 切换工作。这类“中间态”数据究竟作为“脏数据”被删除，还是作为新的数据被同步后成为生效的数据，完全取决于这个数据能否参与新primary 的选举。下面分别分析这两种情况。</p>
<p><img src="/2020/02/06/分布式基础要点/image-20200206203657503.png" alt="image-20200206203657503"></p>
<p>第一、如图 2-12，若中心节点与其中3 个副本通信成功，读取到的版本号为（v1 v1 v1），则任 选一个副本作为primary，新primary 以v1 作为最新的成功提交的版本并与其他副本同步，当与第1、第2 个副本同步数据时，由于第1、第2 个副本版本号大于primary，属于脏数据，可以按照2.2.2.4 节中介绍的处理脏数据的方式解决。实践中，新primary 也有可能与后两个副本完成同步后就提供数据服务，随后自身版本号也更新到v2，如果系统不能保证之后的v2 与之前的v2 完全一样，则新 primary 在与第1、2 个副本同步数据时不但要比较数据版本号还需要比较更新操作的具体内容是否一样。</p>
<p><img src="/2020/02/06/分布式基础要点/image-20200206203707864.png" alt="image-20200206203707864"></p>
<p>第二、若中心节点与其他3 个副本通信成功，读取到的版本号为（v2 v1 v1），则选取版本号为 v2 的副本作为新的primary，之后，一旦新primary 与其他2 个副本完成数据同步，则符合v2 的副 本个数达到W 个，成为最新的成功提交的副本，新primary 可以提供正常的读写服务。</p>
<h3 id="2-5-日志技术"><a href="#2-5-日志技术" class="headerlink" title="2.5 日志技术"></a><strong>2.5 日志技术</strong></h3><p>日志技术是宕机恢复的主要技术之一。日志技术最初使用在数据库系统中。严格来说日志技术不是一种分布式系统的技术，但在分布式系统的实践中，却广泛使用了日志技术做宕机恢复，甚 至如BigTable 等系统将日志保存到一个分布式系统中进一步增强了系统容错能力。</p>
<h4 id="Redo-Log-与Check-point"><a href="#Redo-Log-与Check-point" class="headerlink" title="Redo Log 与Check point"></a><strong>Redo Log 与Check point</strong></h4><p>设计一个高速的单机查询系统，将数据全部存放在内存中以实现高速的数据查询，每次更新操作更新一小部分数据（例如 key-value 中的某一个key）。现在问题为利用日志技术实现该内存查询系统的宕机恢复。与数据库的事务不同的是，这个问题模型中的每个成功的更新操作都会生效。这也等效为数据库的每个事务只有一个更新操作，且每次更新操作都可以也必须立即提交（Auto commit）。</p>
<ul>
<li><h5 id="Redo-Log"><a href="#Redo-Log" class="headerlink" title="Redo Log"></a>Redo Log</h5></li>
</ul>
<ol>
<li>将更新操作的结果（例如Set K1=1，则记录K1=1）以追加写（append）的方式写入磁盘的 日志文件</li>
<li>按更新操作修改内存中的数据</li>
<li>返回更新成功</li>
</ol>
<p>从Redo Log 的流程可以看出，Redo 写入日志的是更新操作完成后的结果（虽然本文不讨论Undo Log，这点是与Undo Log 的区别之一），且由于是顺序追加写日志文件，在磁盘等对顺序写有力的 存储设备上效率较高。</p>
<p>用Redo Log 进行宕机恢复非常简单，只需要“回放”日志即可。</p>
<p>流程2.5.2：Redo Log 的宕机恢复</p>
<ol>
<li>从头读取日志文件中的每次更新操作的结果，用这些结果修改内存中的数据。</li>
</ol>
<p>从Redo Log 的宕机恢复流程也可以看出，只有写入日志文件的更新结果才能在宕机后恢复。这也是为什么在Redo Log 流程中需要先更新日志文件再更新内存中的数据的原因。假如先更新内存中的数据，那么用户立刻就能读到更新后的数据，一旦在完成内存修改与写入日志之间发生宕机，那么最后一次更新操作无法恢复，但之前用户可能已经读取到了更新后的数据，从而引起不一致的问题。</p>
<ul>
<li><h5 id="Check-point"><a href="#Check-point" class="headerlink" title="Check point"></a>Check point</h5></li>
</ul>
<p>。在简化的模型下，check point 技术的过程即将内存中的数据以某种易于重新加载的数据组织方式完整的dump 到磁盘，从而减少宕机恢复时需要回放的日志数据。</p>
<p>流程：check point</p>
<ol>
<li>向日志文件中记录“Begin Check Point”</li>
<li>将内存中的数据以某种易于重新加载的数据组织方式dump 到磁盘上</li>
<li>向日志文件中记录“End Check Point” 在check point 流程中，数据可以继续按照流程2.5.1 被更新，这段过程中新更新的数据可以dump 到磁盘也可以不dump 到磁盘，具体取决于实现。例如，check point 开始时k1=v1，check point 过程 中某次更新为k1 = v2，那么dump 到磁盘上的k1 的值可以是v1 也可以是v2。</li>
</ol>
<p>流程：基于check point 的宕机恢复流程</p>
<ol>
<li>将dump 到磁盘的数据加载到内存。</li>
<li>从后向前扫描日志文件，寻找最后一个“End Check Point”日志。</li>
<li>从最后一个“End Check Point”日志向前找到最近的一个“Begin Check Point”日志，并回 放该日志之后的所有更新操作日志。</li>
</ol>
<ul>
<li><h4 id="No-Undo-No-Redo-log"><a href="#No-Undo-No-Redo-log" class="headerlink" title="No Undo/No Redo log"></a>No Undo/No Redo log</h4></li>
</ul>
<p>若数据维护在磁盘中，某批更新由若干个更新操作组成，这些更新操作需要原子生效，即要么同时生效，要么都不生效。</p>
<p><img src="/2020/02/06/分布式基础要点/image-20200206203755875.png" alt="image-20200206203755875"></p>
<p>0/1 目录技术中有两个目录结构，称为目录0(Directory 0)和目录1(Directory 1)。另有一个结构称为主记录（Master record）记录当前正在使用的目录称为活动目录。主记录中要么记录使用目录0，要么记录使用目录1。目录0 或目录1 中记录了各个数据的在日志文件中的位置。0/1 目录的数据更新过程始终在非活动目录上进行，只是在数据生效前，将主记录中的0、1 值反转，从而切换主记录。</p>
<p>流程：0/1 目录数据更新流程</p>
<ol>
<li>将活动目录完整拷贝到非活动目录。</li>
<li>对于每个更新操作，新建一个日志项纪录操作后的值，并在非活动目录中将相应数据的位置修改为新建的日志项的位置。</li>
<li>原子性修改主记录：反转主记录中的值，使得非活动目录生效。</li>
</ol>
<p>0/1 目录的更新流程非常简单，通过0、1 目录的主记录切换使得一批修改的生效是原子的。0/1 目录将批量事务操作的原子性通过目录手段归结到主记录的原子切换。由于多条记录的原子修改一般较难实现而单条记录的原子修改往往可以实现，从而降低了问题实现的难度。在工程中0/1 目录的思想运用非常广泛，其形式也不局限在上述流程中，可以是内存中的两个数据结构来回切换，也可以是磁盘上的两个文件目录来回生效切换。</p>
<h3 id="2-6-两阶段提交协议"><a href="#2-6-两阶段提交协议" class="headerlink" title="2.6 两阶段提交协议"></a><strong>2.6 两阶段提交协议</strong></h3><p>两阶段提交协议是一种经典的强一致性中心化副本控制协议。虽然在工程中该协议有较多的问题，但研究该协议能很好的理解分布式系统的几个典型问题。</p>
<h4 id="流程描述"><a href="#流程描述" class="headerlink" title="流程描述"></a><strong>流程描述</strong></h4><p>两阶段提交协议是一种典型的“中心化副本控制”协议。在该协议中，参与的节点分为两类：一个中心化协调者节点（coordinator）和N 个参与者节点（participant）。每个参与者节点即上文背景介绍中的管理数据库副本的节点。</p>
<p>两阶段提交的思路比较简单，在第一阶段，协调者询问所有的参与者是否可以提交事务（请参与者投票），所有参与者向协调者投票。在第二阶段，协调者根据所有参与者的投票结果做出是否事务可以全局提交的决定，并通知所有的参与者执行该决定。在一个两阶段提交流程中，参与者不能改变自己的投票结果。两阶段提交协议的可以全局提交的前提是所有的参与者都同意提交事务，只要有一个参与者投票选择放弃(abort)事务，则事务必须被放弃。</p>
<p>流程：两阶段提交协调者流程</p>
<ol>
<li>写本地日志“begin_commit”，并进入WAIT 状态；</li>
<li>向所有参与者发送“prepare 消息”；</li>
<li>等待并接收参与者发送的对“prepare 消息”的响应；3.1 若收到任何一个参与者发送的“vote-abort 消息”；3.1.1 写本地“global-abort”日志，进入ABORT；3.1.2 向所有的参与者发送“global-abort 消息”；3.1.3 进入ABORT 状态；3.2 若收到所有参与者发送的“vote-commit”消息；3.2.1 写本地“global-commit”日志，进入COMMIT 状态；3.1.2 向所有的参与者发送“global-commit 消息”；</li>
<li>等待并接收参与者发送的对“global-abort 消息”或“global-commit 消息”的确认响应消息，一旦收到所有参与者的确认消息，写本地“end_transaction” 日志流程结束。</li>
</ol>
<p>流程：两阶段提交协调者流程</p>
<ol>
<li>写本地日志“init”记录，进入INIT 状态</li>
<li>等待并接受协调者发送的“prepare 消息”，收到后  2.1 若参与者可以提交本次事务 2.1.1 写本地日志“ready”，进入READY 状态 2.1.2 向协调者发送“vote-commit”消息 2.1.4 等待协调者的消息2.1.4.1 若收到协调者的“global-abort”消息2.1.4.1.1 写本地日志“abort”，进入ABORT 状态2.1.4.1.2 向协调者发送对“global-abort”的确认消息  2.1.4.2 若收到协调者的“global-commit”消息2.1.4.1.1 写本地日志“commit”，进入COMMIT 状态   2.1.4.1.2 向协调者发送对“global-commit”的确认消息  2.2 若参与者无法提交本次事务 2.2.1 写本地日志“abort”，进入ABORT 状态 2.2.2 向协调者发送“vote-abort”消息 2.2.3 流程对该参与者结束 2.2.4 若后续收到协调者的“global-abort”消息可以响应</li>
<li>即使流程结束，但任何时候收到协调者发送的“global-abort”消息或“global-commit”消息也都要发送一个对应的确认消息。</li>
</ol>
<h4 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a><strong>异常处理</strong></h4><h5 id="宕机恢复"><a href="#宕机恢复" class="headerlink" title="宕机恢复"></a>宕机恢复</h5><ol>
<li>协调者宕机恢复 协调者宕机恢复后，首先通过日志查找到宕机前的状态。如果日志中最后是“begin_commit”记录，说明宕机前协调者处于WAIT 状态，协调者可能已经发送过“prepare 消息”也可能还没发送，但协调者一定还没有发送过“global-commit 消息”或“global-abort 消息”，即事务的全局状态还没有确定。此时，协调者可以重新发送“prepare 消息” 继续两阶段提交流程，即使参与者已经发送过对“prepare 消息”的响应，也不过是再次重传之前的响应而不会影响协议的一致性。如果日志中最后是“global-commit”或“global-abort”记录，说明宕机前协调者处于COMMIT 或ABORT 状态。此时协调者只需重新向所有的参与者发送“global-commit 消息”或“global-abort 消息”就可以继续两阶段提交流程。</li>
<li>参与者宕机恢复参与者宕机恢复后，首先通过日志查找宕机前的状态。如果日志中最后是“init”记录，说明参与者处于INIT 状态，还没有对本次事务做出投票选择，参与者可以继续流程等待协调者发送的“prepare 消息”。如果日志中最后是“ready”记录，说明参与者处于REDAY 状态，此时说明参与者已经就本次 事务做出了投票选择，但宕机前参与者是否已经向协调者发送“vote-commit”消息并不可知。所以此时参与者可以向协调者重发“vote-commit”，并继续协议流程。如果日志中最后是“commit”或“abort”记录，说明参与者已经收到过协调者的“global-commit 消息”（处于COMMIT 状态）或者“global-abort 消息”（处于ABORT 状态）。至于是否向协调者发 送过对“global-commit”或“global-abort”的确认消息则未知。但即使没有发送过确认消息，由于协调者会不断重发“global-commit”或“global-abort”，只需在收到这些消息时发送确认消息既可，不影响协议的全局一致性。</li>
</ol>
<h4 id="协议分析"><a href="#协议分析" class="headerlink" title="协议分析"></a><strong>协议分析</strong></h4><p>两阶段提交协议在工程实践中真正使用的较少，主要原因有以下几点：</p>
<ol>
<li>两阶段提交协议的容错能力较差。从上文的分析可以看出，两阶段提交协议在某些情况下存在流程无法执行下去的情况，且也无法判断流程状态。在工程中好的分布式协议往往总是可以在即使发生异常的情况下也能执行下去。例如，回忆Lease 机制（2.3 ），一旦lease 发出，无论出现任何异常，Lease 服务器节点总是可以通过时间判定出Lease 是否有效，也可以用等待Lease 超时的方法收回Lease 权限，整个Lease 协议的流程不存在任何流程被阻塞而无法执行下去的情况。与Lease 机制的简单有效相比，两阶段提交的协议显得较为复杂且容错能力差。</li>
<li>两阶段提交协议的性能较差。一次成功的两阶段提交协议流程中，协调者与每个参与者 之间至少需要两轮交互4 个消息“prepare”、“vote-commit”、“global-commit”、“确认global-commit”。过多的交互次数会降低性能。另一方面，协调者需要等待所有的参与者的投票结果，一旦存在较慢的参与者，会影响全局流程执行速度。</li>
</ol>
<p>虽然存在一些改进的两阶段提交协议可以提高容错能力和性能，然而这类协议依旧是在工程中使用较少的一类协议，其理论价值大于实践意义。</p>
<h3 id="2-7-MVCC"><a href="#2-7-MVCC" class="headerlink" title="2.7 MVCC"></a><strong>2.7 MVCC</strong></h3><p>MVCC(Multi-version Cocurrent Control，多版本并发控制)技术。MVCC 技术最初也是在数据库系统中被提出，但这种思想并不局限于单机的分布式系统，在分布式系统中同样有效。</p>
<p>MVCC 即多个不同版本的数据实现并发控制的技术，其基本思想是为每次事务生成 一个新版本的数据，在读数据时选择不同版本的数据即可以实现对事务结果的完整性读取。在使用MVCC 时，每个事务都是基于一个已生效的基础版本进行更新，事务可以并行进行，从而可以产生一种图状结构。</p>
<p><img src="/2020/02/06/分布式基础要点/image-20200206203851316.png" alt="image-20200206203851316"></p>
<p>基础数据的版本为1，同时产生了两个事务：事务A 与事务B。这两个事务都各自对数据进行了一些本地修改（这些修改只有事务自己可见，不影响真正的数据），之后事务A 首先提交，生成数据版本2；基于数据版本2，又发起了事务C，事务C 继续提交，生成了数据版 本3；最后事务B 提交，此时事务B 的结果需要与事务C 的结果合并，如果数据没有冲突，即事务 B 没有修改事务A 与事务C 修改过的变量，那么事务B 可以提交，否则事务B 提交失败。MVCC 的流程过程非常类似于SVN 等版本控制系统的流程，或者说SVN 等版本控制系统就是 使用的MVCC 思想。事务在基于基础数据版本做本地修改时，为了不影响真正的数据，通常有两种做法，一是将基础数据版本中的数据完全拷贝出来再修改，SVN 即使用了这种方法，SVN check out 即是拷贝的过程；二是每个事务中只记录更新操作，而不记录完整的数据，读取数据时再将更新操作应用到用基础版本的数据从而计算出结果，这个过程也类似SVN 的增量提交。</p>
<h3 id="2-8-Paxos协议"><a href="#2-8-Paxos协议" class="headerlink" title="2.8 Paxos协议"></a><strong>2.8 Paxos协议</strong></h3><p>Paxos 协议是少数在工程实践中证实的强一致性、高可用的去中心化分布式协议。Paxos 协议的流程较为复杂，但其基本思想却不难理解，类似于人类社会的投票过程。Paxos 协议中，有一组完全对等的参与节点（称为accpetor），这组节点各自就某一事件做出决议，如果某个决议获得了超过半数节点的同意则生效。Paxos 协议中只要有超过一半的节点正常，就可以工作，能很好对抗宕机、网络分化等异常情况。</p>
<h4 id="角色"><a href="#角色" class="headerlink" title="角色"></a><strong>角色</strong></h4><p>Proposer：提案者。Proposer 可以有多个，Proposer 提出议案（value）。所谓value，在工程中可以是任何操作，例如“修改某个变量的值为某个值”、“设置当前primary 为某个节点”等等。Paxos 协议中统一将这些操作抽象为value。不同的Proposer 可以提出不同的甚至矛盾的value，例如某个Proposer 提议“将变量X 设置为1”，另一个Proposer 提议“将变量X 设置为2”，但对同一轮Paxos 过程，最多只有一个value 被批准。Acceptor：批准者。Acceptor 有N 个，Proposer 提出的value 必须获得超过半数(N/2+1)的Acceptor 批准后才能通过。Acceptor 之间完全对等独立。Learner：学习者。Learner 学习被批准的value。所谓学习就是通过读取各个Proposer 对value 的选择结果，如果某个value 被超过半数Proposer 通过，则Learner 学习到了这个value。回忆（2.4 ） 不难理解，这里类似Quorum 机制，某个value 需要获得W=N/2 + 1 的Acceptor 批准，从而学习者需要至少读取N/2+1 个Accpetor，至多读取N 个Acceptor 的结果后，能学习到一个通过的value。上述三类角色只是逻辑上的划分，实践中一个节点可以同时充当这三类角色。</p>
<h4 id="流程"><a href="#流程" class="headerlink" title="流程"></a><strong>流程</strong></h4><p>Paxos 协议一轮一轮的进行，每轮都有一个编号。每轮Paxos 协议可能会批准一个value，也可 能无法批准一个value。如果某一轮Paxos 协议批准了某个value，则以后各轮Paxos 只能批准这个 value。上述各轮协议流程组成了一个Paxos 协议实例，即一次Paxos 协议实例只能批准一个value，这也是Paxos 协议强一致性的重要体现。每轮Paxos 协议分为阶段，准备阶段和批准阶段，在这两个阶段Proposer 和Acceptor 有各自的处理流程。</p>
<p>流程：Proposer 的流程 （准备阶段）</p>
<ol>
<li>向所有的Acceptor 发送消息“Prepare(b)”；这里b 是Paxos 的轮数，每轮递增</li>
<li>如果收到任何一个Acceptor 发送的消息“Reject(B)”，则对于这个Proposer 而言本轮Paxos 失败，将轮数b 设置为B+1 后重新步骤1；（批准阶段，根据收到的Acceptor 的消息作出不同选择）</li>
<li>如果接收到的Acceptor 的“Promise(b, v_i)”消息达到N/2+1 个（N 为Acceptor 总数，除法取整， 下同）；v_i 表示Acceptor 最近一次在i 轮批准过value v。3.1 如果收到的“Promise(b, v)”消息中，v 都为空，Proposer 选择一个value v，向所有Acceptor 广播Accept(b, v)；3.2 否则，在所有收到的“Promise(b, v_i)”消息中，选择i 最大的value v，向所有Acceptor 广播消息Accept(b，v)；</li>
<li>如果收到Nack(B)，将轮数b 设置为B+1 后重新步骤1；</li>
</ol>
<p>流程：Accpetor 流程 （准备阶段）</p>
<ol>
<li>接受某个Propeser 的消息Prepare(b)。参数B 是该Acceptor 收到的最大Paxos 轮数编号；V 是Acceptor 批准的value，可以为空 1.1 如果b&gt;B，回复Promise(b, V_B)，设置B=b; 表示保证不再接受编号小于b 的提案。1.2 否则，回复Reject(B) （批准阶段）</li>
<li>接收Accept(b, v)， 2.1 如果b &lt; B, 回复Nack(B)，暗示proposer 有一个更大编号的提案被这个Acceptor 接收了 2.2 否则设置V=v。表示这个Acceptor 批准的Value 是v。广播Accepted 消息。</li>
</ol>
<h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a><strong>例子</strong></h4><p>基本例子里有5 个Acceptor，1 个Proposer，不存在任何网络、宕机异常。我们着重考察各个Accpetor 上变量B 和变量V 的变化，及Proposer 上变量b 的变化。</p>
<ol>
<li><p>初始状态</p>
<p><img src="/2020/02/06/分布式基础要点/image-20200206204136621.png" alt="image-20200206204136621"></p>
</li>
<li><p>Proposer 向所有Accpetor 发送“Prepare(1)”，所有Acceptor 正确处理，并回复Promise(1, NULL)</p>
<p><img src="/2020/02/06/分布式基础要点/image-20200206204147068.png" alt="image-20200206204147068"></p>
</li>
<li><p>Proposer 收到5 个Promise(1, NULL)，满足多余半数的Promise 的value 为空，此时发送 Accept(1, v1)，其中v1 是Proposer 选择的Value。</p>
<p><img src="/2020/02/06/分布式基础要点/image-20200206204211472.png" alt="image-20200206204211472"></p>
</li>
<li><p>此时，v1 被超过半数的Acceptor 批准，v1 即是本次Paxos 协议实例批准的Value。如果Learner 学习value，学到的只能是v1</p>
</li>
</ol>
<p>在同一个Paxos 实例中，批准的Value 是无法改变的，即使后续Proposer 以更高的序号发起Paxos 协议也无法改变value。Paxos 协议的核心就在于“批准的value 无法改变”，这也是整个协议正确性的基础。</p>
<p>Paxos 协议是被人为设计出来，其设计过程也是协议的推导过程。Paxos 协议利用了Quorom 机 制，选择的W=R=N/2+1。简单而言，协议就是Proposer 更新Acceptor 的过程，一旦某个Acceptor 成功更新了超过半数的Acceptor，则更新成功。Learner 按Quorum 去读取Acceptor，一旦某个value 在超过半数的Proposer 上被成功读取，则说明这是一个被批准的value。协议通过引入轮次，使得高轮次的提议抢占低轮次的提议来避免死锁。协议设计关键点是如何满足“在一次Paxos 算法实例过程中只批准一个Value”这一约束条件。</p>
<h3 id="2-9-CAP"><a href="#2-9-CAP" class="headerlink" title="2.9 CAP"></a><strong>2.9 CAP</strong></h3><p>CAP 理论的定义很简单，CAP 三个字母分别代表了分布式系统中三个相互矛盾的属性：</p>
<ul>
<li>Consistency (一致性)：CAP 理论中的副本一致性特指强一致性（1.3.4 ）；</li>
<li>Availiablity(可用性)：指系统在出现异常时已经可以提供服务；</li>
<li>Tolerance to the partition of network (分区容忍)：指系统可以对网络分区（1.1.4.2 ）这种异常情 况进行容错处理；</li>
</ul>
<p>CAP 理论指出：无法设计一种分布式协议，使得同时完全具备CAP 三个属性，即1)该种协议下的副本始终是强一致性，2)服务始终是可用的，3)协议可以容忍任何网络分区异常；分布式系统协议只能在CAP 这三者间所有折中。</p>
<p>热力学第二定律说明了永动机是不可能存在的，不要去妄图设计永动机。与之类似，CAP 理论的意义就在于明确提出了不要去妄图设计一种对CAP 三大属性都完全拥有的完美系统，因为这种系统在理论上就已经被证明不存在。</p>
<ul>
<li>Lease 机制: Lease 机制牺牲了部分异常情况下的A，从而获得了完全的C 与很好的P。</li>
<li>Quorum 机制: Quorum 机制，在CAP 三大因素中都各做了折中，有一定的C，有较好 的A，也有较好的P，是一种较为平衡的分布式协议。</li>
<li>两阶段提交协议: 两阶段提交系统具有完全的C，很糟糕的A，很糟糕的P。</li>
<li>Paxos 协议：同样是强一致性协议，Paxos 在CAP 三方面较之两阶段提交协议要优秀得多。Paxos 协议具有 完全的C，较好的A，较好的P。Paxos 的A 与P 的属性与Quorum 机制类似，因为Paxos 的协议本 身就具有Quorum 机制的因素。</li>
</ul>
]]></content>
      <categories>
        <category>架构设计</category>
      </categories>
      <tags>
        <tag>分布式架构</tag>
      </tags>
  </entry>
  <entry>
    <title>HTTP协议要点</title>
    <url>/2020/02/06/HTTP%E5%8D%8F%E8%AE%AE%E8%A6%81%E7%82%B9/</url>
    <content><![CDATA[<p>以下文章来源于Java建设者 ，作者cxuan</p>
<h2 id="HTTP-内容协商"><a href="#HTTP-内容协商" class="headerlink" title="HTTP 内容协商"></a><strong>HTTP 内容协商</strong></h2><h3 id="什么是内容协商"><a href="#什么是内容协商" class="headerlink" title="什么是内容协商"></a><strong>什么是内容协商</strong></h3><p>在 HTTP 中，<code>内容协商</code>是一种用于在同一 URL 上提供资源的不同表示形式的机制。内容协商机制是指客户端和服务器端就响应的资源内容进行交涉，然后提供给客户端最为适合的资源。内容协商会以响应资源的语言、字符集、编码方式等作为判断的标准。</p>
<p><img src="/2020/02/06/HTTP协议要点/640.webp" alt="img"></p>
<h3 id="内容协商的种类"><a href="#内容协商的种类" class="headerlink" title="内容协商的种类"></a><strong>内容协商的种类</strong></h3><p>内容协商主要有以下3种类型：</p>
<ul>
<li><code>服务器驱动协商（Server-driven Negotiation）</code></li>
</ul>
<p>这种协商方式是由服务器端进行内容协商。服务器端会根据请求首部字段进行自动处理</p>
<ul>
<li><code>客户端驱动协商（Agent-driven Negotiation）</code></li>
</ul>
<p>这种协商方式是由客户端来进行内容协商。</p>
<ul>
<li><code>透明协商（Transparent Negotiation）</code></li>
</ul>
<p>是服务器驱动和客户端驱动的结合体，是由服务器端和客户端各自进行内容协商的一种方法。</p>
<p>内容协商的分类有很多种，主要的几种类型是 <strong>Accept、Accept-Charset、Accept-Encoding、Accept-Language、Content-Language</strong>。</p>
<p>一般来说，客户端用 Accept 头告诉服务器希望接收什么样的数据，而服务器用 Content 头告诉客户端实际发送了什么样的数据。</p>
<h3 id="为什么需要内容协商"><a href="#为什么需要内容协商" class="headerlink" title="为什么需要内容协商"></a><strong>为什么需要内容协商</strong></h3><p>我们为什么需要内容协商呢？在回答这个问题前我们先来看一下 TCP 和 HTTP 的不同。</p>
<p>在 TCP / IP 协议栈里，传输数据基本上都是 <code>header+body</code> 的格式。但 TCP、UDP 因为是传输层的协议，它们不会关心 body 数据是什么，只要把数据发送到对方就算是完成了任务。</p>
<p>而 HTTP 协议则不同，它是应用层的协议，数据到达之后需要告诉应用程序这是什么数据。当然不告诉应用这是哪种类型的数据，应用也可以通过不断尝试来判断，但这种方式无疑十分低效，而且有很大几率会检查不出来文件类型。</p>
<p>所以鉴于此，浏览器和服务器需要就数据的传输达成一致，浏览器需要告诉服务器自己希望能够接收什么样的数据，需要什么样的压缩格式，什么语言，哪种字符集等；而服务器需要告诉客户端自己能够提供的服务是什么。</p>
<p>所以我们就引出了内容协商的几种概念，下面依次来进行探讨</p>
<h3 id="内容协商标头"><a href="#内容协商标头" class="headerlink" title="内容协商标头"></a><strong>内容协商标头</strong></h3><h4 id="Accept"><a href="#Accept" class="headerlink" title="Accept"></a>Accept</h4><p>接受请求 HTTP 标头会通告客户端自己能够接受的 <code>MIME</code> 类型</p>
<p>那么什么是 MIME 类型呢？在回答这个问题前你应该先了解一下什么是 MIME</p>
<blockquote>
<p>MIME: MIME (Multipurpose Internet Mail Extensions) 是描述消息内容类型的因特网标准。MIME 消息能包含文本、图像、音频、视频以及其他应用程序专用的数据。</p>
</blockquote>
<p>也就是说，MIME 类型其实就是一系列消息内容类型的集合。那么 MIME 类型都有哪些呢？</p>
<p><code>文本文件</code>：text/html、text/plain、text/css、application/xhtml+xml、application/xml</p>
<p><code>图片文件</code>：image/jpeg、image/gif、image/png</p>
<p><code>视频文件</code>：video/mpeg、video/quicktime</p>
<p><code>应用程序二进制文件</code>：application/octet-stream、application/zip</p>
<p>比如，如果浏览器不支持 PNG 图片的显示，那 Accept 就不指定image/png，而指定可处理的 image/gif 和 image/jpeg 等图片类型。</p>
<p>一般 MIME 类型也会和 <code>q</code> 这个属性一起使用，q 是什么？q 表示的是权重，来看一个例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br></pre></td></tr></table></figure>
<p>这是什么意思呢？若想要给显示的<strong>媒体类型增加优先级</strong>，则使用 <code>q=</code> 来额外表示权重值，没有显示权重的时候默认值是1.0 ，我给你列个表格你就明白了</p>
<table>
<thead>
<tr>
<th style="text-align:left">q</th>
<th style="text-align:left">MIME</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">1.0</td>
<td style="text-align:left">text/html</td>
</tr>
<tr>
<td style="text-align:left">1.0</td>
<td style="text-align:left">application/xhtml+xml</td>
</tr>
<tr>
<td style="text-align:left">0.9</td>
<td style="text-align:left">application/xml</td>
</tr>
<tr>
<td style="text-align:left">0.8</td>
<td style="text-align:left"><em> / </em></td>
</tr>
</tbody>
</table>
<p>也就是说，这是一个放置顺序，权重高的在前，低的在后，<code>application/xml;q=0.9</code> 是不可分割的整体。</p>
<h4 id="Accept-Charset"><a href="#Accept-Charset" class="headerlink" title="Accept-Charset"></a>Accept-Charset</h4><p>Accept-charset 属性规定服务器处理表单数据所接受的字符编码；Accept-charset 属性允许你指定一系列字符集，服务器必须支持这些字符集，从而得以正确解释表单中的数据。</p>
<p>Accept-Charset 没有对应的标头，服务器会把这个值放在 <code>Content-Type</code>中用<strong>charset=xxx</strong>来表示，</p>
<p>例如，浏览器请求 GBK 或 UTF-8 的字符集，然后服务器返回的是 UTF-8 编码，就是下面这样</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Accept-Charset: gbk, utf-8</span><br><span class="line">Content-Type: text/html; charset=utf-8</span><br></pre></td></tr></table></figure>
<h4 id="Accept-Language"><a href="#Accept-Language" class="headerlink" title="Accept-Language"></a>Accept-Language</h4><p>首部字段 Accept-Language 用来告知服务器用户代理能够处理的自然语言集（指中文或英文等），以及自然语言集的相对优先级。可一次指定多种自然语言集。和 Accept 首部字段一样，按权重值 <code>q=</code> 来表示相对优先级。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Accept-Language: en-US,en;q=0.5</span><br></pre></td></tr></table></figure>
<h4 id="Accept-Encoding"><a href="#Accept-Encoding" class="headerlink" title="Accept-Encoding"></a>Accept-Encoding</h4><p>表示 HTTP 标头会标明客户端希望服务端返回的内容编码，这通常是一种压缩算法。Accept-Encoding 也是属于<code>内容协商</code> 的一部分，使用并通过客户端选择 <code>Content-Encoding</code> 内容进行返回。</p>
<p>即使客户端和服务器都能够支持相同的压缩算法，服务器也可能选择不压缩并返回，这种情况可能是由于这两种情况造成的:</p>
<ul>
<li>要发送的数据已经被压缩了一次，第二次压缩并不会导致发送的数据更小</li>
<li>服务器过载，无法承受压缩带来的性能开销，通常，如果服务器使用 CPU 超过 80% ，<code>Microsoft</code> 则建议不要使用压缩</li>
</ul>
<p>下面是 Accept-Encoding 的使用方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Accept-Encoding: gzip</span><br><span class="line">Accept-Encoding: compress</span><br><span class="line">Accept-Encoding: deflate</span><br><span class="line">Accept-Encoding: br</span><br><span class="line">Accept-Encoding: identity</span><br><span class="line">Accept-Encoding: *</span><br><span class="line">Accept-Encoding: deflate, gzip;q=1.0, *;q=0.5</span><br></pre></td></tr></table></figure>
<p>上面的几种表述方式就已经把 Accept-Encoding 的属性列全了</p>
<ul>
<li><p><code>gzip</code>: 由文件压缩程序 gzip 生成的编码格式，使用 <code>Lempel-Ziv编码（LZ77）</code>和32位CRC的压缩格式，感兴趣的同学可以读一下 （<a href="https://en.wikipedia.org/wiki/LZ77_and_LZ78#LZ77）" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/LZ77_and_LZ78#LZ77）</a></p>
</li>
<li><p><code>compress</code>: 使用<code>Lempel-Ziv-Welch（LZW）</code>算法的压缩格式，有兴趣的同学可以读 （<a href="https://en.wikipedia.org/wiki/LZW）" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/LZW）</a></p>
</li>
<li><p><code>deflate</code>: 使用 zlib 结构和 deflate 压缩算法的压缩格式，参考 （<a href="https://en.wikipedia.org/wiki/Zlib）" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Zlib）</a> 和 （<a href="https://en.wikipedia.org/wiki/DEFLATE）" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/DEFLATE）</a></p>
</li>
<li><p><code>br</code>: 使用 Brotli 算法的压缩格式，参考 （<a href="https://en.wikipedia.org/wiki/Brotli）" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Brotli）</a></p>
</li>
<li><p>不执行压缩或不会变化的默认编码格式</p>
</li>
<li><p><code>*</code> : 匹配标头中未列出的任何内容编码，如果没有列出 <code>Accept-Encoding</code> ，这就是默认值，并不意味着支</p>
<p>持任何算法，只是表示没有偏好</p>
</li>
<li><p><code>;q=</code> 采用权重 q 值来表示相对优先级，这点与首部字段 Accept 相同。</p>
</li>
</ul>
<h4 id="Content-Type"><a href="#Content-Type" class="headerlink" title="Content-Type"></a>Content-Type</h4><p>Content-Type 实体标头用于指示资源的 MIME 类型。作为响应，Content-Type 标头告诉客户端返回的内容的内容类型实际上是什么。Content-type 有两种值 : MIME 类型和字符集编码，例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Content-Type: text/html; charset=UTF-8</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在某些情况下，浏览器将执行 MIME 嗅探，并且不一定遵循此标头的值；为防止此行为，可以将标头 X-Content-Type-Options 设置为 nosniff。</p>
</blockquote>
<h4 id="Content-Encoding"><a href="#Content-Encoding" class="headerlink" title="Content-Encoding"></a>Content-Encoding</h4><p>Content-Encoding 实体标头用于压缩媒体类型，它让客户端知道如何进行解码操作，从而使客户端获得 Content-Type 标头引用的 MIME 类型。表示如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Encoding: compress</span><br><span class="line">Content-Encoding: deflate</span><br><span class="line">Content-Encoding: identity</span><br><span class="line">Content-Encoding: br</span><br><span class="line">Content-Encoding: gzip, identity</span><br><span class="line">Content-Encoding: deflate, gzip</span><br></pre></td></tr></table></figure>
<h3 id="Content-Language"><a href="#Content-Language" class="headerlink" title="Content-Language"></a>Content-Language</h3><p>Content-Language 实体标头用于描述面向受众的语言，以便使用户根据用户自己的首选语言进行区分。例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Content-Language: de-DE</span><br><span class="line">Content-Language: en-US</span><br><span class="line">Content-Language: de-DE, en-CA</span><br></pre></td></tr></table></figure>
<p>下面根据内容协商对应的请求/响应标头，我列了一张图供你参考，注意其中 Accept-Charset 没有对应的 Content-Charset ，而是通过 Content-Type 来表示。</p>
<p><img src="/2020/02/06/HTTP协议要点/640.webp" alt="img"></p>
<p>HTTP 认证</p>
<p>HTTP 提供了用于访问控制和身份认证的功能，下面就对 HTTP 的权限和认证功能进行介绍</p>
<h3 id="通用-HTTP-认证框架"><a href="#通用-HTTP-认证框架" class="headerlink" title="通用 HTTP 认证框架"></a><strong>通用 HTTP 认证框架</strong></h3><p>RFC 7235 定义了 HTTP 身份认证框架，服务器可以根据其文档的定义来检查客户端请求。客户端也可以根据其文档定义来提供身份验证信息。</p>
<p>请求/响应的工作流程如下：服务器以<code>401(未授权)</code> 的状态响应客户端告诉客户端服务器需要认证信息，客户端提供至少一个 <code>www-Authenticate</code> 的响应标头进行授权信息的认证。想要通过服务器进行身份认证的客户端可以在请求标头字段中添加认证标头进行身份认证，一般的认证过程如下</p>
<p><img src="/2020/02/06/HTTP协议要点/640.webp" alt="img"></p>
<p>首先客户端发起一个 HTTP 请求，不带有任何认证标头，服务器对此 HTTP 请求作出响应，发现此 HTTP 信息未带有认证凭据，服务器通过 <code>www-Authenticate</code>标头返回 401 告诉客户端此请求未通过认证。然后客户端进行用户认证，认证完毕后重新发起 HTTP 请求，这次 HTTP 请求带有用户认证凭据（注意，整个身份认证的过程必须通过 HTTPS 连接保证安全），到达服务器后服务器会检查认证信息，如果不符合服务器认证信息，会返回 <code>403 Forbidden</code> 表示用户认证失败，如果满足认证信息，则返回 <code>200 OK</code>。</p>
<p>我们知道，客户端和服务器之间的 HTTP 连接可以被代理缓存重新发送，所以认证信息也适用于代理服务器。</p>
<h3 id="代理认证"><a href="#代理认证" class="headerlink" title="代理认证"></a><strong>代理认证</strong></h3><p>由于资源认证和代理认证可以共存，因此需要不同的头和状态码，在代理的情况下，会返回状态码 <code>407(需要代理认证)</code>， <code>Proxy-Authenticate</code> 响应头包含至少一个适用于代理的情况，<code>Proxy-Authorization</code>请求头用于将证书提供给代理服务器。下面分别来认识一下这两个标头</p>
<h4 id="Proxy-Authenticate"><a href="#Proxy-Authenticate" class="headerlink" title="Proxy-Authenticate"></a>Proxy-Authenticate</h4><p>HTTP <code>Proxy-Authenticate</code> 响应标头定义了身份验证方法，应使用该身份验证方法来访问代理服务器后面的资源。它将请求认证到代理服务器，从而允许它进一步发送请求。例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Proxy-Authenticate: Basic</span><br><span class="line">Proxy-Authenticate: Basic realm=&quot;Access to the internal site&quot;</span><br></pre></td></tr></table></figure>
<h4 id="Proxy-Authorization"><a href="#Proxy-Authorization" class="headerlink" title="Proxy-Authorization"></a>Proxy-Authorization</h4><p>这个 HTTP <code>请求</code>标头和上面的 <code>Proxy-Authenticate</code> 拼接很相似，但是概念不同，这个标头用于向代理服务器提供凭据，例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Proxy-Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l</span><br></pre></td></tr></table></figure>
<p>下面是代理服务器的请求/响应认证过程</p>
<p><img src="/2020/02/06/HTTP协议要点/640.webp" alt="img"></p>
<p>这个过程和通用的过程类似，我们就不再详细展开描述了。</p>
<h3 id="禁止访问"><a href="#禁止访问" class="headerlink" title="禁止访问"></a><strong>禁止访问</strong></h3><p>如果<code>代理服务器</code>收到的有效凭据不足以获取对给定资源的访问权限，则服务器应使用<code>403 Forbidden</code>状态代码进行响应。与 <code>401 Unauthorized</code> 和 <code>407 Proxy Authorization Required</code> 不同，该用户无法进行身份验证。</p>
<h4 id="WWW-Authenticate-和-Proxy-Authenticate-头"><a href="#WWW-Authenticate-和-Proxy-Authenticate-头" class="headerlink" title="WWW-Authenticate 和 Proxy-Authenticate 头"></a>WWW-Authenticate 和 Proxy-Authenticate 头</h4><p><code>WWW-Authenticate</code> 和 <code>Proxy-Authenticate</code> 响应头定义了获得对资源访问权限的身份验证方法。他们需要指定使用哪种身份验证方案，以便希望授权的客户端知道如何提供凭据。它们的一般表示形式如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">WWW-Authenticate: &lt;type&gt; realm=&lt;realm&gt;</span><br><span class="line">Proxy-Authenticate: &lt;type&gt; realm=&lt;realm&gt;</span><br></pre></td></tr></table></figure>
<p>我想你从上面看到这里一定会好奇 <code></code> 和 <code>realm</code>是什么东西，现在就来解释下。</p>
<ul>
<li><code></code> 是认证协议，<code>Basic</code> 是下面协议中最普遍使用的</li>
</ul>
<blockquote>
<p>RFC 7617 中定义了<code>Basic</code> HTT P身份验证方案，该方案将凭据作为用户ID /密码对传输，并使用 base64 进行编码。(感兴趣的同学可以看看 <a href="https://tools.ietf.org/html/rfc7617" target="_blank" rel="noopener">https://tools.ietf.org/html/rfc7617</a>)</p>
</blockquote>
<p>其他的认证协议主要有</p>
<table>
<thead>
<tr>
<th style="text-align:left">认证协议</th>
<th style="text-align:left">参考来源</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">Basic</td>
<td style="text-align:left">查阅 RFC 7617，base64编码的凭据</td>
</tr>
<tr>
<td style="text-align:left">Bearer</td>
<td style="text-align:left">查阅 RFC 6750，承载令牌来访问受 OAuth 2.0保护的资源</td>
</tr>
<tr>
<td style="text-align:left">Digest</td>
<td style="text-align:left">查阅 RFC 7616，Firefox仅支持md5哈希，请参见错误bug 472823以获得SHA加密支持</td>
</tr>
<tr>
<td style="text-align:left">HOBA</td>
<td style="text-align:left">查阅 RFC 7486</td>
</tr>
<tr>
<td style="text-align:left">Mutual</td>
<td style="text-align:left">查阅 RFC 8120</td>
</tr>
<tr>
<td style="text-align:left">AWS4-HMAC-SHA256</td>
<td style="text-align:left">查阅 <strong>AWS docs</strong></td>
</tr>
</tbody>
</table>
<ul>
<li><code>realm</code> 用于描述保护区或指示保护范围，这可能是诸如 <strong>Access to the staging site(访问登陆站点)</strong> 或者类似的，这样用户就可以知道他们要访问哪个区域。</li>
</ul>
<h4 id="Authorization-和-Proxy-Authorization-标头"><a href="#Authorization-和-Proxy-Authorization-标头" class="headerlink" title="Authorization 和 Proxy-Authorization 标头"></a>Authorization 和 Proxy-Authorization 标头</h4><p>Authorization 和 Proxy-Authorization 请求标头包含用于通过代理服务器对用户代理进行身份验证的凭据。在此，再次需要类型，其后是凭据，取决于使用哪种身份验证方案，可以对凭据进行编码或加密。一般表示如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l</span><br><span class="line">Proxy-Authorization: Basic YWxhZGRpbjpvcGVuc2VzYW1l</span><br></pre></td></tr></table></figure>
<h2 id="HTTP-缓存"><a href="#HTTP-缓存" class="headerlink" title="HTTP 缓存"></a><strong>HTTP 缓存</strong></h2><p>通过把<code>请求/响应</code>缓存起来有助于提升系统的性能，<code>Web 缓存</code>减少了延迟和网络传输量，因此减少资源获取锁需要的时间。由于链路漫长，网络时延不可控，浏览器使用 HTTP 获取资源的成本较高。所以，非常有必要把数据缓存起来，下次再请求的时候尽可能地复用。当 Web 缓存在其存储中具有请求的资源时，它将拦截该请求并直接返回资源，而不是到达源服务器重新下载并获取。这样做可以实现两个小目标</p>
<ul>
<li>减轻服务器负载</li>
<li>提升系统性能</li>
</ul>
<p>下面我们就一起来探讨一下 HTTP 缓存都有哪些</p>
<h3 id="不同类型的缓存"><a href="#不同类型的缓存" class="headerlink" title="不同类型的缓存"></a>不同类型的缓存</h3><p>HTTP 缓存有几种不同的类型，这些可以分为两个主要类别：<code>私有缓存</code> 和 <code>共享缓存</code>。</p>
<ul>
<li>共享缓存：共享缓存是一种缓存，它可以存储多个用户重复使用的请求/响应。</li>
<li>私有缓存：私有缓存也称为<code>专用缓存</code>，它只适用于单个用户。</li>
<li>不缓存过期资源：所有的请求都会直接到达服务器，由服务器来下载资源并返回。</li>
</ul>
<blockquote>
<p>我们主要探讨<code>浏览器缓存</code>和<code>代理缓存</code>，但真实情况不只有这两种缓存，还有网关缓存，CDN，反向代理缓存和负载平衡器，把它们部署在 Web 服务器上，可以提高网站和 Web 应用程序的可靠性，性能和可伸缩性。</p>
</blockquote>
<h4 id="不缓存过期资源"><a href="#不缓存过期资源" class="headerlink" title="不缓存过期资源"></a>不缓存过期资源</h4><p>不缓存过期资源即浏览器和代理不会缓存过期资源，客户端发起的请求会直接到达服务器，可以使用 <code>no-cache</code> 标头代表不缓存过期资源。</p>
<p><img src="/2020/02/06/HTTP协议要点/640.webp" alt="img"></p>
<p>no-cache 属于 Cache-Control 通用标头，其一般的表示方法如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cache-Control: no-cache</span><br></pre></td></tr></table></figure>
<p>也可以使用 <code>max-age = 0</code> 来实现不缓存的效果。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cache-Control: max-age=0</span><br></pre></td></tr></table></figure>
<h4 id="私有缓存"><a href="#私有缓存" class="headerlink" title="私有缓存"></a>私有缓存</h4><p>私有缓存只用来缓存单个用户，你可能在浏览器设置中看到了 <code>缓存</code>，浏览器缓存包含服务器通过 HTTP 下载下来的所有文档。这个高速缓存用于使访问的文档可以进行前进/后退，保存操作而无需重新发送请求到源服务器。</p>
<p><img src="/2020/02/06/HTTP协议要点/640.webp" alt="img"></p>
<p>可以使用 <code>private</code> 来实现私有缓存，这与 <code>public</code> 的用法相反，缓存服务器只对特定的客户端进行缓存，其他客户端发送过来的请求，缓存服务器则不会返回缓存。它的一般表示方法如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cache-Control: private</span><br></pre></td></tr></table></figure>
<h4 id="共享缓存"><a href="#共享缓存" class="headerlink" title="共享缓存"></a>共享缓存</h4><p>共享缓存是一种用于存储要由多个用户重用的响应缓存。共享缓存一般使用 <code>public</code> 来表示，<code>public</code> 属性只出现在客户端响应中，表示响应可以被任何缓存所缓存。一般表示方法如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cache-Control: public</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/06/HTTP协议要点/640.webp" alt="img"></p>
<h3 id="缓存控制"><a href="#缓存控制" class="headerlink" title="缓存控制"></a><strong>缓存控制</strong></h3><p>HTTP/1.1 中的 <code>Cache-Control</code> 常规标头字段用于执行缓存控制，使用此标头可通过其提供的各种指令来定义缓存策略。下面我们依次介绍一下这些属性</p>
<h4 id="不缓存"><a href="#不缓存" class="headerlink" title="不缓存"></a>不缓存</h4><p><code>no-store</code> 才是真正意义上的<code>不缓存</code>，每次服务器接受到客户端的请求后，都会返回最新的资源给客户端。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cache-Control: no-store</span><br></pre></td></tr></table></figure>
<h4 id="缓存但需要验证"><a href="#缓存但需要验证" class="headerlink" title="缓存但需要验证"></a>缓存但需要验证</h4><p>同上面的 不缓存过期资源</p>
<h4 id="私有和共享缓存"><a href="#私有和共享缓存" class="headerlink" title="私有和共享缓存"></a>私有和共享缓存</h4><p>同上</p>
<h4 id="缓存过期"><a href="#缓存过期" class="headerlink" title="缓存过期"></a>缓存过期</h4><p>缓存中一个很重要的指令就是<code>max-age</code>，这是资源被视为<code>新鲜</code>的最长时间 ，与 <code>Expires</code>相反，此指令是相对于请求时间的。对于应用程序中不会更改的文件，通常可以添加主动缓存。下面是 mag-age 的表示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cache-Control: max-age=31536000</span><br></pre></td></tr></table></figure>
<h4 id="缓存验证"><a href="#缓存验证" class="headerlink" title="缓存验证"></a>缓存验证</h4><p><code>must-revalidate</code> 表示缓存必须在使用之前验证过时资源的状态，并且不应使用过期的资源。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cache-Control: must-revalidate</span><br></pre></td></tr></table></figure>
<p>下面是一个缓存验证图</p>
<p><img src="/2020/02/06/HTTP协议要点/640.webp" alt="img"></p>
<p>什么是新鲜的数据</p>
<p>一旦资源存储在缓存中，理论上就可以永远被缓存使用。但是不管是浏览器缓存还是代理缓存，其存储空间是有限的，所以缓存会定期进行清除，这个过程叫做 <code>缓存回收(cache eviction)</code> （自译）。另一方面，服务器上的缓存也会定期进行更新，HTTP 作为应用层的协议，它是一种<code>客户-服务器</code>模式，HTTP 是无状态的协议，因此当资源发生更改时，服务器无法通知缓存和客户端。因此服务器必须通过某种方式告知客户端缓存已经被更新。服务器会提供<code>过期时间</code>这个概念，告知客户端在此到期时间之前，资源是<code>新鲜的</code>，也就是未更改过的。在此到期时间的范围之外，资源已过时。<code>过期算法(Eviction algorithms)</code> 通常会将新资源优先于陈旧资源使用。</p>
<p>这里需要注意一下，过期的资源并不会被回收或忽略，当高速缓存接收到过期资源时，它会使用 <code>If-None-Match</code> 转发此请求，以检查它是否仍然有效。如果有效，服务器会返回 <code>304 Not Modified</code>响应头并且没有任何响应体，从而节省了一些带宽。</p>
<p>下面是使用共享缓存代理的过程</p>
<p>这个图应该比较好理解，只说一下 Age 的作用，Age 是 HTTP 响应标头告诉客户端源服务器在多久之前创建了响应，它的单位为<code>秒</code>，Age 标头通常接近于0，如果是0则可能是从源服务器获取的，如果不是表示可能是由代理服务器创建，那么 Age 的值表示的是<strong>缓存后的响应再次发起认证到认证完成的时间值</strong>。</p>
<p>缓存的有效性是由多个标头来共同决定的，而并非某一个标头来决定。如果指定了<code>Cache-control:max-age=N</code> ，那么缓存会保存 N 秒。如果这个通用标头不存在的话，则会检查是否存在 <code>Expires</code> 标头。如果 Exprires 标头存在，那么它的值减去 Date 标头的值就可以确定其有效性。最后，如果<code>max-age</code> 和 <code>expires</code> 都不存在，就去寻找 <code>Last-Modified</code> 标头，如果存在此标头，则高速缓存的有效性等于 Date 标头的值减去 Last-modified 标头的值除以10。</p>
<h3 id="缓存验证-1"><a href="#缓存验证-1" class="headerlink" title="缓存验证"></a><strong>缓存验证</strong></h3><p>当到达缓存资源的有效期时，将对其进行验证或再次获取。仅当服务器提供了<code>强验证器</code>或<code>弱验证器</code>时，才可以进行验证。</p>
<p>当用户按下重新加载按钮时，将触发重新验证。如果缓存的响应包含 <code>Cache-control：must-revalidate</code>标头，则在正常浏览下也会触发该事件。另一个因素是 高级 -&gt; 缓存首选项 面板中的缓存验证首选项。有一个选项可在每次加载文档时强制进行验证。</p>
<h4 id="Etag"><a href="#Etag" class="headerlink" title="Etag"></a>Etag</h4><p>我们上面提到了强验证器和弱验证器，实现验证器功能的标头正式 Etag 的作用，这意味着 HTTP 用户代理（例如浏览器）不知道该字符串表示什么，并且无法预测其值。如果 Etag 标头是资源响应的一部分，则客户端可以在未来请求的标头中发出 <code>If-None-Match</code>，以验证缓存的资源。</p>
<p><code>Last-Modified</code>响应标头可以用作弱验证器，因为它只有1秒可以分辨的时间。如果响应中存在 <code>Last-Modified</code>标头，则客户端可以发出 <code>If-Modified-Since</code>请求标头来验证缓存资源。（关于 Etag 更多我们会在条件请求介绍）</p>
<h4 id="避免碰撞"><a href="#避免碰撞" class="headerlink" title="避免碰撞"></a>避免碰撞</h4><p>通过使用 Etag 和 If-Match 标头，你可以检测避免碰撞。</p>
<p>例如，在编辑 MDN 时，将对当前 Wiki 内容进行哈希处理并将其放入响应中的 Etag 中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Etag: &quot;33a64df551425fcc55e4d42a148795d9f25f89d4&quot;</span><br></pre></td></tr></table></figure>
<p>当将更改保存到 Wiki 页面（发布数据）时，POST 请求将包含 If-Match 标头，其中包含 Etag 值以检查有效性。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">If-Match: &quot;33a64df551425fcc55e4d42a148795d9f25f89d4&quot;</span><br></pre></td></tr></table></figure>
<p>如果哈希值不匹配，则表示文档已在中间进行了编辑，并返回 <code>412 Precondition Failed</code>错误。</p>
<h4 id="缓存未占用资源"><a href="#缓存未占用资源" class="headerlink" title="缓存未占用资源"></a>缓存未占用资源</h4><p>Etag 标头的另一个典型用法是缓存未更改的资源，如果用户再次访问给定的 URL（已设置Etag），并且该 URL过时，则客户端将在 If-None-Match 标头字段中发送其 Etag 的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">If-None-Match: &quot;33a64df551425fcc55e4d42a148795d9f25f89d4&quot;</span><br></pre></td></tr></table></figure>
<p>服务器将客户端的 Etag（通过 If-None-Match 发送）与 Etag 进行比较，以获取其当前资源版本，如果两个值都匹配（即资源未更改），则服务器会发回 <code>304 Not Modified</code>状态，没有主体，它告诉客户端响应的缓存仍然可以使用。</p>
<h2 id="HTTP-CROS-跨域"><a href="#HTTP-CROS-跨域" class="headerlink" title="HTTP CROS 跨域"></a><strong>HTTP CROS 跨域</strong></h2><p>CROS 的全称是 <code>Cross-Origin Resource Sharing(CROS)</code>，中文译为 <code>跨域资源共享</code>，它是一种机制。是一种什么机制呢？它是一种让运行在一个<code>域(origin)</code>上的 Web 应用被准许访问来自不同源服务器上指定资源的机制。在搞懂这个机制前，你需要线了解什么是 <code>域(origin)</code></p>
<h3 id="Origin"><a href="#Origin" class="headerlink" title="Origin"></a><strong>Origin</strong></h3><p>Web 概念中<code>域(Origin)</code> 的内容由<code>scheme(protocol) - 协议</code>，<code>host(domain) - 主机</code>和用于访问它的 URL <code>port - 端口</code>定义。仅仅当 scheme 、host、port 都匹配时，两个对象才有相同的来源。这种协议相同，域名相同，端口相同的安全策略也被称为 <code>同源策略（Same Origin Policy)</code>。某些操作仅限于具有相同来源的内容，可以使用 CORS 取消此限制。</p>
<h3 id="跨域的特点"><a href="#跨域的特点" class="headerlink" title="跨域的特点"></a><strong>跨域的特点</strong></h3><ul>
<li>下面是跨域问题的例子，看看你是否清楚什么是跨域了</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">(1) http://example.com/app1/index.html</span><br><span class="line">(2) http://example.com/app2/index.html</span><br></pre></td></tr></table></figure>
<p>上面这两个 URL 是否具有跨域问题呢？</p>
<p>上面两个 URL 是不具有跨域问题的，因为这两个 URL 具有相同的<code>协议(scheme)</code>和<code>主机(host)</code></p>
<ul>
<li>那么下面这两个是否具有跨域问题呢？</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://Example.com:80</span><br><span class="line">http://example.com</span><br></pre></td></tr></table></figure>
<p>这两个 URL 也不具有跨域问题，为什么不具有，端口不一样啊。其实它们两个端口是一样的。</p>
<p>或许你会认为这两个 URL 是不一样的，放心，关于一样不一样的论据我给你抛出来了</p>
<blockquote>
<p>协议和域名部分是不区分大小写的，但是路径部分则根据服务器平台而定。Windows 和 Mac OS X 系统是不区分大小写的，而采用UNIX和Linux系的服务器系统是区分大小写的，</p>
</blockquote>
<p>也就是说上面的 <code>Example.com</code> 和 <code>example.com</code> 其实是一个网址，并且由于两个地址具有相同的 scheme 和 host ，默认情况下服务器通过端口80传递 HTTP 内容，所以上面这两个地址也是相同的。</p>
<ul>
<li>下面这两个 URL 地址是否具有跨域问题？</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://example.com/app1</span><br><span class="line">https://example.com/app2</span><br></pre></td></tr></table></figure>
<p>这两个 URL 的 scheme 不同，所以这两个 URL 具有跨域问题</p>
<ul>
<li>再看下面这三个 URL 是否具有跨域问题</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://example.com</span><br><span class="line">http://www.example.com</span><br><span class="line">http://myapp.example.com</span><br></pre></td></tr></table></figure>
<p>这三个 URL 也是具有跨域问题的，因为它们隶属于不通服务器的主机 host。</p>
<ul>
<li>下面这两个 URL 是否具有跨域问题</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http://example.com</span><br><span class="line">http://example.com:8080</span><br></pre></td></tr></table></figure>
<p>这两个 URL 也是具有跨域问题，因为这两个 URL 的默认端口不一样。</p>
<h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a><strong>同源策略</strong></h3><p>处于安全的因素，浏览器限制了从脚本发起跨域的 HTTP 请求。<code>XMLHttpRequest</code> 和其他 <code>Fetch 接口</code> 会遵循 <code>同源策略(same-origin policy)</code>。也就是说使用这些 API 的应用程序想要请求相同的资源，那么他们应该具有相同的来源，除非来自其他来源的响应包括正确的 CORS 标头也可以。</p>
<p>同源策略是一种很重要的安全策略，它限制了从一个来源加载的文档或脚本如何与另一个来源的资源进行交互。它有助于隔离潜在的恶意文档，减少可能的攻击媒介。</p>
<p>我们上面提到，如果两个 URL 具有相同的协议、主机和端口号（如果指定）的话，那么两个 URL 具有相同的来源。下面有一些实例，你判断一下是不是具有相同的来源</p>
<p>目标来源 <code>http://store.company.com/dir/page.html</code></p>
<p><img src="/2020/02/06/HTTP协议要点/640.webp" alt="img"></p>
<p>现在我带你认识了两遍不同的源，现在你应该知道如何区分两个 URL 是否属于同一来源了吧！</p>
<p>好，你现在知道了什么是跨域问题，现在我要问你，哪些请求会产生跨域请求呢？这是我们下面要讨论的问题</p>
<h3 id="跨域请求"><a href="#跨域请求" class="headerlink" title="跨域请求"></a><strong>跨域请求</strong></h3><p>跨域请求可能会从下面这几种请求中发出：</p>
<ol>
<li>调用 <code>XMLHttpRequest</code> 或者 <code>Fetch</code> api。</li>
</ol>
<p>XMLHttpRequest 是什么？（我是后端程序员，前端不太懂，简单解释下，如果解释的不好，还请前端大佬们不要胖揍我）</p>
<p>所有的现代浏览器都有一个内置的 <code>XMLHttpReqeust</code> 对象，这个对象可以用于从服务器请求数据。</p>
<p>XMLHttpReqeust 对于开发人员来说很重要，XMLHttpReqeust 对象可以用来做下面这些事情</p>
<ul>
<li>更新网页无需重新刷新页面</li>
<li>页面加载后从服务器请求数据</li>
<li>页面加载后从服务端获取数据</li>
<li>在后台将数据发送到服务器</li>
</ul>
<p>使用 XMLHttpRequest(XHR) 对象与服务器进行交互，你可以从 URL 检索数据从而不必刷新整个页面，这使网页可以更新页面的一部分，而不会中断用户的操作。XMLHttpRequest 在 <code>AJAX</code> 异步编程中使用很广泛。</p>
<p>再来说一下 Fetch API 是什么，Fetch 提供了请求和响应对象（以及其他网络请求）的通用定义。它还提供了相关概念的定义，例如 CORS 和 HTTP Origin 头语义，并在其他地方取代了它们各自的定义。</p>
<ol>
<li>Web 字体（用于 CSS 中@ font-face中的跨域字体使用），以便服务器可以部署 TrueType 字体，这些字体只能由允许跨站点加载和使用的网站使用。</li>
<li>WebGL 纹理</li>
<li>使用 <code>drawImage()</code> 绘制到画布上的图像/视频帧</li>
<li>图片的 CSS 形状</li>
</ol>
<h3 id="跨域功能概述"><a href="#跨域功能概述" class="headerlink" title="跨域功能概述"></a><strong>跨域功能概述</strong></h3><p>跨域资源共享标准通过添加新的 HTTP 标头来工作，这些标头允许服务器描述允许哪些来源从 Web 浏览器读取信息。另外，对于可能导致服务器数据产生副作用的 HTTP 请求方法（尤其是 GET 或者具有某些 MIME 类型 POST 方法以外 HTTP 方法），该规范要求浏览器<code>预检</code>请求，使用 HTTP OPTIONS 请求方法从服务器请求受支持的方法，然后在服务器<code>批准</code>后发送实际请求。服务器还可以通知客户端是否应与请求一起发送<code>凭据</code>（例如 Cookies 和 HTTP 身份验证）。</p>
<blockquote>
<p>注意：CORS 故障会导致错误，但是出于安全原因，该错误的详细信息不适用于 JavaScript。所有代码都知道发生了错误。确定具体出问题的唯一方法是查看浏览器的控制台以获取详细信息。</p>
</blockquote>
<h3 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a><strong>访问控制</strong></h3><p>下面我会和大家探讨三种方案，这些方案都演示了跨域资源共享的工作方式。所有这些示例都使用XMLHttpRequest，它可以在任何支持的浏览器中发出跨站点请求。</p>
<h4 id="简单请求"><a href="#简单请求" class="headerlink" title="简单请求"></a>简单请求</h4><p>一些请求不会触发 <code>CORS预检</code>（关于预检我们后面再介绍）。<code>简单请求</code>是满足一下所有条件的请求</p>
<ul>
<li><p>允许以下的方法：<code>GET</code>、<code>HEAD</code>和 <code>POST</code></p>
</li>
<li><p>除了由用户代理自动设置的标头（例如 Connection、User-Agent 或者在 Fetch 规范中定义为禁止标头名称的其他标头）外，唯一允许手动设置的标头是那些 Fetch 规范将其定义为 <code>CORS安全列出的请求标头</code> ，它们是：</p>
</li>
<li><ul>
<li>Accept</li>
<li>Accept-Language</li>
<li>Content-Language</li>
<li>Content-Type（下面会介绍）</li>
<li>DPR</li>
<li>Downlink</li>
<li>Save-Data</li>
<li>Viewport-Width</li>
<li>Width</li>
</ul>
</li>
<li><p>Content-Type 标头的唯一允许的值是</p>
</li>
<li><ul>
<li>application/x-www-form-urlencoded</li>
<li>multipart/form-data</li>
<li>text/plain</li>
</ul>
</li>
<li><p>没有在请求中使用的任何 XMLHttpRequestUpload 对象上注册事件侦听器；这些可以使用XMLHttpRequest.upload 属性进行访问。</p>
</li>
<li><p>请求中未使用 ReadableStream对象。</p>
<p>例如，假定 web 内容 <code>https://foo.example</code> 想要获取 <code>https://bar.other</code> 域的资源，那么 JavaScript 中的代码可能会像下面这样写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const xhr = new XMLHttpRequest();</span><br><span class="line">const url = &apos;https://bar.other/resources/public-data/&apos;;</span><br><span class="line">   </span><br><span class="line">xhr.open(&apos;GET&apos;, url);</span><br><span class="line">xhr.onreadystatechange = someHandler;</span><br><span class="line">xhr.send();</span><br></pre></td></tr></table></figure>
</li>
</ul>
<p>这使用 CORS 标头来处理特权，从而在客户端和服务器之间执行某种转换。</p>
<p><img src="/2020/02/06/HTTP协议要点/640.webp" alt="img"></p>
<p>让我们看看在这种情况下浏览器将发送到服务器的内容，并让我们看看服务器如何响应：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /resources/public-data/ HTTP/1.1</span><br><span class="line">Host: bar.other</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: en-us,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip,deflate</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Origin: https://foo.example</span><br></pre></td></tr></table></figure>
<p>注意请求的标头 Origin ，它表明调用来自于 <code>https://foo.example</code>。让我们看看服务器是如何响应的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 01 Dec 2008 00:23:53 GMT</span><br><span class="line">Server: Apache/2</span><br><span class="line">Access-Control-Allow-Origin: *</span><br><span class="line">Keep-Alive: timeout=2, max=100</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Transfer-Encoding: chunked</span><br><span class="line">Content-Type: application/xml</span><br><span class="line"></span><br><span class="line">[…XML Data…]</span><br></pre></td></tr></table></figure>
<p>服务端发送 <code>Access-Control-Allow-Origin</code> 作为响应。使用 <code>Origin</code> 标头和  <code>Access-Control-Allow-Origin</code> 展示了最简单的访问控制协议。在这个事例中，服务端使用<code>Access-Control-Allow-Origin</code> 作为响应，也就说明该资源可以被任何域访问。</p>
<p>如果位于<code>https://bar.other</code>的资源所有者希望将对资源的访问限制为仅来自<code>https://foo.example</code>的请求，他们应该发送如下响应</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin: https://foo.example</span><br></pre></td></tr></table></figure>
<p>现在除了 <code>https://foo.example</code> 之外的任何域都无法以跨域方式访问到 <code>https://bar.other</code>的资源。</p>
<h4 id="预检请求"><a href="#预检请求" class="headerlink" title="预检请求"></a>预检请求</h4><p>和上面探讨的简单请求不同，<code>预检</code>请求首先通过 <code>OPTIONS</code> 方法向另一个域上的资源发送 HTTP 请求，用来确定实际请求是否可以安全的发送。跨站点这样被<code>预检</code>，因为它们可能会影响用户数据。</p>
<p>下面是一个预检事例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const xhr = new XMLHttpRequest();</span><br><span class="line">xhr.open(&apos;POST&apos;, &apos;https://bar.other/resources/post-here/&apos;);</span><br><span class="line">xhr.setRequestHeader(&apos;X-PINGOTHER&apos;, &apos;pingpong&apos;);</span><br><span class="line">xhr.setRequestHeader(&apos;Content-Type&apos;, &apos;application/xml&apos;);</span><br><span class="line">xhr.onreadystatechange = handler;</span><br><span class="line">xhr.send(&apos;&lt;person&gt;&lt;name&gt;Arun&lt;/name&gt;&lt;/person&gt;&apos;);</span><br></pre></td></tr></table></figure>
<p>上面的事例创建了一个 XML 请求体用来和 POST 请求一起发送。此外，设置了非标准请求头 <code>X-PINGOTHER</code> ，这个标头不是 HTTP/1.1 的一部分，但通常对 Web 程序很有用。由于请求的 <code>Content-Type</code> 使用 <code>application/xml</code>，并且设置了自定义标头，因此该请求被<code>预检</code>。如下图所示</p>
<p><img src="/2020/02/06/HTTP协议要点/640.webp" alt="img"></p>
<blockquote>
<p>如下所述，实际的 POST 请求不包含 Access-Control-Request- * 标头；只有 OPTIONS 请求才需要它们。</p>
</blockquote>
<p>下面我们来看一下完整的客户端/服务器交互，首先是预检请求/响应</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">OPTIONS /resources/post-here/ HTTP/1.1</span><br><span class="line">Host: bar.other</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: en-us,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip,deflate</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Origin: http://foo.example</span><br><span class="line">Access-Control-Request-Method: POST</span><br><span class="line">Access-Control-Request-Headers: X-PINGOTHER, Content-Type</span><br><span class="line">HTTP/1.1 204 No Content</span><br><span class="line">Date: Mon, 01 Dec 2008 01:15:39 GMT</span><br><span class="line">Server: Apache/2</span><br><span class="line">Access-Control-Allow-Origin: https://foo.example</span><br><span class="line">Access-Control-Allow-Methods: POST, GET, OPTIONS</span><br><span class="line">Access-Control-Allow-Headers: X-PINGOTHER, Content-Type</span><br><span class="line">Access-Control-Max-Age: 86400</span><br><span class="line">Vary: Accept-Encoding, Origin</span><br><span class="line">Keep-Alive: timeout=2, max=100</span><br><span class="line">Connection: Keep-Alive</span><br></pre></td></tr></table></figure>
<p>上面的1 -11 行代表预检请求，预检请求使用 <code>OPYIIONS</code> 方法，浏览器根据上面的 JavaScript 代码段所使用的请求参数确定是否需要发送此请求，以便服务器可以响应是否可以使用实际请求参数发送请求。OPTIONS 是一种 HTTP / 1.1方法，用于确定来自服务器的更多信息，并且是一种安全的方法，这意味着它不能用于更改资源。请注意，与 OPTIONS 请求一起，还发送了另外两个请求标头（分别是第9行和第10行）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Request-Method: POST</span><br><span class="line">Access-Control-Request-Headers: X-PINGOTHER, Content-Type</span><br></pre></td></tr></table></figure>
<p><code>Access-Control-Request-Method</code> 标头作为预检请求的一部分通知服务器，当发送实际请求时，将使用<code>POST</code> 请求方法发送该请求。</p>
<p><code>Access-Control-Request-Headers</code> 标头通知服务器，当发送请求时，它将与X-PINGOTHER 和 Content-Type 自定义标头一起发送。服务器可以确定这种情况下是否接受请求。</p>
<p>下面的 1 - 11行是服务器发回的响应，表示<code>POST</code> 请求和 <code>X-PINGOTHER</code> 是可以接受的，我们着重看一下下面这几行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin: http://foo.example</span><br><span class="line">Access-Control-Allow-Methods: POST, GET, OPTIONS</span><br><span class="line">Access-Control-Allow-Headers: X-PINGOTHER, Content-Type</span><br><span class="line">Access-Control-Max-Age: 86400</span><br></pre></td></tr></table></figure>
<p>服务器完成响应表明源 <code>http://foo.example</code> 是可以接受的 URL，能够允许 <code>POST、GET、OPTIONS</code> 进行请求，允许自定义标头 <code>X-PINGOTHER, Content-Type</code>。最后，<code>Access-Control-Max-Age</code> 以秒为单位给出一个值，这个值表示对预检请求的响应可以缓存多长时间，在此期间内无需发送其他预检请求。</p>
<p>完成预检请求后，将发送实际请求：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST /resources/post-here/ HTTP/1.1</span><br><span class="line">Host: bar.other</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: en-us,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip,deflate</span><br><span class="line">Connection: keep-alive</span><br><span class="line">X-PINGOTHER: pingpong</span><br><span class="line">Content-Type: text/xml; charset=UTF-8</span><br><span class="line">Referer: https://foo.example/examples/preflightInvocation.html</span><br><span class="line">Content-Length: 55</span><br><span class="line">Origin: https://foo.example</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line"></span><br><span class="line">&lt;person&gt;&lt;name&gt;Arun&lt;/name&gt;&lt;/person&gt;</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 01 Dec 2008 01:15:40 GMT</span><br><span class="line">Server: Apache/2</span><br><span class="line">Access-Control-Allow-Origin: https://foo.example</span><br><span class="line">Vary: Accept-Encoding, Origin</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Length: 235</span><br><span class="line">Keep-Alive: timeout=2, max=99</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line">[Some GZIP&apos;d payload]</span><br></pre></td></tr></table></figure>
<p>正式响应中很多标头我们在之前的文章已经探讨过了，本篇不再做详细的介绍，读者可以参考<a href="https://mp.weixin.qq.com/s?__biz=MzU2NDg0OTgyMA==&amp;mid=2247485214&amp;idx=1&amp;sn=2cec80cfd606f4b4444db974246ee75e&amp;chksm=fc45faedcb3273fb48dd5a16e4c375680adb8c6e59a52455f14ac2c2e0afda0c9265ff544044&amp;token=347964925&amp;lang=zh_CN&amp;scene=21#wechat_redirect" target="_blank" rel="noopener"><strong>你还在为 HTTP 的这些概念头疼吗？</strong></a> 查阅</p>
<h4 id="带凭证的请求"><a href="#带凭证的请求" class="headerlink" title="带凭证的请求"></a>带凭证的请求</h4><p>XMLHttpRequest 或 Fetch 和 CORS 最有趣的功能就是能够发出知道 HTTP Cookie 和 HTTP 身份验证的 <code>凭证</code> 请求。默认情况下，在跨站点 XMLHttpRequest 或 Fetch 调用中，浏览器将不发送凭据。调用 XMLHttpRequest对象或 Request 构造函数时必须设置一个特定的标志。</p>
<p>在下面这个例子中，最初从 <code>http://foo.example</code> 加载的内容对设置了 Cookies 的<code>http://bar.other</code> 上的资源进行了简单的 GET 请求， foo.example 上可能的代码如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const invocation = new XMLHttpRequest();</span><br><span class="line">const url = &apos;http://bar.other/resources/credentialed-content/&apos;;</span><br><span class="line">    </span><br><span class="line">function callOtherDomain() &#123;</span><br><span class="line">  if (invocation) &#123;</span><br><span class="line">    invocation.open(&apos;GET&apos;, url, true);</span><br><span class="line">    invocation.withCredentials = true;</span><br><span class="line">    invocation.onreadystatechange = handler;</span><br><span class="line">    invocation.send();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>第7行显示 XMLHttpRequest 上的标志，必须设置该标志才能使用 Cookie 进行调用。默认情况下，调用是不在使用 Cookie 的情况下进行的。由于这是一个简单的 GET 请求，因此不会进行预检，但是浏览器将拒绝任何没有 Access-Control-Allow-Credentials 的响应：标头为true，指的是响应不会返回 web 页面的内容。</p>
<p>上面的请求用下图可以表示</p>
<p><img src="/2020/02/06/HTTP协议要点/640.webp" alt="img"></p>
<p>这是客户端和服务器之间的示例交换：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /resources/access-control-with-credentials/ HTTP/1.1</span><br><span class="line">Host: bar.other</span><br><span class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.14; rv:71.0) Gecko/20100101 Firefox/71.0</span><br><span class="line">Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8</span><br><span class="line">Accept-Language: en-us,en;q=0.5</span><br><span class="line">Accept-Encoding: gzip,deflate</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Referer: http://foo.example/examples/credential.html</span><br><span class="line">Origin: http://foo.example</span><br><span class="line">Cookie: pageAccess=2</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Date: Mon, 01 Dec 2008 01:34:52 GMT</span><br><span class="line">Server: Apache/2</span><br><span class="line">Access-Control-Allow-Origin: https://foo.example</span><br><span class="line">Access-Control-Allow-Credentials: true</span><br><span class="line">Cache-Control: no-cache</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Set-Cookie: pageAccess=3; expires=Wed, 31-Dec-2008 01:34:53 GMT</span><br><span class="line">Vary: Accept-Encoding, Origin</span><br><span class="line">Content-Encoding: gzip</span><br><span class="line">Content-Length: 106</span><br><span class="line">Keep-Alive: timeout=2, max=100</span><br><span class="line">Connection: Keep-Alive</span><br><span class="line">Content-Type: text/plain</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[text/plain payload]</span><br></pre></td></tr></table></figure>
<p>上面第10行包含指向<code>http://bar.other</code> 上的内容 Cookie，但是如果 bar.other 没有以<code>Access-Control-Allow-Credentials:true</code> 响应（下面第五行），响应将被忽略，并且不能使用网站返回的内容。</p>
<p><strong>请求凭证和通配符</strong></p>
<p>当回应凭证请求时，服务器必须在 <code>Access-Control-Allow-Credentials</code> 中指定一个来源，而不能直接写<code>*</code> 通配符</p>
<p>因为上面示例代码中的请求标头包含 Cookie 标头，如果 <code>Access-Control-Allow-Credentials</code> 中是指定的通配符 <code>*</code> 的话，请求会失败。</p>
<p>注意上面示例中的 <code>Set-Cookie</code> 响应标头还设置了另外一个值，如果发生故障，将引发异常（取决于所使用的API）。</p>
<h3 id="HTTP-响应标头"><a href="#HTTP-响应标头" class="headerlink" title="HTTP 响应标头"></a><strong>HTTP 响应标头</strong></h3><p>下面会列出一些服务器跨域共享规范定义的 HTTP 标头，上面简单概述了一下，现在一起来认识一下，主要会介绍下面这些</p>
<ul>
<li>Access-Control-Allow-Origin</li>
<li>Access-Control-Allow-Credentials</li>
<li>Access-Control-Allow-Headers</li>
<li>Access-Control-Allow-Methods</li>
<li>Access-Control-Expose-Headers</li>
<li>Access-Control-Max-Age</li>
<li>Access-Control-Request-Headers</li>
<li>Access-Control-Request-Method</li>
<li>Origin</li>
</ul>
<h4 id="Access-Control-Allow-Origin"><a href="#Access-Control-Allow-Origin" class="headerlink" title="Access-Control-Allow-Origin"></a>Access-Control-Allow-Origin</h4><p><code>Access-Control-Allow-Origin</code> 是 HTTP 响应标头，指示响应是否能够和给定的源共享资源。Access-Control-Allow-Origin 指定单个资源会告诉浏览器允许指定来源访问资源。对于没有凭据的请求 <code>*</code>通配符，告诉浏览器允许任何源访问资源。</p>
<p>例如，如果要允许源 <code>https://mozilla.org</code> 的代码访问资源，可以使用如下的指定方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Origin: https://mozilla.org</span><br><span class="line">Vary: Origin</span><br></pre></td></tr></table></figure>
<p>如果服务器指定单个来源而不是<code>*</code>通配符，则服务器还应在 Vary 响应标头中包含该来源。</p>
<h4 id="Access-Control-Allow-Credentials"><a href="#Access-Control-Allow-Credentials" class="headerlink" title="Access-Control-Allow-Credentials"></a>Access-Control-Allow-Credentials</h4><p><code>Access-Control-Allow-Credentials</code> 是 HTTP 的响应标头，这个标头告诉浏览器，当包含凭证请求（Request.credentials）时是否将响应公开给前端 JavaScript 代码。</p>
<p>这时候你会问到 <code>Request.credentials</code> 是什么玩意？不要着急，来给你看一下，首先来看 Request 是什么玩意，</p>
<p>实际上，Request 是 Fetch API 的一类接口代表着资源请求。一般创建 Request 对象有两种方式</p>
<ul>
<li>使用 Request() 构造函数创建一个 Request 对象</li>
<li>还可以通过 FetchEvent.request api 操作来创建</li>
</ul>
<p>再来说下 Request.credentials 是什么意思，Request 接口的凭据只读属性指示在跨域请求的情况下，用户代理是否应从其他域发送 cookie。（其他 Request 对象的方法详见 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Request）" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/API/Request）</a></p>
<p>当发送的是凭证模式的请求包含 （Request.credentials）时，如果 Access-Control-Allow-Credentials 值为 true，浏览器将仅向前端 JavaScript 代码公开响应。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Credentials: true</span><br></pre></td></tr></table></figure>
<p>凭证一般包括 <strong>cookie、认证头和 TLS 客户端证书</strong></p>
<blockquote>
<p>当用作对预检请求响应的一部分时，这表明是否可以使用凭据发出实际请求。注意简单的<code>GET</code> 请求不会进行预检。</p>
</blockquote>
<p>可以参考一个实际的例子 <a href="https://www.jianshu.com/p/ea485e5665b3" target="_blank" rel="noopener">https://www.jianshu.com/p/ea485e5665b3</a></p>
<h4 id="Access-Control-Allow-Headers"><a href="#Access-Control-Allow-Headers" class="headerlink" title="Access-Control-Allow-Headers"></a>Access-Control-Allow-Headers</h4><p><code>Access-Control-Allow-Headers</code> 是一个响应标头，这个标头用来响应预检请求，它发出实际请求时可以使用哪些HTTP标头。</p>
<p><strong>示例</strong></p>
<ul>
<li>自定义标头</li>
</ul>
<p>这是 Access-Control-Allow-Headers 标头的示例。它表明除了像 CROS 安全列出的请求标头外，对服务器的 CROS 请求还支持名为 <code>X-Custom-Header</code> 的自定义标头。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Headers: X-Custom-Header</span><br></pre></td></tr></table></figure>
<ul>
<li>多个标头</li>
</ul>
<p>这个例子展示了 Access-Control-Allow-Headers 如何使用多个标头</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Headers: X-Custom-Header, Upgrade-Insecure-Requests</span><br></pre></td></tr></table></figure>
<ul>
<li>绕过其他限制</li>
</ul>
<p>尽管始终允许使用 CORS 安全列出的请求标头，并且通常不需要在 Access-Control-Allow-Headers 中列出这些标头，但是无论如何列出它们都将绕开适用的其他限制。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Headers: Accept</span><br></pre></td></tr></table></figure>
<p>这里你可能会有疑问，哪些是 CORS 列出的安全标头？（别嫌累，就是这么麻烦）</p>
<p>有下面这些 <strong>Accep、Accept-Language、Content-Language、Content-Type</strong> ，当且仅当包含这些标头时，无需在 CORS 上下文中发送预检请求。</p>
<h4 id="Access-Control-Allow-Methods"><a href="#Access-Control-Allow-Methods" class="headerlink" title="Access-Control-Allow-Methods"></a>Access-Control-Allow-Methods</h4><p><code>Access-Control-Allow-Methods</code> 也是响应标头，它指定了哪些访问资源的方法可以使用预检请求。例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Allow-Methods: POST, GET, OPTIONS</span><br><span class="line">Access-Control-Allow-Methods: *</span><br></pre></td></tr></table></figure>
<h4 id="Access-Control-Expose-Headers"><a href="#Access-Control-Expose-Headers" class="headerlink" title="Access-Control-Expose-Headers"></a>Access-Control-Expose-Headers</h4><p>Access-Control-Expose-Headers 响应标头表明哪些标头可以作为响应的一部分公开。默认情况下，仅公开6个CORS安全列出的响应标头，分别是</p>
<ul>
<li>Cache-Control</li>
<li>Content-Language</li>
<li>Content-Type</li>
<li>Expires</li>
<li>Last-Modified</li>
<li>Pragma</li>
</ul>
<p>如果希望客户端能够访问其他标头，则必须使用 Access-Control-Expose-Headers 标头列出它们。下面是示例</p>
<p>要公开非 CORS 安全列出的请求标头，可以像如下这样指定</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Expose-Headers: Content-Length</span><br></pre></td></tr></table></figure>
<p>要另外公开自定义标头，例如 X-Kuma-Revision，可以指定多个标头，并用逗号分隔</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Expose-Headers: Content-Length, X-Kuma-Revision</span><br></pre></td></tr></table></figure>
<p>在不是凭证请求中，你还可以使用通配符</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Expose-Headers: *</span><br></pre></td></tr></table></figure>
<p>但是，这不会通配 <code>Authorization</code> 标头，因此如果需要公开它，则需要明确列出</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Expose-Headers: *, Authorization</span><br></pre></td></tr></table></figure>
<h4 id="Access-Control-Max-Age"><a href="#Access-Control-Max-Age" class="headerlink" title="Access-Control-Max-Age"></a>Access-Control-Max-Age</h4><p>Access-Control-Max-Age 响应头表示预检请求的结果可以缓存多长时间，例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Max-Age: 600</span><br></pre></td></tr></table></figure>
<p>表示预检请求可以缓存10分钟</p>
<h4 id="Access-Control-Request-Headers"><a href="#Access-Control-Request-Headers" class="headerlink" title="Access-Control-Request-Headers"></a>Access-Control-Request-Headers</h4><p>浏览器在发出预检请求时使用 Access-Control-Request-Headers 请求标头，使服务器知道在发出实际请求时客户端可能发送的 HTTP 标头。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Request-Headers: X-PINGOTHER, Content-Type</span><br></pre></td></tr></table></figure>
<h4 id="Access-Control-Request-Method"><a href="#Access-Control-Request-Method" class="headerlink" title="Access-Control-Request-Method"></a>Access-Control-Request-Method</h4><p>同样的，Access-Control-Request-Method 响应标头告诉服务器发出预检请求时将使用那种 HTTP 方法。此标头是必需的，<strong>因为预检请求始终是 OPTIONS</strong>，并且使用的方法与实际请求不同。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Access-Control-Request-Method: POST</span><br></pre></td></tr></table></figure>
<h4 id="Origin-1"><a href="#Origin-1" class="headerlink" title="Origin"></a>Origin</h4><p>Origin 请求标头表明匹配的来源，它不包含任何信息，仅仅包含服务器名称，它与 CORS 请求以及 POST 请求一起发送，它类似于 <code>Referer</code> 标头，但与此标头不同，它没有公开整个路径。例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Origin: https://developer.mozilla.org</span><br></pre></td></tr></table></figure>
<h2 id="HTTP-条件请求"><a href="#HTTP-条件请求" class="headerlink" title="HTTP 条件请求"></a><strong>HTTP 条件请求</strong></h2><p>HTTP 具有条件请求的概念，通过比较资源更新生成的值与验证器的值进行比较，来确定资源是否进行过更新。这样的请求对于验证缓存的内容、条件请求、验证资源的完整性来说非常重要。</p>
<h3 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h3><p>HTTP 条件请求是根据特定标头的值执行不同的请求，这些标头定义了一个前提条件，如果前提条件匹配或不匹配，则请求的结果将有所不同。</p>
<ul>
<li>对于 <code>安全</code> 的方法，像是 <code>GET</code>、用于请求文档的资源，仅当条件请求的条件满足时发回文档资源，所以，这种方式可以节约带宽。</li>
</ul>
<blockquote>
<p>什么是安全的方法，对于 HTTP 来说，<strong>安全的方法是不会改变服务器状态的方法</strong>，换句话说，如果方法只是只读操作，那么它肯定是安全的方法，比如说 GET 请求，它肯定是安全的方法，因为它只是请求资源。几种常见的方法肯定是安全的，它们是 <strong>GET、HEAD和 OPTIONS</strong>。所有安全的方法都是<code>幂等的</code>（这他妈幂等又是啥意思？）但不是所有幂等的方法都是安全的，例如 PUT 和 DELETE 都是幂等的，但不安全。</p>
<p>幂等性：如果相同的客户端发起一次或者多次 HTTP 请求会得到相同的结果，则说明 HTTP 是幂等的。（我们这次不深究幂等性）</p>
</blockquote>
<ul>
<li>对于 <code>非安全</code> 的方法，像是 PUT，只有原始文档与服务器上存储的资源相同时，才可以使用条件请求来传输文档。（PUT 方法通常用来传输文件，就像 FTP 协议的文件上传一样）</li>
</ul>
<h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a><strong>验证</strong></h3><p>所有的条件请求都会尝试检查服务器上存储的资源是否与某个特定版本的资源相匹配。为了满足这种情况，条件请求需要指示资源的版本。由于无法和整个文件逐个字符进行比较，因此需要把整个文件描绘成一个值，然后把此值和服务器上的资源进行比较，这种方式称为比较器，比较器有两个条件</p>
<ul>
<li>文档的最后修改日期</li>
<li>一个不透明的字符串，用于唯一标识每个版本，称为实体标签或 <code>Etag</code>。</li>
</ul>
<p>比较两个资源是否时相同的版本有些复杂，根据上下文，有两种相等性检查</p>
<ul>
<li>当期望的是字节对字节进行比较时，例如在恢复下载时，使用<code>强 Etag</code>进行验证</li>
<li>当用户代理需要比较两个资源是否具有相同的内容时，使用<code>若 Etag</code> 进行验证</li>
</ul>
<p>HTTP 协议默认使用 <code>强验证</code>，它指定何时进行弱验证</p>
<h4 id="强验证"><a href="#强验证" class="headerlink" title="强验证"></a>强验证</h4><p>强验证保证的是<code>字节</code> 级别的验证，严格的验证非常严格，可能在服务器级别难以保证，但是它能够保证任何时候都不会丢失数据，但这种验证丢失性能。</p>
<p>要使用 <code>Last-Modified</code> 很难实现强验证，通常，这是通过使用带有资源的 MD5 哈希值的<code>Etag</code> 来完成的。</p>
<h4 id="弱验证"><a href="#弱验证" class="headerlink" title="弱验证"></a>弱验证</h4><p>弱验证不同于强验证，因为如果内容相等，它将认为文档的两个版本相同，例如，一个页面与另一个页面的不同之处仅在于页脚的日期不同，因此该页面被认为与其他页面相同。而使用强验证时则被认为这两个版本是不同的。构建一个若验证的 Etag 系统可能会非常复杂，因为这需要了解每个页面元素的重要性，但是对于优化缓存性能非常有用。</p>
<p>下面介绍一下 Etag 如何实现强弱验证。</p>
<p>Etag 响应头是<code>特定版本</code>的标识，它能够使缓存变得更高效并能够节省带宽，因为如果缓存内容未发生变更，Web 服务器则不需要重新发送完整的响应。除此之外，Etag 能够防止资源同时更新互相覆盖。</p>
<p><img src="/2020/02/06/HTTP协议要点/640.webp" alt="img"></p>
<p>如果给定 URL 上的资源发生变更，必须生成一个新的 <code>Etag</code> 值，通过比较它们可以确定资源的两个表示形式是否相同。</p>
<p>Etag 值有两种，一种是强 Etag，一种是弱 Etag；</p>
<ul>
<li>强 Etag 值，无论实体发生多么细微的变化都会改变其值，一般的表示如下</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Etag: &quot;33a64df551425fcc55e4d42a148795d9f25f89d4&quot;</span><br></pre></td></tr></table></figure>
<ul>
<li>弱 Etag 值，弱 Etag 值只用于提示资源是否相同。只有资源发生了根本改变，产生差异时才会改变 Etag 值。这时，会在字段值最开始处附加 W/。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Etag: W/&quot;0815&quot;</span><br></pre></td></tr></table></figure>
<p>下面就来具体探讨一下条件请求的标头和 Etag 的关系</p>
<h3 id="条件请求"><a href="#条件请求" class="headerlink" title="条件请求"></a><strong>条件请求</strong></h3><p>条件请求主要包含的标头如下</p>
<ul>
<li>If-Match</li>
<li>If-None-Match</li>
<li>If-Modified-Since</li>
<li>If-Unmodified-Since</li>
<li>If-Range</li>
</ul>
<h4 id="If-Match"><a href="#If-Match" class="headerlink" title="If-Match"></a>If-Match</h4><p>对于 <code>GET</code> 和 <code>POST</code> 方法，服务器仅在与列出的 <code>Etag（响应标头）</code> 之一匹配时才返回请求的资源。这里又多了一个新词 <code>Etag</code>，我们稍后再说 Etag 的用法。对于像是 <code>PUT</code>和其他非安全的方法，在这种情况下，它仅仅将上传资源。</p>
<p>下面是两种常见的案例</p>
<ul>
<li>对于 <code>GET</code> 和 <code>POST</code> 方法，会结合使用 <code>Range</code> 标头，它可以确保新发送请求的范围与上一个请求的资源相同，如果不匹配的话，会返回 <code>416</code> 响应。</li>
<li>对于其他方法，特别是 <code>PUT</code> 方法，<code>If-Match</code> 可以防止丢失更新，服务器会比对 If-Match 的字段值和资源的 Etag 值，仅当两者一致时，才会执行请求。反之，则返回状态码 412 Precondition Failed 的响应。例如</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">If-Match: &quot;bfc13a64729c4290ef5b2c2730249c88ca92d82d&quot;</span><br><span class="line">If-Match: *</span><br></pre></td></tr></table></figure>
<h4 id="If-None-Match"><a href="#If-None-Match" class="headerlink" title="If-None-Match"></a>If-None-Match</h4><p>条件请求，它与 <code>If-Match</code> 的作用相反，仅当 <code>If-None-Match</code> 的字段值与 <code>Etag</code> 值不一致时，可处理该请求。对于<code>GET</code> 和 <code>HEAD</code> ，仅当服务器没有与给定资源匹配的 <code>Etag</code> 时，服务器将返回 <code>200 OK</code>作为响应。对于其他方法，仅当最终现有资源的 Etag 与列出的任何值都不匹配时，才会处理请求。</p>
<p>当 <code>GET</code> 和 <code>POST</code> 发送的 <code>If-None-Match</code>与 <code>Etag</code> 匹配时，服务器会返回 <code>304</code>。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">If-None-Match: &quot;bfc13a64729c4290ef5b2c2730249c88ca92d82d&quot;</span><br><span class="line">If-None-Match: W/&quot;67ab43&quot;, &quot;54ed21&quot;, &quot;7892dd&quot;</span><br><span class="line">If-None-Match: *</span><br></pre></td></tr></table></figure>
<h4 id="If-Modified-Since"><a href="#If-Modified-Since" class="headerlink" title="If-Modified-Since"></a>If-Modified-Since</h4><p><code>If-Modified-Since</code> 是 HTTP 条件请求的一部分，只有在给定日期之后，服务端修改了请求所需要的资源，才会返回 200 OK 的响应。如果在给定日期之后，服务端没有修改内容，响应会返回 <code>304</code> 并且不带任何响应体。If-Modified-Since 只能使用 <code>GET</code> 和 <code>HEAD</code>请求。</p>
<p>If-Modified-Since 与 If-None-Match 结合使用时，它将被忽略，除非服务器不支持 If-None-Match。一般表示如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">If-Modified-Since: Wed, 21 Oct 2015 07:28:00 GMT</span><br></pre></td></tr></table></figure>
<blockquote>
<p>注意：这是格林威治标准时间。HTTP 日期始终以格林尼治标准时间表示，而不是本地时间。</p>
</blockquote>
<h4 id="If-Range"><a href="#If-Range" class="headerlink" title="If-Range"></a>If-Range</h4><p><code>If-Range</code> 也是条件请求，如果满足条件（If-Range 的值和 Etag 值或者更新的日期时间一致），则会发出范围请求，否则将会返回全部资源。它的一般表示如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">If-Range: Wed, 21 Oct 2015 07:28:00 GMT</span><br><span class="line">If-Range: bfc13a64729c4290ef5b2c2730249c88ca92d82d</span><br></pre></td></tr></table></figure>
<h4 id="If-Unmodified-Since"><a href="#If-Unmodified-Since" class="headerlink" title="If-Unmodified-Since"></a>If-Unmodified-Since</h4><p><code>If-Unmodified-Since</code> HTTP 请求标头也是一个条件请求，服务器只有在给定日期之后没有对其进行修改时，服务器才返回请求资源。如果在指定日期时间后发生了更新，则以状态码 <code>412 Precondition Failed</code> 作为响应返回。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">If-Unmodified-Since: Wed, 21 Oct 2015 07:28:00 GMT</span><br></pre></td></tr></table></figure>
<h3 id="条件请求示例"><a href="#条件请求示例" class="headerlink" title="条件请求示例"></a><strong>条件请求示例</strong></h3><h4 id="缓存更新"><a href="#缓存更新" class="headerlink" title="缓存更新"></a>缓存更新</h4><p>条件请求最常见的示例就是更新缓存，如果缓存是空或没有缓存，则以<code>200 OK</code>的状态发送回请求的资源。如下图所示</p>
<p><img src="/2020/02/06/HTTP协议要点/640.webp" alt="img"></p>
<p>客户端第一次发送请求没有，缓存为空并且没有条件请求，服务器在收到客户端请求后，设置验证器 <code>Last-Modified</code> 和 <code>Etag</code> 标签，并把这两个标签随着响应一起发送回客户端。</p>
<p>下一次客户端再发送相同的请求后，会直接从缓存中提取，只要缓存没有过期，就不会有任何新的请求到达服务器重新下载资源。但是，一旦缓存过期，客户端不会直接使用缓存的值，而是发出条件请求。验证器的值用作 <code>If-Modified-Since</code> 和<code>If-Match</code>标头的参数。</p>
<p>缓存过期后客户端重新发起请求，服务器收到请求后发现如果资源没有更改，服务器会发回 <code>304 Not Modified</code>响应，这使缓存再次刷新，并让客户端使用缓存的资源。尽管有一个响应/请求往返消耗一些资源，但是这比再次通过有线传输整个资源更有效。</p>
<p><img src="/2020/02/06/HTTP协议要点/640.webp" alt="img"></p>
<p>如果资源已经发生更改，则服务器仅使用新版本的资源返回 200 OK 响应，就像没有条件请求，并且客户端会重新使用新的资源，从这个角度来讲，<strong>缓存是条件请求的前置条件</strong>。</p>
<p><img src="/2020/02/06/HTTP协议要点/640.webp" alt="img"></p>
<h4 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h4><p>HTTP 可以支持文件的部分下载，通过保留已获得的信息，此功能允许恢复先前的操作，从而节省带宽和时间。</p>
<p><img src="/2020/02/06/HTTP协议要点/640.webp" alt="img"></p>
<p>支持断点续传的服务器通过发送 <code>Accept-Ranges</code> 标头广播此消息，一旦发生这种情况，客户端可以通过发送缺少范围的 <code>Ranges</code>标头来恢复下载</p>
<p><img src="/2020/02/06/HTTP协议要点/640.webp" alt="img"></p>
<p>这里你可能有疑问 <code>Ranges</code> 和 <code>Content-Range</code>是什么，来解释一下</p>
<p><strong>Range</strong></p>
<p><code>Range</code> HTTP 请求标头指示服务器应返回文档指定部分的资源，可以一次请求一个 Range 来返回多个部分，服务器会将这些资源返回各个文档中。如果服务器成功返回，那么将返回 206 响应；如果 Range 范围无效，服务器返回<code>416 Range Not Satisfiable</code>错误；服务器还可以忽略 Range 标头，并且返回 200 作为响应。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Range: bytes=200-1000, 2000-6576, 19000-</span><br></pre></td></tr></table></figure>
<p>还有一种表示是</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Range: bytes=0-499, -500</span><br></pre></td></tr></table></figure>
<p>它们分别表示请求前500个字节和最后500个字节，如果范围重叠，则服务器可能会拒绝该请求。</p>
<p><strong>Content-Range</strong></p>
<p>HTTP 的 Content-Range 响应标头是针对范围请求而设定的，返回响应时使用首部字段<code>Content-Range</code>，能够告知客户端响应实体的哪部分是符合客户端请求的，字段以字节为单位。它的一般表示如下</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Content-Range: bytes 200-1000/67589</span><br></pre></td></tr></table></figure>
<p>上段代码表示从所有 <code>67589</code> 个字节中返回 <code>200-1000</code> 个字节的内容</p>
<p>那么上面的 <code>Content-Range</code>你也应该知道是什么意思了</p>
<p><code>断点续传</code>的原理比较简单，但是这种方式存在潜在的问题：如果在两次下载资源的期间进行了资源更新，那么获得的范围将对应于资源的两个不同版本，并且最终文档将被破坏。</p>
<p>为了阻止这种情况的出现，就会使用<code>条件请求</code>。对于范围来说，有两种方法可以做到这一点。一种方法是使用 <code>If-Modified-Since</code>和<code>If-Match</code>，如果前提条件失败，服务器将返回错误；然后客户端从头开始重新下载。</p>
<p><img src="/2020/02/06/HTTP协议要点/640.webp" alt="img"></p>
<p>即使此方法有效，当文档资源发生改变时，它也会添加额外的 <code>响应/请求</code> 交换。这会降低性能，并且 HTTP 具有特定的标头来避免这种情况 <code>If-Range</code>。</p>
<p><img src="/2020/02/06/HTTP协议要点/640.webp" alt="img"></p>
<p>该解决方案效率更高，但灵活性稍差一些，因为在这种情况下只能使用一个 Etag。</p>
<h4 id="通过乐观锁避免丢失更新"><a href="#通过乐观锁避免丢失更新" class="headerlink" title="通过乐观锁避免丢失更新"></a>通过乐观锁避免丢失更新</h4><p>Web 应用程序中最普遍的操作是资源更新。这在任何文件系统或应用程序中都很常见，但是任何允许存储远程资源的应用程序都需要这种机制。</p>
<p>使用 <code>put</code> 方法，你可以实现这一点，客户端首先读取原始文件对其进行修改，然后把它们发送到服务器。</p>
<p><img src="/2020/02/06/HTTP协议要点/640.webp" alt="img"></p>
<p>上面这种请求响应存在问题，一旦考虑到并发性，事情就会变得不准确。当客户端在本地修改资源打算重新发送之前，第二个客户端可以获取相同的资源并对资源进行修改操作，这样就会造成问题。当它们重新发送请求到服务器时，第一个客户端所做的修改将被第二次客户端的修改所覆盖，因为第二次客户端修改并不知道第一次客户端正在修改。资源提交并更新的一方不会传达给另外一方，所以要保留哪个客户的更改，将随着他们提交的速度而变化；这取决于客户端，服务器的性能，甚至取决于人工在客户端编辑文档的性能。例如下面这个流程</p>
<p><img src="/2020/02/06/HTTP协议要点/640.webp" alt="img"></p>
<p>如果没有两个用户同时操作服务器，也就不存在这个问题。但是，现实情况是不可能只有单个用户出现的，所以为了规避或者避免这个问题，我们希望客户端资源在更新时进行提示或者修改被拒绝时收到通知。</p>
<p>条件请求允许实现乐观锁算法。这个概念是允许所有的客户端获取资源的副本，然后让他们在本地修改资源，并成功通过允许第一个客户端提交更新来控制并发，基于此服务端的后面版本的更新都将被拒绝。</p>
<p><img src="/2020/02/06/HTTP协议要点/640.webp" alt="img"></p>
<p>这是使用 <code>If-Match</code> 或 <code>If-Unmodified-Since</code>标头实现的。如果 Etag 与原始文件不匹配，或者自获取以来已对文件进行了修改，则更改为拒绝更新，并显示<code>412 Precondition Failed</code>错误。</p>
<h2 id="HTTP-Cookies"><a href="#HTTP-Cookies" class="headerlink" title="HTTP Cookies"></a><strong>HTTP Cookies</strong></h2><p>HTTP 协议中的 Cookie 包括 <code>Web Cookie</code> 和<code>浏览器 Cookie</code>，它是服务器发送到 Web 浏览器的一小块数据。服务器发送到浏览器的 Cookie，浏览器会进行存储，并与下一个请求一起发送到服务器。通常，它用于判断两个请求是否来自于同一个浏览器，例如用户保持登录状态。</p>
<blockquote>
<p>HTTP Cookie 机制是 HTTP 协议无状态的一种补充和改良</p>
</blockquote>
<p>Cookie 主要用于下面三个目的</p>
<ul>
<li><code>会话管理</code></li>
</ul>
<p>登陆、购物车、游戏得分或者服务器应该记住的其他内容</p>
<ul>
<li><code>个性化</code></li>
</ul>
<p>用户偏好、主题或者其他设置</p>
<ul>
<li><code>追踪</code></li>
</ul>
<p>记录和分析用户行为</p>
<p>Cookie 曾经用于一般的客户端存储。虽然这是合法的，因为它们是在客户端上存储数据的唯一方法，但如今建议使用现代存储 API。Cookie 随每个请求一起发送，因此它们可能会降低性能（尤其是对于移动数据连接而言）。客户端存储的现代 API 是 Web 存储 API（localStorage 和 sessionStorage）和 IndexedDB。</p>
<h3 id="创建-Cookie"><a href="#创建-Cookie" class="headerlink" title="创建 Cookie"></a><strong>创建 Cookie</strong></h3><p>当接收到客户端发出的 HTTP 请求时，服务器可以发送带有响应的 <code>Set-Cookie</code> 标头，Cookie 通常由浏览器存储，然后将 Cookie 与 HTTP 标头一同向服务器发出请求。可以指定到期日期或持续时间，之后将不再发送Cookie。此外，可以设置对特定域和路径的限制，从而限制 cookie 的发送位置。</p>
<h4 id="Set-Cookie-和-Cookie-标头"><a href="#Set-Cookie-和-Cookie-标头" class="headerlink" title="Set-Cookie 和 Cookie 标头"></a>Set-Cookie 和 Cookie 标头</h4><p><code>Set-Cookie</code> HTTP 响应标头将 cookie 从服务器发送到用户代理。下面是一个发送 Cookie 的例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP/2.0 200 OK</span><br><span class="line">Content-type: text/html</span><br><span class="line">Set-Cookie: yummy_cookie=choco</span><br><span class="line">Set-Cookie: tasty_cookie=strawberry</span><br><span class="line"></span><br><span class="line">[page content]</span><br></pre></td></tr></table></figure>
<p>此标头告诉客户端存储 Cookie</p>
<p>现在，随着对服务器的每个新请求，浏览器将使用 Cookie 头将所有以前存储的 cookie 发送回服务器。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">GET /sample_page.html HTTP/2.0</span><br><span class="line">Host: www.example.org</span><br><span class="line">Cookie: yummy_cookie=choco; tasty_cookie=strawberry</span><br></pre></td></tr></table></figure>
<p>Cookie 主要分为三类，它们是 <code>会话Cookie</code>、<code>永久Cookie</code> 和 <code>Cookie的 Secure 和 HttpOnly 标记</code>，下面依次来介绍一下</p>
<h4 id="会话-Cookies"><a href="#会话-Cookies" class="headerlink" title="会话 Cookies"></a><strong>会话 Cookies</strong></h4><p>上面的示例创建的是会话 Cookie ，会话 Cookie 有个特征，客户端关闭时 Cookie 会删除，因为它没有指定Expires 或 Max-Age 指令。这两个指令你看到这里应该比较熟悉了。</p>
<p>但是，Web 浏览器可能会使用会话还原，这会使大多数会话 Cookie 保持永久状态，就像从未关闭过浏览器一样</p>
<h4 id="永久性-Cookies"><a href="#永久性-Cookies" class="headerlink" title="永久性 Cookies"></a><strong>永久性 Cookies</strong></h4><p>永久性 Cookie 不会在客户端关闭时过期，而是在特定日期（Expires）或特定时间长度（Max-Age）外过期。例如</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Set-Cookie: id=a3fWa; Expires=Wed, 21 Oct 2015 07:28:00 GMT;</span><br></pre></td></tr></table></figure>
<h4 id="Cookie的-Secure-和-HttpOnly-标记"><a href="#Cookie的-Secure-和-HttpOnly-标记" class="headerlink" title="Cookie的 Secure 和 HttpOnly 标记"></a><strong>Cookie的 Secure 和 HttpOnly 标记</strong></h4><p>安全的 Cookie 需要经过 HTTPS 协议通过加密的方式发送到服务器。即使是安全的，也不应该将敏感信息存储在cookie 中，因为它们本质上是不安全的，并且此标志不能提供真正的保护。</p>
<p><strong>HttpOnly 的作用</strong></p>
<ul>
<li>会话 cookie 中缺少 HttpOnly 属性会导致攻击者可以通过程序(JS脚本、Applet等)获取到用户的 cookie  信息，造成用户cookie 信息泄露，增加攻击者的跨站脚本攻击威胁。</li>
<li>HttpOnly 是微软对 cookie 做的扩展，该值指定 cookie 是否可通过客户端脚本访问。</li>
<li>如果在 Cookie 中没有设置 HttpOnly 属性为 true，可能导致 Cookie 被窃取。窃取的 Cookie 可以包含标识站点用户的敏感信息，如 ASP.NET 会话 ID 或 Forms 身份验证票证，攻击者可以重播窃取的 Cookie，以便伪装成用户或获取敏感信息，进行跨站脚本攻击等。</li>
</ul>
<h3 id="Cookie-的作用域"><a href="#Cookie-的作用域" class="headerlink" title="Cookie 的作用域"></a><strong>Cookie 的作用域</strong></h3><p><code>Domain</code> 和 <code>Path</code> 标识定义了 Cookie 的作用域：即 Cookie 应该发送给哪些 URL。</p>
<p><code>Domain</code> 标识指定了哪些主机可以接受 Cookie。如果不指定，默认为当前主机(<strong>不包含子域名</strong>）。如果指定了<code>Domain</code>，则一般包含子域名。</p>
<p>例如，如果设置 <code>Domain=mozilla.org</code>，则 Cookie 也包含在子域名中（如<code>developer.mozilla.org</code>）。</p>
<p>例如，设置 <code>Path=/docs</code>，则以下地址都会匹配：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/docs</span><br><span class="line">/docs/Web/</span><br><span class="line">/docs/Web/HTTP</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>HTTP</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>Mermaid 实用教程</title>
    <url>/2020/02/04/Mermaid-%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h1><p><a href="https://mermaidjs.github.io/" target="_blank" rel="noopener">官方文档</a></p>
<p><a href="https://github.com/knsv/mermaid" target="_blank" rel="noopener">Github地址</a></p>
<p>语句末尾分号是可选的。<code>%%</code> 行注释。</p>
<h1 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h1><h2 id="语法说明"><a href="#语法说明" class="headerlink" title="语法说明"></a>语法说明</h2><h3 id="图表方向"><a href="#图表方向" class="headerlink" title="图表方向"></a>图表方向</h3><p>Mermaid 支持多种图表的方向，语法如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">graph 方向描述</span><br><span class="line">    图表中的其他语句...</span><br></pre></td></tr></table></figure>
<p>其中“方向描述”为</p>
<table>
<thead>
<tr>
<th>用词</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>TB</td>
<td>从上到下</td>
</tr>
<tr>
<td>BT</td>
<td>从下到上</td>
</tr>
<tr>
<td>RL</td>
<td>从右到左</td>
</tr>
<tr>
<td>LR</td>
<td>从左到右</td>
</tr>
</tbody>
</table>
<h3 id="节点定义"><a href="#节点定义" class="headerlink" title="节点定义"></a>节点定义</h3><p>即流程图中每个文本块，包括开始、结束、处理、判断等。Mermaid 中每个节点都有一个 id，以及节点的文字。</p>
<table>
<thead>
<tr>
<th>表述</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>id[文字]</code></td>
<td>矩形节点</td>
</tr>
<tr>
<td><code>id(文字)</code></td>
<td>圆角矩形节点</td>
</tr>
<tr>
<td><code>id((文字))</code></td>
<td>圆形节点</td>
</tr>
<tr>
<td><code>id&gt;文字]</code></td>
<td>右向旗帜状节点</td>
</tr>
<tr>
<td><code>id{文字}</code></td>
<td>菱形节点</td>
</tr>
</tbody>
</table>
<p>需要注意的是，如果节点的文字中包含标点符号，需要时用双引号包裹起来。<br>另外如果希望在文字中使用换行，请使用<br>替换换行</p>
<h3 id="节点间的连线"><a href="#节点间的连线" class="headerlink" title="节点间的连线"></a>节点间的连线</h3><table>
<thead>
<tr>
<th>表述</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>&gt;</code></td>
<td>添加尾部箭头</td>
</tr>
<tr>
<td><code>-</code></td>
<td>不添加尾部箭头</td>
</tr>
<tr>
<td><code>--</code></td>
<td>单线</td>
</tr>
<tr>
<td><code>--text--</code></td>
<td>单线上加文字</td>
</tr>
<tr>
<td><code>==</code></td>
<td>粗线</td>
</tr>
<tr>
<td><code>==text==</code></td>
<td>粗线加文字</td>
</tr>
<tr>
<td><code>-.-</code></td>
<td>虚线</td>
</tr>
<tr>
<td><code>-.text.-</code></td>
<td>虚线加文字</td>
</tr>
</tbody>
</table>
<h3 id="子图表"><a href="#子图表" class="headerlink" title="子图表"></a>子图表</h3><p>使用以下语法添加子图表</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">subgraph 子图表名称</span><br><span class="line">    子图表中的描述语句...</span><br><span class="line">end123</span><br></pre></td></tr></table></figure>
<h3 id="对-font-awesome-的支持"><a href="#对-font-awesome-的支持" class="headerlink" title="对 font awesome 的支持"></a>对 font awesome 的支持</h3><p>使用 <code>fa: #图表名称#</code> 的语法添加 fontawesome。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    B--&gt;D;</span><br><span class="line">    C--&gt;D;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/p2chh5tny9.png" alt="img"></p>
<h2 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h2><ul>
<li>TB/TD - top bottom</li>
<li>BT - bottom top</li>
<li>RL - right left</li>
<li>LR - left right</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    Start --&gt; Stop</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/rpmt1s8371.png" alt="img"></p>
<h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    id</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/k5j7lcf2he.png" alt="img"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    id[带文字节点]</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/5oqklmc0rz.png" alt="img"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    id(圆角节点)</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/m1l8w2srpz.png" alt="img"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    id((圆形节点))</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/hzg2snr471.png" alt="img"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    id&gt;不对称节点]</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/d28pv3fqx3.png" alt="img"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    id&#123;菱形节点&#125;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/3v5j4fczmb.png" alt="img"></p>
<h2 id="连接线"><a href="#连接线" class="headerlink" title="连接线"></a>连接线</h2><h3 id="实线，箭头，无文字"><a href="#实线，箭头，无文字" class="headerlink" title="实线，箭头，无文字"></a>实线，箭头，无文字</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A--&gt;B</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/riv4kf6dae.png" alt="img"></p>
<h3 id="实线，无箭头，无文字"><a href="#实线，无箭头，无文字" class="headerlink" title="实线，无箭头，无文字"></a>实线，无箭头，无文字</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A---B</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/101km96s26.png" alt="img"></p>
<h3 id="实线，无箭头，文字"><a href="#实线，无箭头，文字" class="headerlink" title="实线，无箭头，文字"></a>实线，无箭头，文字</h3><p>前面<strong>两个</strong> <code>-</code>，后面<strong>三个</strong> <code>-</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A-- 文字 ---B</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A--- |文字| B</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/vofik65ttt.png" alt="img"></p>
<h3 id="实线，箭头，文字"><a href="#实线，箭头，文字" class="headerlink" title="实线，箭头，文字"></a>实线，箭头，文字</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A-- 文字 --&gt;B</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A--&gt; |文字| B</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/hlimub9499.png" alt="img"></p>
<h3 id="虚线，箭头，无文字"><a href="#虚线，箭头，无文字" class="headerlink" title="虚线，箭头，无文字"></a>虚线，箭头，无文字</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">graph LR;</span><br><span class="line">   A-.-&gt;B;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/793ve0ql3.png" alt="img"></p>
<h3 id="虚线，箭头，文字"><a href="#虚线，箭头，文字" class="headerlink" title="虚线，箭头，文字"></a>虚线，箭头，文字</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">   A-. text .-&gt; B</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/famuxq0vqf.png" alt="img"></p>
<h3 id="大箭头，无文字"><a href="#大箭头，无文字" class="headerlink" title="大箭头，无文字"></a>大箭头，无文字</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">   A ==&gt; B</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/0kdfo5h802.png" alt="img"></p>
<h3 id="大箭头，文字"><a href="#大箭头，文字" class="headerlink" title="大箭头，文字"></a>大箭头，文字</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">   A == text ==&gt; B</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/za7vuejw2d.png" alt="img"></p>
<h2 id="特殊语法"><a href="#特殊语法" class="headerlink" title="特殊语法"></a>特殊语法</h2><h3 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h3><p>文字里用引号避免一些特殊字符的错误。比如矩形节点里有 <code>()</code> 时就无法渲染，所以加上引号。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    id1[<span class="string">"This is the (text) in the box"</span>]</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/zcfze0sen3.png" alt="img"></p>
<h3 id="实体字符"><a href="#实体字符" class="headerlink" title="实体字符"></a>实体字符</h3><p>可以使用 HTML 中的实体字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">     A[<span class="string">"A double quote:#quot;"</span>] --&gt;B[<span class="string">"A dec char:#9829;"</span>]</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/fjcviqs56s.png" alt="img"></p>
<h2 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">    c1--&gt;a2</span><br><span class="line">    subgraph one</span><br><span class="line">    a1--&gt;a2</span><br><span class="line">    end</span><br><span class="line">    subgraph two</span><br><span class="line">    b1--&gt;b2</span><br><span class="line">    end</span><br><span class="line">    subgraph three</span><br><span class="line">    c1--&gt;c2</span><br><span class="line">    end</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/z3b2vu7vmf.png" alt="img"></p>
<h2 id="样式"><a href="#样式" class="headerlink" title="样式"></a>样式</h2><p>linkStyle 后面的数字表示第几根线，从 0 开始。可以指定颜色和粗细。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">graph TD;</span><br><span class="line">    A--&gt;B;</span><br><span class="line">    A--&gt;C;</span><br><span class="line">    B--&gt;D;</span><br><span class="line">    C--&gt;D;</span><br><span class="line">    linkStyle 0 stroke:#0ff,stroke-width:2px;</span><br><span class="line">    linkStyle 3 stroke:#ff3,stroke-width:4px;</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/9mwcxke502.png" alt="img"></p>
<p>可以设置节点背景，边框颜色，粗细，实线还是虚线</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    id1(Start)--&gt;id2(Stop)</span><br><span class="line">    style id1 fill:#f9f,stroke:#333,stroke-width:4px</span><br><span class="line">    style id2 fill:#ccf,stroke:#f66,stroke-width:2px,stroke-dasharray: 5, 5</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/deqsocy55j.png" alt="img"></p>
<h3 id="样式类"><a href="#样式类" class="headerlink" title="样式类"></a>样式类</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">graph LR</span><br><span class="line">    A--&gt;B</span><br><span class="line"></span><br><span class="line">    %% 定义样式类</span><br><span class="line">    classDef className fill:#f9f,stroke:#333,stroke-width:4px;</span><br><span class="line"></span><br><span class="line">    %% 应用样式类，markdown里没效果</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="title">className</span></span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/pdafavbwpk.png" alt="img"></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">classDef default fill:#f9f,stroke:#333,stroke-width:4px;</span><br></pre></td></tr></table></figure>
<p>定义一个名为 <code>default</code> 的类，节点没有指定特定样式类时，将都会应用这个样式类。</p>
<h2 id="图标"><a href="#图标" class="headerlink" title="图标"></a>图标</h2><p>可以使用 <a href="https://fontawesome.com/" target="_blank" rel="noopener">Font Awesome</a> 图标。语法 <code>fa:icon class name</code>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">graph TD</span><br><span class="line">   B[<span class="string">"fa:fa-twitter for peace"</span>]</span><br><span class="line">   B--&gt;C[fa:fa-ban forbidden]</span><br><span class="line">   B--&gt;D(fa:fa-spinner);</span><br><span class="line">   B--&gt;E(A fa:fa-camera-retro perhaps?);</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/xdstdd6e2k.png" alt="img"></p>
<h1 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant Alice</span><br><span class="line">    participant Bob</span><br><span class="line">    Alice-&gt;John: Hello John, how are you?</span><br><span class="line">    loop Healthcheck</span><br><span class="line">        John-&gt;John: Fight against hypochondria</span><br><span class="line">    end</span><br><span class="line">    Note right <span class="keyword">of</span> John: Rational thoughts &lt;br/&gt;prevail...</span><br><span class="line">    John--&gt;Alice: Great!</span><br><span class="line">    John-&gt;Bob: How about you?</span><br><span class="line">    Bob--&gt;John: Jolly good!</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/180rjui5io.png" alt="img"></p>
<h2 id="参与者"><a href="#参与者" class="headerlink" title="参与者"></a>参与者</h2><p>如果不显示声明，参与者将根据第一次出现的顺序排列，如：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">    John--&gt;&gt;Alice: Great!</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/eleicv4hs1.png" alt="img"></p>
<p>第一条语句出现了两个参与者角色，而在这条语句中，Alice 在 John 之前，所以图中也是这个顺序。如果不想根据第一次出现的顺序来排，可以主动声明以定义顺序：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant John</span><br><span class="line">    participant Alice</span><br><span class="line">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">    John--&gt;&gt;Alice: Great!</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/aq8hilfa2o.png" alt="img"></p>
<h3 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h3><p>可以给角色写一个简短的别名以方便书写。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant A <span class="keyword">as</span> Alice</span><br><span class="line">    participant J <span class="keyword">as</span> John</span><br><span class="line">    A-&gt;&gt;J: Hello John, how are you?</span><br><span class="line">    J-&gt;&gt;A: Great!</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/ys9jab2wqg.png" alt="img"></p>
<h2 id="消息"><a href="#消息" class="headerlink" title="消息"></a>消息</h2><p>消息连线有六种样式。</p>
<p>有<strong>一个</strong><code>-</code>是实线，<strong>两个</strong><code>-</code>是虚线。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    A-&gt;B: 无箭头实线</span><br><span class="line">    A--&gt;B: 无箭头虚线(点线)</span><br><span class="line">    A-&gt;&gt;B: 有箭头实线</span><br><span class="line">    A--&gt;&gt;B: 有箭头实线</span><br><span class="line">    A-x B: 有箭头实线，加上叉</span><br><span class="line">    A--x B: 有箭头虚线，加上叉</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/7qplows8g4.png" alt="img"></p>
<h2 id="活动期"><a href="#活动期" class="headerlink" title="活动期"></a>活动期</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    Alice-&gt;&gt;John: Hello John, how are you?</span><br><span class="line">    %% activate 角色名 表示激活控制焦点</span><br><span class="line">    activate John</span><br><span class="line">    John--&gt;&gt;Alice: Great!</span><br><span class="line">    %% deactivate 角色名 表示控制焦点结束</span><br><span class="line">    deactivate John</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/jx85ho8ny2.png" alt="img"></p>
<p>使用 <code>+/-</code> 的更方便的写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    Alice-&gt;&gt;+John: Hello John, how are you?</span><br><span class="line">    John--&gt;&gt;-Alice: Great!</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/2q1cxx79gd.png" alt="img"></p>
<p>可以嵌套：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    Alice-&gt;&gt;+John: Hello John, how are you?</span><br><span class="line">    Alice-&gt;&gt;+John: John, can you hear me?</span><br><span class="line">    John--&gt;&gt;-Alice: Hi Alice, I can hear you!</span><br><span class="line">    John--&gt;&gt;-Alice: I feel great!</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/jee37p2zzs.png" alt="img"></p>
<h2 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h2><p>语法：Note [ right of | left of | over ] [Actor]。</p>
<table>
<thead>
<tr>
<th>表述</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>right of</td>
<td>右侧</td>
</tr>
<tr>
<td>left of</td>
<td>左侧</td>
</tr>
<tr>
<td>over</td>
<td>在当中，可以横跨多个参与者</td>
</tr>
</tbody>
</table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    participant John</span><br><span class="line">    Note right <span class="keyword">of</span> John: Text <span class="keyword">in</span> note</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/vks6zmd1s5.png" alt="img"></p>
<p>over 可用于单独一个角色上，也可以用于相邻两个角色间：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">sequenceDiagram</span><br><span class="line">    Alice-&gt;John: Hello John, how are you?</span><br><span class="line">    Note over Alice,<span class="attr">John</span>: A typical interaction</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/5b8q8sacis.png" alt="img"></p>
<h2 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h2><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">loop Loop text</span><br><span class="line">... statements ...</span><br><span class="line">end</span><br><span class="line">sequenceDiagram</span><br><span class="line">    Alice-&gt;John: Hello John, how are you?</span><br><span class="line">    %% loop 后跟循环体说明文字</span><br><span class="line">    loop Every minute</span><br><span class="line">        John--&gt;Alice: Great!</span><br><span class="line">    %% 标记循环结束</span><br><span class="line">    end</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/4o0mms4o5z.png" alt="img"></p>
<h2 id="选择"><a href="#选择" class="headerlink" title="选择"></a>选择</h2><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alt Describing text</span><br><span class="line">... statements ...</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">... statements ...</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>可选条件，比如在没有 else 分支的情况下使用，有点类似 java 中的 switch 的 default 分支，代表剩下所有情况。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">opt Describing text</span><br><span class="line">... statements ...</span><br><span class="line">end</span><br><span class="line">sequenceDiagram</span><br><span class="line">    Alice-&gt;&gt;Bob: Hello Bob, how are you?</span><br><span class="line">    alt is sick</span><br><span class="line">        Bob-&gt;&gt;Alice: Not so good :(</span><br><span class="line">    <span class="keyword">else</span> is well</span><br><span class="line">        Bob-&gt;&gt;Alice: Feeling fresh like a daisy</span><br><span class="line">    end</span><br><span class="line">    opt Extra response</span><br><span class="line">        Bob-&gt;&gt;Alice: Thanks <span class="keyword">for</span> asking</span><br><span class="line">    end</span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/Mermaid-实用教程/ruwizvoin8.png" alt="img"></p>
]]></content>
      <categories>
        <category>mermaid</category>
      </categories>
      <tags>
        <tag>mermaid</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Apache Bench和Gnuplot产生性能测试图</title>
    <url>/2020/02/04/%E4%BD%BF%E7%94%A8Apache-Bench-%E5%92%8C-Gnuplot%E4%BA%A7%E7%94%9F%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%9B%BE/</url>
    <content><![CDATA[<p><a href="http://httpd.apache.org/docs/2.2/programs/ab.html" target="_blank" rel="noopener">Apache Beach</a> (ab)是Apache自带的一个性能测试工具，专门用来测试网站的性能， 不仅限于Apache web服务器。</p>
<p>它可以同时模拟多个并发请求，测试Web服务器的最大承载压力，同时也可以根据Apache Bench提供的测试结果对服务器性能参数进行调整。它可以记录测试数据，其它工具比如Gnuplot可以利用测试数据进行分析。它也可以提供一个summary，可以直观显示当前测试的web服务器的性能。</p>
<h2 id="安装ab"><a href="#安装ab" class="headerlink" title="安装ab"></a>安装ab</h2><p>  ab是Apache httpd的一部分。不同的发行版提供了不同的安装方法。<br>  比如在笔者使用的redhat 6.4上可以查看此工具在哪个包里：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#yum provides /usr/bin/ab</span></span><br><span class="line">......</span><br><span class="line">httpd-tools-2.2.15-30.el6.centos.x86_64 : Tools <span class="keyword">for</span> use with the Apache HTTP</span><br><span class="line">                                        : Server</span><br><span class="line">Repo        : updates</span><br><span class="line">Matched from:</span><br><span class="line">Filename    : /usr/bin/ab</span><br><span class="line">......</span><br></pre></td></tr></table></figure>
<p>它被打包在httpd-tools包里，安装httpd-tools:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install httpd-tools</span><br></pre></td></tr></table></figure>
<p>安装成功后查看帮助：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ab -h</span><br></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">man ab</span><br></pre></td></tr></table></figure>
<h2 id="运行ab"><a href="#运行ab" class="headerlink" title="运行ab"></a>运行ab</h2><p>  一个最简单的ab例子就是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ab -n 100 -c 10 http://www.google.com/</span></span><br></pre></td></tr></table></figure>
<p>注意网址后面要加”/“或者明确的path如”<a href="https://www.google.com/?gfe_rd=cr&amp;ei=_BvfU77ZGMeL8QfugIHAAw&quot;" target="_blank" rel="noopener">https://www.google.com/?gfe_rd=cr&amp;ei=_BvfU77ZGMeL8QfugIHAAw&quot;</a>.<br>“-c”是并发数，可以模拟同时有多少个clients并发访问。<br>“-n”表示总的请求数。每个client发送的请求数为此数字除以client数（上面的数字）。<br>“-t”可以指定测试的最大时间，如果还不到此数请求已经发完，那么测试也会结束。当使用-t参数时，ab内部默认最大的请求数为50000，为了同时使用”-n”指定的参数，可以将”-t”参数放在”-n”参数之前， 如果想了解更多的信息， 可以查看这篇<a href="http://100continue.iteye.com/blog/1325398" target="_blank" rel="noopener">文章</a>.</p>
<h2 id="实际运行ab"><a href="#实际运行ab" class="headerlink" title="实际运行ab"></a>实际运行ab</h2><p>  我使用apache ab要测试的是一个tomcat搭建的集群，上面跑着CPU密集型的一个应用程序，前面使用nginx作为load balancer。<br>  此应用的一个主要的服务通过RESTful service提供， 并且是POST类型的。 Request body是一个XML。<br>  我想随机的替换body中的一个属性，以便测试动态请求对服务器的影响。 但是Apache ab只能提供静态的数据，所以我下载了它的代码并改造了一下。<br>  <strong>首先创建了一个request.xml， 并将其中的那个属性改为占位符</strong> 修改ab.c文件，将发送请求中的占位符用随机数代替<br>  修改的代码可重用性不高，在这里就不贴了。</p>
<p>写了一个脚本，可以测试不同的并发数：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for var in &#123;4,20,50,100,150,200,300&#125;</span><br><span class="line">do</span><br><span class="line">        ab -g plot/biz$var.dat -r -c $&#123;var&#125; -n $&#123;total&#125; -H 'Accept:application/xml'  -p request.xml -T 'application/xml' http://localhost:8080/app/biz</span><br><span class="line"></span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<h2 id="使用Gnuplot生成图表"><a href="#使用Gnuplot生成图表" class="headerlink" title="使用Gnuplot生成图表"></a>使用Gnuplot生成图表</h2><p>  在上一步中生成了测试数据，我们可以通过Gnuplot这一强大的工具生成漂亮的图表了。<br>  在生成图表之前，我们还需要处理一下获得的数据，<br>  如果直接使用测试生成报表，我们可能得到这样一个图表：<br>  <img src="/2020/02/04/使用Apache-Bench-和-Gnuplot产生性能测试图/image-20200204213258370.png" alt="响应时间"></p>
<p>相应的Gnuplot文件为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#output as png image</span></span><br><span class="line"><span class="string">set</span> <span class="string">terminal</span> <span class="string">png</span> <span class="string">size</span> <span class="number">1000</span><span class="string">,560</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#save file to "domain.png"</span></span><br><span class="line"><span class="string">set</span> <span class="string">output</span> <span class="string">"biz.png"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#graph title</span></span><br><span class="line"><span class="string">set</span> <span class="string">title</span> <span class="string">"Biz Performance"</span></span><br><span class="line"><span class="string">set</span> <span class="string">key</span> <span class="string">invert</span> <span class="string">reverse</span> <span class="string">Left</span> <span class="string">outside</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#nicer aspect ratio for image size</span></span><br><span class="line"><span class="comment">#set size 1,0.7</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># y-axis grid</span></span><br><span class="line"><span class="string">set</span> <span class="string">grid</span> <span class="string">y</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#x-axis label</span></span><br><span class="line"><span class="string">set</span> <span class="string">xlabel</span> <span class="string">"requests"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#y-axis label</span></span><br><span class="line"><span class="string">set</span> <span class="string">ylabel</span> <span class="string">"response time (ms)"</span></span><br><span class="line"><span class="comment">#plot data from "biz.dat" using column 9 with smooth sbezier lines</span></span><br><span class="line"><span class="comment">#and title of "Biz Performance" for the given data</span></span><br><span class="line"><span class="string">plot</span> <span class="string">"biz4.dat"</span> <span class="string">using</span> <span class="number">9</span> <span class="string">smooth</span> <span class="string">sbezier</span> <span class="string">with</span> <span class="string">lines</span> <span class="string">title</span> <span class="string">"concurrency 4"</span><span class="string">,</span> <span class="string">\</span></span><br><span class="line"><span class="string">"biz20.dat"</span> <span class="string">using</span> <span class="number">9</span> <span class="string">smooth</span> <span class="string">sbezier</span> <span class="string">with</span> <span class="string">lines</span> <span class="string">title</span> <span class="string">"concurrency 20"</span><span class="string">,</span> <span class="string">\</span></span><br><span class="line"><span class="string">"biz50.dat"</span> <span class="string">using</span> <span class="number">9</span> <span class="string">smooth</span> <span class="string">sbezier</span> <span class="string">with</span> <span class="string">lines</span> <span class="string">title</span> <span class="string">"concurrency 50"</span><span class="string">,</span> <span class="string">\</span></span><br><span class="line"><span class="string">"biz100.dat"</span> <span class="string">using</span> <span class="number">9</span> <span class="string">smooth</span> <span class="string">sbezier</span> <span class="string">with</span> <span class="string">lines</span> <span class="string">title</span> <span class="string">"concurrency 100"</span><span class="string">,</span> <span class="string">\</span></span><br><span class="line"><span class="string">"biz150.dat"</span> <span class="string">using</span> <span class="number">9</span> <span class="string">smooth</span> <span class="string">sbezier</span> <span class="string">with</span> <span class="string">lines</span> <span class="string">title</span> <span class="string">"concurrency 150"</span><span class="string">,</span> <span class="string">\</span></span><br><span class="line"><span class="string">"biz200.dat"</span> <span class="string">using</span> <span class="number">9</span> <span class="string">smooth</span> <span class="string">sbezier</span> <span class="string">with</span> <span class="string">lines</span> <span class="string">title</span> <span class="string">"concurrency 200"</span><span class="string">,</span> <span class="string">\</span></span><br><span class="line"><span class="string">"biz300.dat"</span> <span class="string">using</span> <span class="number">9</span> <span class="string">smooth</span> <span class="string">sbezier</span> <span class="string">with</span> <span class="string">lines</span> <span class="string">title</span> <span class="string">"concurrency 300"</span></span><br></pre></td></tr></table></figure>
<p>这张图有参考价值，我们可以看到大部分的请求的相应时间落在那个数值段中，但是不能以时间序列显示服务器的性能。 它是以”总用时“ (ttime) 进行排序，所以一般它会一条上升的曲线来显示。<br>这篇<a href="http://www.bradlanders.com/2013/04/15/apache-bench-and-gnuplot-youre-probably-doing-it-wrong/" target="_blank" rel="noopener">文章</a>中指出了一种按照时间序列显示数据的方法。 Apapche ab生成的测试数据中已经包含了时间戳，可以修改Gnuplot生成按时间序列显示的响应时间图：<br>[<img src="/2020/02/04/使用Apache-Bench-和-Gnuplot产生性能测试图/image-20200204213452892.png" alt="时间序列"></p>
<p>Gnuplot文件为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Let's output to a jpeg file</span></span><br><span class="line"><span class="string">set</span> <span class="string">terminal</span> <span class="string">jpeg</span> <span class="string">size</span> <span class="number">500</span><span class="string">,500</span></span><br><span class="line"><span class="comment"># This sets the aspect ratio of the graph</span></span><br><span class="line"><span class="string">set</span> <span class="string">size</span> <span class="number">1</span><span class="string">,</span> <span class="number">1</span></span><br><span class="line"><span class="comment"># The file we'll write to</span></span><br><span class="line"><span class="string">set</span> <span class="string">output</span> <span class="string">"graphs/timeseries.jpg"</span></span><br><span class="line"><span class="comment"># The graph title</span></span><br><span class="line"><span class="string">set</span> <span class="string">title</span> <span class="string">"Benchmark testing"</span></span><br><span class="line"><span class="comment"># Where to place the legend/key</span></span><br><span class="line"><span class="string">set</span> <span class="string">key</span> <span class="string">left</span> <span class="string">top</span></span><br><span class="line"><span class="comment"># Draw gridlines oriented on the y axis</span></span><br><span class="line"><span class="string">set</span> <span class="string">grid</span> <span class="string">y</span></span><br><span class="line"><span class="comment"># Specify that the x-series data is time data</span></span><br><span class="line"><span class="string">set</span> <span class="string">xdata</span> <span class="string">time</span></span><br><span class="line"><span class="comment"># Specify the *input* format of the time data</span></span><br><span class="line"><span class="string">set</span> <span class="string">timefmt</span> <span class="string">"%s"</span></span><br><span class="line"><span class="comment"># Specify the *output* format for the x-axis tick labels</span></span><br><span class="line"><span class="string">set</span> <span class="string">format</span> <span class="string">x</span> <span class="string">"%S"</span></span><br><span class="line"><span class="comment"># Label the x-axis</span></span><br><span class="line"><span class="string">set</span> <span class="string">xlabel</span> <span class="string">'seconds'</span></span><br><span class="line"><span class="comment"># Label the y-axis</span></span><br><span class="line"><span class="string">set</span> <span class="string">ylabel</span> <span class="string">"response time (ms)"</span></span><br><span class="line"><span class="comment"># Tell gnuplot to use tabs as the delimiter instead of spaces (default)</span></span><br><span class="line"><span class="string">set</span> <span class="string">datafile</span> <span class="string">separator</span> <span class="string">'\t'</span></span><br><span class="line"><span class="comment"># Plot the data</span></span><br><span class="line"><span class="string">plot</span> <span class="string">"data/testing.tsv"</span> <span class="string">every</span> <span class="string">::2</span> <span class="string">using</span> <span class="number">2</span><span class="string">:5</span> <span class="string">title</span> <span class="string">'response time'</span> <span class="string">with</span> <span class="string">points</span></span><br><span class="line"><span class="string">exit</span></span><br></pre></td></tr></table></figure>
<p>为了得到按时间序列显示的吞吐率图表，我们可以处理一下得到的测试数据：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for var in &#123;4,20,50,100,150,200,300&#125;</span><br><span class="line">do</span><br><span class="line">   start_time=`awk '&#123;print $6&#125;' plot/biz$var.dat | grep -v 'wait' | sort | uniq -c|head -1|awk '&#123;print $2&#125;'`</span><br><span class="line">  awk '&#123;print $6&#125;' plot/biz$var.dat | grep -v 'wait' | sort | uniq -c|awk -v t=$start_time '&#123;print $2-t,$1&#125;' &gt; plot/epochtime$var.dat</span><br><span class="line">done</span><br></pre></td></tr></table></figure>
<p>然后根据一下的Gnuplot配置生成图表。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#output as png image</span></span><br><span class="line"><span class="string">set</span> <span class="string">terminal</span> <span class="string">png</span>  <span class="string">size</span> <span class="number">1000</span><span class="string">,560</span></span><br><span class="line"></span><br><span class="line"><span class="string">set</span> <span class="string">output</span> <span class="string">"throughput.png"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#graph title</span></span><br><span class="line"><span class="string">set</span> <span class="string">title</span> <span class="string">"Throughput"</span></span><br><span class="line"></span><br><span class="line"><span class="string">set</span> <span class="string">key</span> <span class="string">invert</span> <span class="string">reverse</span> <span class="string">Left</span> <span class="string">outside</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#nicer aspect ratio for image size</span></span><br><span class="line"><span class="comment">#set size 1,0.6</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># y-axis grid</span></span><br><span class="line"><span class="string">set</span> <span class="string">grid</span> <span class="string">y</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#x-axis label</span></span><br><span class="line"><span class="string">set</span> <span class="string">xlabel</span> <span class="string">"time"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#y-axis label</span></span><br><span class="line"><span class="string">set</span> <span class="string">ylabel</span> <span class="string">"responses per second"</span></span><br><span class="line"><span class="string">plot</span> <span class="string">"epochtime4.dat"</span> <span class="string">using</span> <span class="number">1</span><span class="string">:2</span> <span class="string">with</span> <span class="string">lines</span> <span class="string">title</span> <span class="string">"concurrency 4"</span><span class="string">,</span> <span class="string">\</span></span><br><span class="line"><span class="string">"epochtime20.dat"</span> <span class="string">using</span> <span class="number">1</span><span class="string">:2</span> <span class="string">with</span> <span class="string">lines</span> <span class="string">title</span> <span class="string">"concurrency 20"</span><span class="string">,</span> <span class="string">\</span></span><br><span class="line"><span class="string">"epochtime50.dat"</span> <span class="string">using</span> <span class="number">1</span><span class="string">:2</span> <span class="string">with</span> <span class="string">lines</span> <span class="string">title</span> <span class="string">"concurrency 50"</span><span class="string">,</span> <span class="string">\</span></span><br><span class="line"><span class="string">"epochtime100.dat"</span> <span class="string">using</span> <span class="number">1</span><span class="string">:2</span> <span class="string">with</span> <span class="string">lines</span> <span class="string">title</span> <span class="string">"concurrency 100"</span><span class="string">,</span> <span class="string">\</span></span><br><span class="line"><span class="string">"epochtime150.dat"</span> <span class="string">using</span> <span class="number">1</span><span class="string">:2</span> <span class="string">with</span> <span class="string">lines</span> <span class="string">title</span> <span class="string">"concurrency 150"</span><span class="string">,</span> <span class="string">\</span></span><br><span class="line"><span class="string">"epochtime200.dat"</span> <span class="string">using</span> <span class="number">1</span><span class="string">:2</span> <span class="string">with</span> <span class="string">lines</span> <span class="string">title</span> <span class="string">"concurrency 200"</span><span class="string">,</span> <span class="string">\</span></span><br><span class="line"><span class="string">"epochtime300.dat"</span> <span class="string">using</span> <span class="number">1</span><span class="string">:2</span> <span class="string">with</span> <span class="string">lines</span> <span class="string">title</span> <span class="string">"concurrency 300"</span></span><br></pre></td></tr></table></figure>
<p><img src="/2020/02/04/使用Apache-Bench-和-Gnuplot产生性能测试图/image-20200204213604555.png" alt="吞吐率"></p>
]]></content>
      <categories>
        <category>性能测试</category>
      </categories>
      <tags>
        <tag>Apache Beach</tag>
        <tag>Gnuplot</tag>
      </tags>
  </entry>
  <entry>
    <title>12个Git高级命令</title>
    <url>/2020/02/04/12%E4%B8%AAGit%E9%AB%98%E7%BA%A7%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<p>使用Git时常用的命令有pull、commit、push等，貌似很简单。不过，有时你会遇到合并冲突的情况，Git这时会将冲突标记出来，需要你手工来解决。有时，你会不小心将代码提交到错误的分支上，并且又推送到了远程仓库。还有些时候，你需要切换到不同的分支，但Git却不让你这么做，因为还有未保存的修改。如果需要通过另一个分支的提交来为代码打补丁该怎么做呢？本文就将介绍12个Git高级命令，合理使用这些命令可以大大提升应用Git的效率。</p>
<h2 id="1-使用rebase而非merge来拉取上游修改"><a href="#1-使用rebase而非merge来拉取上游修改" class="headerlink" title="1. 使用rebase而非merge来拉取上游修改"></a><strong>1. 使用rebase而非merge来拉取上游修改</strong></h2><p>分支合并会被记录为一次合并提交，这种做法是很有意义的。比如说，可以通过这种方式来标识一个新特性被合并到了发布分支中。不过，当多个团队成员工作在一个项目中并使用常规的git pull来同步分支时，提交时间线就会被不必要的合并提交所污染。更好的做法则是使用git rebase将一个feature分支变基到master分支：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git checkout feature</span><br><span class="line">$ git rebase master</span><br></pre></td></tr></table></figure>
<p>这么做会将整个feature分支移动到master分支的起点，它会合并master分支上所有新的提交。不过，相比于使用合并提交来说，变基会通过在原来的分支中为每次提交创建全新提交来重写项目历史。变基的主要好处在于你会得到一个更加整洁的项目历史。此外，这里还有关于变基的陷阱的一些讨论。</p>
<h2 id="2-在执行git-rebase后解决合并冲突"><a href="#2-在执行git-rebase后解决合并冲突" class="headerlink" title="2. 在执行git rebase后解决合并冲突"></a><strong>2. 在执行git rebase后解决合并冲突</strong></h2><p>正如能力越大责任就越大一样。在执行git rebase时，你可能会遇到合并冲突的情况。合并冲突表示两个提交修改了同一个文件的同一行，Git不知道该应用哪一个修改。</p>
<p>Git会为你提供3个选择来修复导致冲突的提交（fa39187）：</p>
<ul>
<li>可以运行git rebase –abort来完全取消变基。这么做会取消变基修改，并将分支置回到执行git rebase之前的状态。</li>
<li>可以运行git rebase –skip来完全忽略该提交。这样，有问题的提交所引入的变化就不会被添加到历史中。</li>
<li>可以使用与合并冲突相同的标准步骤来解决冲突。</li>
</ul>
<h2 id="3-临时性保存修改"><a href="#3-临时性保存修改" class="headerlink" title="3. 临时性保存修改"></a><strong>3. 临时性保存修改</strong></h2><p>在工作进行中时，有些东西常常会处于凌乱的状态。如果这时需要切换到不同的分支该怎么办呢？Git是不允许你这么做的，因为还有尚未保存的修改。坦率地说，你并不想将半成品提交上去，后面再来修改。这个问题的解决之道就是使用git stash命令。Stash会接收工作目录的当前状态（比如说，修改了的追踪文件与暂存区的修改等），并将其保存到未完成的修改栈中，这样后面随时可以再来修改。可以通过如下命令来暂存你的工作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash</span><br><span class="line">Saved working directory and index state WIP on feature: 3fc175f fix race condition</span><br><span class="line">HEAD is now at 3fc175f fix race condition</span><br></pre></td></tr></table></figure>
<p>现在，工作目录就是干净的了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git status</span><br><span class="line"><span class="comment"># On branch feature</span></span><br><span class="line">nothing to commit, working directory clean</span><br></pre></td></tr></table></figure>
<p>这时就可以安全地切换分支做别的事情了。不过不必担心，暂存的提交依旧还在：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash list</span><br><span class="line">stash@&#123;0&#125;: WIP on feature: 3fc175f fix race condition</span><br></pre></td></tr></table></figure>
<p>稍后，在回到feature分支后，你就可以取回所有暂存的变更了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash pop</span><br><span class="line">On branch feature</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line">  (use <span class="string">"git add ..."</span> to update what will be committed)</span><br><span class="line"></span><br><span class="line">     modified:   index.html</span><br><span class="line">Dropped refs/stash@&#123;0&#125; (ac2321cc3a33ba712b8e50c99a99d3c20da9d6b8)</span><br></pre></td></tr></table></figure>
<p>关于暂存，还有其他一些选项可用，如下所示：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git stash save <span class="string">"describe it"</span>   <span class="comment"># give the stash a name</span></span><br><span class="line">$ git stash clear                <span class="comment"># delete a stashed commit</span></span><br><span class="line">$ git stash save --keep-index    <span class="comment"># stash only unstaged files</span></span><br></pre></td></tr></table></figure>
<h2 id="4-克隆一个特定的远程分支"><a href="#4-克隆一个特定的远程分支" class="headerlink" title="4. 克隆一个特定的远程分支"></a><strong>4. 克隆一个特定的远程分支</strong></h2><p>如果想要从远程仓库中克隆一个特定的分支该怎么做呢？通常你会使用git clone，不过这么做会将所有其他分支都一并克隆下来。一个便捷的方式是使用git remote add：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git init  </span><br><span class="line">$ git remote add -t  -f origin </span><br><span class="line">$ git checkout</span><br></pre></td></tr></table></figure>
<h2 id="5-将cherry-pick远程提交合并到自己的分支中"><a href="#5-将cherry-pick远程提交合并到自己的分支中" class="headerlink" title="5. 将cherry-pick远程提交合并到自己的分支中"></a><strong>5. 将cherry-pick远程提交合并到自己的分支中</strong></h2><p>更有甚者，如果只想将远程仓库的一个特定提交合并到自己的分支中该怎么做呢？可以使用git cherry-pick 来选择给定SHA值的提交，然后将其合并到当前分支中：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git cherry-pick</span><br></pre></td></tr></table></figure>
<h2 id="6-应用来自于不相关的本地仓库的补丁"><a href="#6-应用来自于不相关的本地仓库的补丁" class="headerlink" title="6. 应用来自于不相关的本地仓库的补丁"></a><strong>6. 应用来自于不相关的本地仓库的补丁</strong></h2><p>如果需要将另一个不相关的本地仓库的提交补丁应用到当前仓库该怎么做呢？答案就是下面这条命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git --git-dir=/.git format-patch -k -1 --stdout  | git am -3 -k</span><br></pre></td></tr></table></figure>
<h2 id="7-忽略追踪文件中的变更"><a href="#7-忽略追踪文件中的变更" class="headerlink" title="7. 忽略追踪文件中的变更"></a><strong>7. 忽略追踪文件中的变更</strong></h2><p>如果你和你的同事操纵的是相同分支，那么很有可能需要频繁执行git merge或是git rebase。不过，这么做可能会重置一些与环境相关的配置文件，这样在每次合并后都需要修改。与之相反，你可以通过如下命令永久性地告诉Git不要管某个本地文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git update-index --assume-unchanged</span><br></pre></td></tr></table></figure>
<h2 id="8-每隔X秒运行一次git-pull"><a href="#8-每隔X秒运行一次git-pull" class="headerlink" title="8. 每隔X秒运行一次git pull"></a><strong>8. 每隔X秒运行一次git pull</strong></h2><p>通常，合并冲突出现的原因在于你正在工作的本地仓库不再反映远程仓库的当前状态。这正是我们为什么每天早晨要首先执行一次git pull的缘故。此外，你还可以在后台通过脚本（或是使用GNU Screen）每隔X秒调用一次git pull：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ screen</span><br><span class="line">$ <span class="keyword">for</span>((i=1;i&lt;=10000;i+=1)); <span class="keyword">do</span> sleep X &amp;&amp; git pull; <span class="keyword">done</span></span><br></pre></td></tr></table></figure>
<h2 id="9-将子目录分隔为新的仓库"><a href="#9-将子目录分隔为新的仓库" class="headerlink" title="9. 将子目录分隔为新的仓库"></a><strong>9. 将子目录分隔为新的仓库</strong></h2><p>有时，你可能需要将Git仓库中某个特定的目录转换为一个全新的仓库。这可以通过git filter-branch来实现：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git filter-branch --prune-empty --subdirectory-filter  master</span><br><span class="line"><span class="comment"># Filter the master branch to your directory and remove empty commits</span></span><br><span class="line">Rewrite 48dc599c80e20527ed902928085e7861e6b3cbe6 (89/89)</span><br><span class="line">Ref <span class="string">'refs/heads/master'</span> was rewritten</span><br></pre></td></tr></table></figure>
<p>现在，仓库会包含指定子目录中的所有文件。虽然之前的所有文件都会被删除，但他们依旧存在于Git历史中。现在可以将新的本地仓库推送到远程了。</p>
<h2 id="10-清理"><a href="#10-清理" class="headerlink" title="10. 清理"></a><strong>10. 清理</strong></h2><p>有时，Git会提示“untracked working tree files”会“overwritten by checkout”。造成这种情况的原因有很多。不过通常来说，我们可以使用如下命令来保持工作树的整洁，从而防止这种情况的发生：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git clean -f     <span class="comment"># remove untracked files</span></span><br><span class="line">$ git clean -fd    <span class="comment"># remove untracked files/directories</span></span><br><span class="line">$ git clean -nfd   <span class="comment"># list all files/directories that would be removed</span></span><br></pre></td></tr></table></figure>
<h2 id="11-将项目文件打成tar包，并且排除-git目录"><a href="#11-将项目文件打成tar包，并且排除-git目录" class="headerlink" title="11. 将项目文件打成tar包，并且排除.git目录"></a><strong>11. 将项目文件打成tar包，并且排除.git目录</strong></h2><p>有时，你需要将项目副本提供给无法访问GitHub仓库的外部成员。最简单的方式就是使用tar或zip来打包所有的项目文件。不过，如果不小心，隐藏的.git目录就会包含到tar文件中，这会导致文件体积变大；同时，如果里面的文件与接收者自己的Git仓库弄混了，那就更加令人头疼了。轻松的做法则是自动从tar文件中排除掉.git目录：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ tar cJf .tar.xz / --exclude-vcs</span><br></pre></td></tr></table></figure>
<h2 id="12-查找修改者"><a href="#12-查找修改者" class="headerlink" title="12. 查找修改者"></a><strong>12. 查找修改者</strong></h2><p>最后，如果出现混乱的情况，你一定想要找出是谁造成的。如果生产服务器宕机，那么找到罪魁祸首是比较容易的事情：只需执行git blame。该命令会显示出文件中每一行的作者，提交hash则会找出该行的上一次修改，还能看到提交的时间戳：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ git blame</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>在CentOS上安装Git</title>
    <url>/2020/02/04/%E5%9C%A8CentOS%E4%B8%8A%E5%AE%89%E8%A3%85Git/</url>
    <content><![CDATA[<p>CentOS的yum源中没有git，只能自己编译安装，现在记录下编译安装的内容，留给自己备忘。</p>
<p>确保已安装了依赖的包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install curl</span><br><span class="line">yum install curl-devel</span><br><span class="line">yum install zlib-devel</span><br><span class="line">yum install openssl-devel</span><br><span class="line">yum install perl</span><br><span class="line">yum install cpio</span><br><span class="line">yum install expat-devel</span><br><span class="line">yum install gettext-devel yum install perl-ExtUtils-CBuilder perl-ExtUtils-MakeMaker</span><br></pre></td></tr></table></figure>
<p>下载最新的git包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget http://www.codemonkey.org.uk/projects/git-snapshots/git/git-latest.tar.gz</span><br><span class="line">tar xzvf git-latest.tar.gz</span><br><span class="line"><span class="built_in">cd</span> git-2011-11-30 ＃你的目录可能不是这个</span><br><span class="line">autoconf</span><br><span class="line">./configure</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>
<p>检查下安装的版本，大功告成</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title>大规模网站架构的缓存机制和几何分形学</title>
    <url>/2020/02/04/%E5%A4%A7%E8%A7%84%E6%A8%A1%E7%BD%91%E7%AB%99%E6%9E%B6%E6%9E%84%E7%9A%84%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E5%92%8C%E5%87%A0%E4%BD%95%E5%88%86%E5%BD%A2%E5%AD%A6/</url>
    <content><![CDATA[<p>缓存机制在我们的实际研发工作中，被极其广泛地应用，通过这些缓存机制来提升系统交互的效率。简单的总结来说，就是在两个环节或者系统之间，会引入一个cache/buffer做为提升整体效率的角色。</p>
<p>而 有趣的是，这种缓存机制令人惊奇并且优美的遵循着“几何分形”的规律，也就是几何分形学中的“自相似性”：从整体上看遵循某种组成规律或者特性，同时从每 一个局部看，仍然遵循某种组成的规律或者特性。我们的这些系统，从整体上看遵循了缓存机制，每一个组成的局部也遵循缓存机制。</p>
<p>等同类比的一个概念，我们常常说的“空间换时间”，牺牲一部分空间代价，来换取整体效率的提升。</p>
<pre class="mermaid">graph LR
A[A] ==> B(Cache) ==> C[B]
C[B] ==> B(Cache) ==> A[A]</pre>

<p>例如A和B两者之间的数据交换，为了提升整体的效率，引入角色C，而C被用于当做热点数据的存储，或者是某种中间处理的机制。</p>
<p>我们先从web前端层面开始，看看有哪些比较关键的缓存机制？它们又是怎样协调工作的呢？</p>
<h1 id="一、前端Cache机制"><a href="#一、前端Cache机制" class="headerlink" title="一、前端Cache机制"></a><strong>一、前端Cache机制</strong></h1><h2 id="1-域名转为IP地址（域名服务器DNS缓存）"><a href="#1-域名转为IP地址（域名服务器DNS缓存）" class="headerlink" title="1. 域名转为IP地址（域名服务器DNS缓存）"></a><strong>1. 域名转为IP地址（域名服务器DNS缓存）</strong></h2><p>我们知道域名其实只是一个别名，真实的服务器请求地址，实际上是一个IP地址。获得IP地址的方式，就是查询DNS映射表。虽然这是一个非常简单的查询， 但如果每次用户访问一个url都去查询DNS一次，未免显得太频繁，会产生一个可怕的访问量级。DNS服务器会告诉你，你别老是经常过来，万一我挂了，我们就无法愉快地玩耍了。</p>
<p>各个浏览器的缓存时间，会有一定的差别。例如，在chrome浏览器中查看dns的缓存时间的方式是：chrome://net-internals/#dns。</p>
<p>浏览器一般会在本地会建立一个DNS缓存，在一段比较长的时间里，都是使用本地的缓存映射。例如，在Win7系统的cmd里，可以通过“ipconfig /flushdns ”的方式来立刻刷新本地DNS。</p>
<pre class="mermaid">graph LR
A[浏览器] ==> B(Cache) ==> C[DNS]
C[DNS] ==> B(Cache) ==> A[浏览器]</pre>

<p>优点：域名映射为IP非常快。</p>
<p>成本：消耗一定的浏览器空间来存储映射关系</p>
<h2 id="2-访问服务器，获取静态内容（地理位置分布式服务CDN）"><a href="#2-访问服务器，获取静态内容（地理位置分布式服务CDN）" class="headerlink" title="2. 访问服务器，获取静态内容（地理位置分布式服务CDN）"></a><strong>2. 访问服务器，获取静态内容（地理位置分布式服务CDN）</strong></h2><p>可能有人会觉得，这个CDN不是缓存。其实，CDN的原理就是将离你很远的东西，放在离你很近的地方，通过这种方式提高用户的访问速度。从这个角 度，它也可以理解为牺牲空间成本换取了时间，本质上也是一种特殊的中间cache。腾讯、阿里等这些大的一线互联网公司一般倾向于自己建立CDN系统，中 小型企业也经常使用第三方的CDN服务。</p>
<pre class="mermaid">graph LR
A[浏览器] ==> B(CDN) ==> C[很远的服务器]
C[很远的服务器] ==> B(Cache) ==> A[浏览器]</pre>

<p>优点：解决用户离服务器太远的时候，网络路由中跳来跳去的严重耗时。</p>
<p>成本：全国各地部署多套静态存储服务，管理成本比较高，发布新文件的时候，需要等待全国节点的更新等。</p>
<h2 id="3-浏览器本地缓存（无网络交互类型）"><a href="#3-浏览器本地缓存（无网络交互类型）" class="headerlink" title="3. 浏览器本地缓存（无网络交互类型）"></a><strong>3. 浏览器本地缓存（无网络交互类型）</strong></h2><p>在前端优化原则中，其中一条就是尽量消灭请求，以达到降低服务器压力和提升用户体验的效果。静态文件，例如Js、html、css、图片等内容，很多内容可以1次请求，然后未来就直接访问本地，不再请求web服务器。</p>
<p>常用的实现方法是通过Http协议头中的expire和max-age来控制，这两者的使用方法和区别，我这里就不赘叙了。还有一种HTML5中很热的方式，则是localStorage，尤其在移动端也被做为一个强大的缓存，甚至当做一种本地存储来广泛使用。</p>
<pre class="mermaid">graph LR
A[浏览器] ==> B(本地缓存localStore) ==> C[web服务器]
C[web服务器] ==> B(本地缓存localStore) ==> A[浏览器]</pre>

<p>优点：减少网络传输，加快页面内容展示速度，提升用户体验。</p>
<p>成本：占用客户端的部分内存和磁盘，影响实时性。</p>
<h2 id="4-浏览器和web服务协议缓存（有网络交互类型）"><a href="#4-浏览器和web服务协议缓存（有网络交互类型）" class="headerlink" title="4. 浏览器和web服务协议缓存（有网络交互类型）"></a><strong>4. 浏览器和web服务协议缓存（有网络交互类型）</strong></h2><p>浏览器的本地缓存是存在过期时间的，一旦过期，就必须重新向服务器请求。这个时候，会有两种情形：</p>
<p>服务器的文件或者内容没有更新，可以继续使用浏览器本地缓存。</p>
<p>服务器的文件或者内容已经更新，需要重新请求，通过网络传输新的文件或者内容。</p>
<p>这里的协商方式也可以通过Http协议来控制，Last-Modified和Etag，这个时候请求服务器，如果是内容没有发生变更的情况，服务器会返回 304 Not Modified。这样的话，就不需要每次访问服务器都通过网络传输一个比较大的文件或者数据包，只要简单的http应答就可以达到相同的请求文件效果。</p>
<pre class="mermaid">graph LR
A[浏览器] ==> B(Last-MofifiedEtag机制) ==> C[web服务器]
C[web服务器] ==> B(Last-MofifiedEtag机制) ==> A[浏览器]</pre>
下图中的例子，是腾讯的自建CDN（imgcache.gtime.cn）：
![image-20200204180300749](大规模网站架构的缓存机制和几何分形学/image-20200204180300749.png)

优点：减少频繁的网络大数据包传输，节约带宽，提升用户体验。

成本：增加了服务器处理的步骤，消耗更多的CPU资源。

## **5. 浏览器中间代理**

上面的几种cache机制，实际上都是非常常见。但是，在移动互联网时代，流量昂贵是很多用户心中深深的痛。于是，又出现了一种新型的中间cache， 也就是在浏览器和web服务器再架设一个中间代理。这个代理服务器会帮助手机浏览器去请求web页面，然后将web页面进行处理和压缩（例如压缩文件和图片），使页面变小，然后再传输给手机端的浏览器。

<pre class="mermaid">graph LR
A[手机浏览器] ==> B(浏览器商的中间代理服务器) ==> C[压缩后的Html和图片] ==> A[手机浏览器]
B(浏览器商的中间代理服务器) ==> D[www.qq.com的web服务器]
D[www.qq.com的web服务器] ==> B(浏览器商的中间代理服务器)</pre>
部分手机浏览器（例如Chrome）号称可以节省流量，提升访问速度，实际上就是上述做法。但是，也分为两种情况：

- 用户的网络和手机配置都比较差，因为页面被压缩变小，加载和传输速度变快，并且节约了流量。
- 用户的网络和手机配置都比较好，本身直连速度已经很快了，反而因为设置了中间代理，加载速度变慢，也可节约流量。

下图是chrome手机浏览器中，开启和不开启中间代理的对比图：

![image-20200204180713768](大规模网站架构的缓存机制和几何分形学/image-20200204180713768.png)

优点：节约用户流量，大部分情况下提升了加载速度。

成本：需要架设中间代理服务器，对各种文件进行压缩，有比较高的服务器维护成本。

## **6. 预加载缓存机制**

这种加载方式主要流行在移动端，为了解决手机网速慢和浏览器加载性能问题，浏览器会判断页面的关联内容，进行“预加载”。 也就是说，在用户浏览A页面的时候，就提前下载并且加载B页面的内容。给用户的体验就是，B页面一瞬间就出现了，中间没有任何延迟的感觉，从而带来更好的 极佳的用户体验。

这种实现机制，往往由浏览器来实现，当然，手机页面本身，也可以通过JS来自身实现。而这种机制也存在一些问题，浏览器需要预判用户的浏览行为，在一些场景下，这个预判算法本身不一定准确，如果不准确则带来一定的流量、内存和系统资源的浪费。

<pre class="mermaid">graph LR
A[浏览器] ==> C[页面内容A]
A[浏览器] -.- B(预加载) -.-> D[页面内容B]
A[浏览器] -.- E(预加载) -.-> F[页面内容C/D/E/...]</pre>

<p>优点：给用户带来极佳的页面展示体验。</p>
<p>缺点：预判实现比较复杂，占据一定的内存和手机系统资源，可能产生流量和资源浪费。</p>
<p>前端的cache当然不仅仅如此简单，如果细致到每一个小环节和组成部分，我们会发现实际上是无处不在的，例如浏览器的渲染行为、网络网卡的传输环节，小环节和小环节之间也有无数这种类型的cache角色。</p>
<p>这个就如同几何分形学中的自相似性：从整体上看符合某种组成规律或者特性，同时，从局部看，仍然符合某种组成的规律或者特性。</p>
<p>几何分形的现象在我们生活中，也是非常常见的，例如：</p>
<p>人体中的几何分形例子，例如：人体有1个头部+4肢，局部上看人的手指也是1个手指头+4个手指；人体无论整体或者局部，都大致遵循黄金分割点0.618的比例来生长（五官按照这个比例越多，越好看）。</p>
<p>例如下图中的叶子，每个局部都和主干组成结构相似。</p>
<p><img src="/2020/02/04/大规模网站架构的缓存机制和几何分形学/image-20200204181000405.png" alt="image-20200204181000405"></p>
<h1 id="二、Web系统和几何分形学"><a href="#二、Web系统和几何分形学" class="headerlink" title="二、Web系统和几何分形学"></a><strong>二、Web系统和几何分形学</strong></h1><h2 id="1-Web系统中的缓存机制"><a href="#1-Web系统中的缓存机制" class="headerlink" title="1. Web系统中的缓存机制"></a><strong>1. Web系统中的缓存机制</strong></h2><p>看完上面的前端cache，我们会感觉到缓存机制在前端中的确无处不在，那么它在其他地方和环节，是否也无处不在？</p>
<p>可以看看这张图：</p>
<pre class="mermaid">graph TB
A[浏览器] ==> C[前端cache机制] ==> D[web服务器]
D[web服务器] ==> C[前端cache机制] ==> A[浏览器]
D[web服务器] ==放大web服务器==> B(memcache缓存) ==> E[MySQL]
B(memcache缓存) ==> F[Apache]
E[MySQL] ==> B(memcache缓存)
F[Apache] ==> B(memcache缓存)
E[MySQL] ==放大MySQL==> G(innodb_buffer_pool存放热点数据) ==> H[MySQL内部数据]
G(innodb_buffer_pool存放热点数据) ==> I[外界请求]
H[MySQL内部数据] ==> G(innodb_buffer_pool存放热点数据)
I[外界请求] ==> G(innodb_buffer_pool存放热点数据)</pre>

<p>实际上，每一个环节本身是可以又再次被放大的，放大以后，我们又看见了更多缓存机制的“特性”存在。从一个整体来看，符合该规律，从组成部分来看，仍然符合该规律。</p>
<p>每一个组成缓存机制的“成员”的内部，又存在着更多的缓存机制。</p>
<p>Apache内部的一些“缓存机制”：</p>
<ul>
<li>url映射缓存mod_cache（有mode_disk_cache和mod_mem_cache，后者官方已不推荐）</li>
<li>缓存热点文件打开描述符mod_file_cache（对于静态文件的情况，减少打开文件中open行为的耗时）</li>
<li>启动的时候，通过prefork模式设置的StartServers服务进程池，牺牲内存空间。</li>
</ul>
<p>MySQL内的一些“缓存机制”：</p>
<ul>
<li>数据库的索引，牺牲磁盘空间（组合索引等会占据很大的磁盘空间）</li>
<li>innodb_buffer_pool_size，热点数据的缓存，牺牲内存空间</li>
<li>innodb_flush_method写入磁盘的机制，可以配置成缓冲写入的方式</li>
<li>query_cache_size查询缓存，牺牲内存空间</li>
<li>thread_cache_size数据库连接池的缓存个数，牺牲内存空间</li>
</ul>
<h2 id="2-接近硬件层面的“空间换时间”"><a href="#2-接近硬件层面的“空间换时间”" class="headerlink" title="2. 接近硬件层面的“空间换时间”"></a><strong>2. 接近硬件层面的“空间换时间”</strong></h2><p>那我们再来看更细小的一个环节，计算机写的操作。我们会发现，在内存和物理磁盘之间，还有一个磁盘缓冲区（页高速缓存）的存在，这个是内存和磁盘之间的“缓存”。当然，读取的操作也是同理。</p>
<p>下图是“放大”MySQL中的写入磁盘：</p>
<pre class="mermaid">graph LR
A[外界请求] ==> C[innodb_buffer_pool存放热点数据] ==> B[MySQL内部数据]
B[MySQL内部数据] ==> C[innodb_buffer_pool存放热点数据] ==> A[外界请求]
B[MySQL内部数据] ==放大写入数据==> D[磁盘写入缓冲区在内存中] ==> E[MySQL] ==队列满或超时==> F[物理磁盘]
G[内存] ==> D[磁盘写入缓冲区在内存中]</pre>

<p>实际上，更进一步看，CPU和内存之间也存在缓存机制（常用指令会存在放在寄存器中，因为CPU访问寄存器会远快于访问内存，中间为了缓冲它们之间差距，设置了多级高速缓存）。</p>
<pre class="mermaid">graph LR
A[Mem] ==Bus总线==> B[L3 Cache] ==> C[L2 Cache] ==> D[L1 Cache] ==> E[CPU core]
E[CPU core] ==> D[L1 Cache] ==> C[L2 Cache] ==> B[L3 Cache] ==Bus总线==> A[Mem]</pre>

<p>例如下图是Intel i7 920的各级缓存大小：</p>
<p><img src="/2020/02/04/大规模网站架构的缓存机制和几何分形学/image-20200204195827800.png" alt="image-20200204195827800"></p>
<p>这个时候，我们可以看出来，计算机系统从大的系统层面看，是遵循“缓存机制”的规律的，同时，在每个局部成员的层面，同样遵循该规律。</p>
<h2 id="3-现实世界中的“缓存机制”"><a href="#3-现实世界中的“缓存机制”" class="headerlink" title="3. 现实世界中的“缓存机制”"></a><strong>3. 现实世界中的“缓存机制”</strong></h2><p>我们现在喝水通常使用的是杯子，杯子实际上也扮演着一个特殊的Cache角色。举个例子：一个人离饮水机比较远，他渴了，他有如下两种“喝水”的方式：</p>
<ul>
<li>不用杯子，每次渴了直接去饮水机喝（这个比较霸气侧漏，不要在意细节）。结果：频繁跑动，耗费体力。</li>
<li>使用杯子，渴了先喝杯子（Cache）上的水，如果杯子没有，带上杯子去装水，再喝。结果：比较少跑动，节省体力。</li>
</ul>
<p>这样看不直观，简化为一个流程图如下：</p>
<pre class="mermaid">graph LR
A((人)) -.口渴则过去喝.-> B[比较远的饮水机]
A((人)) ==> D[杯子 Cache] --杯子空则过去--> B[比较远的饮水机]</pre>

<p>这虽然是个人尽皆知的道理，但是，这个方法本身是“进化”出来的。百万年前的原始人类和其他大自然的动物一样的，喝水遵循了第一种方式，只是随着人类的发展，“进化”出第二种喝水的方式。</p>
<p>这里也存在一个缓存机制，就是用杯子的空间获取喝水效率的时间。</p>
<p>还有一个更为典型的例子，就是坐车/运输，假设我们从深圳去广州，我们会去坐客运车。而客运车（假设上面有40个 座位）实际上相当于一个40个座位的“队列”。遵循着网络传输的相同的规律“队列满或者超时则发送”。客车本身的40个位置，就像一个“发送缓冲区”。使 用和不使用这个大的缓冲区，客车也可以有两者运作方式：</p>
<ol>
<li>车站发现来一个人，用只能容纳一个人的小车，不等待直接送一个人去广州。</li>
<li>车站发现来一个人，先放进客车buffer中，等待人满或者达到班车约定时间（队列超时）再出发。</li>
</ol>
<pre class="mermaid">graph LR
A(深圳车站) -.1.来一个立刻用车运走.-> B(广州车站)
A(深圳车站) ==2==> D[40座客车buffer] --> B(广州车站)</pre>

<p>显而易见，第一种是太浪费资源了。</p>
<p>除此之外，还有很多各种各样的例子，如江河上的大坝、我们桌面上的一些东西（它们占据宝贵的桌面空间）、我们公司附近小店里的商品、离我们近的东西等等。</p>
<p>看到这里，很多人会渐渐发觉，计算机的一些原理，竟然在现实世界里有无处不在的“映射和影子”。</p>
<p>几何分形学是个非常有趣的东西，某些规律，实际上还贯穿在整个宏观和微观世界中。</p>
<p>例如“绕转”的现象：</p>
<pre class="mermaid">graph LR
A[电子围绕原子核转] ==> B[月球自转] ==> C[月球围绕地球转] ==> D[地月系围绕太阳转] ==> E[太阳系围绕银河系中心转]</pre>

<h2 id="4-现实世界和计算机“缓存机制”原理的关系，为什么遵循“几何分形”？"><a href="#4-现实世界和计算机“缓存机制”原理的关系，为什么遵循“几何分形”？" class="headerlink" title="4. 现实世界和计算机“缓存机制”原理的关系，为什么遵循“几何分形”？"></a><strong>4. 现实世界和计算机“缓存机制”原理的关系，为什么遵循“几何分形”？</strong></h2><p>实际上，计算机的原理来源于数学，而数学是日常生活现象和规律的高度抽象，源于生活，高于生活。</p>
<pre class="mermaid">graph LR
A[现实世界] -.高度抽象.-> B[数学] -.应用实现.-> C[计算机原理]</pre>

<p>同时，不仅仅“缓存机制”，还有很多其他技术的原理，也能找到这种遵循“几何分形学”的样子。</p>
]]></content>
      <categories>
        <category>缓存</category>
      </categories>
      <tags>
        <tag>cache</tag>
        <tag>架构设计</tag>
      </tags>
  </entry>
  <entry>
    <title>electron-vue开发入门指南</title>
    <url>/2020/01/31/electron-vue%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<h1 id="Electron概述"><a href="#Electron概述" class="headerlink" title="Electron概述"></a>Electron概述</h1><p><img src="/2020/01/31/electron-vue开发入门指南/68747470733a2f2f656c656374726f6e6a732e6f72672f696d616765732f656c656374726f6e2d6c6f676f2e737667.svg" alt="Electron Logo"></p>
<ol>
<li><a href="https://github.com/electron/electron" target="_blank" rel="noopener">GitHub</a> 官网不翻墙太卡，本着能偷懒就偷懒，GayHub就够了，不用翻官网了</li>
<li><a href="https://github.com/electron/i18n/tree/master/content/zh-CN" target="_blank" rel="noopener">中文文档</a></li>
<li><a href="https://www.w3cschool.cn/electronmanual/wcx31ql6.html" target="_blank" rel="noopener">W3C教程</a></li>
</ol>
<h1 id="VUE概述"><a href="#VUE概述" class="headerlink" title="VUE概述"></a>VUE概述</h1><p><img src="/2020/01/31/electron-vue开发入门指南/68747470733a2f2f7675656a732e6f72672f696d616765732f6c6f676f2e706e67.png" alt="Vue logo"></p>
<ol>
<li><a href="https://github.com/vuejs/vue" target="_blank" rel="noopener">GitHub</a></li>
<li><a href="https://cn.vuejs.org/" target="_blank" rel="noopener">VUE官网</a> 官网资料齐全，中英文档都齐备，基本看完够搞个工程了</li>
</ol>
<h1 id="Electron-Vue-联合使用"><a href="#Electron-Vue-联合使用" class="headerlink" title="Electron + Vue 联合使用"></a>Electron + Vue 联合使用</h1><h2 id="安装Nodejs"><a href="#安装Nodejs" class="headerlink" title="安装Nodejs"></a>安装Nodejs</h2><p>安装成功之后<code>node -v</code>，会显示版本，版本可以不用这么新，看心情安装。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">$ node -v</span><br><span class="line"><span class="selector-tag">v12</span><span class="selector-class">.14</span><span class="selector-class">.0</span></span><br></pre></td></tr></table></figure>
<h2 id="搭建Vue开发环境"><a href="#搭建Vue开发环境" class="headerlink" title="搭建Vue开发环境"></a>搭建Vue开发环境</h2><p>直接使用脚手架工具vue-cli，因为在国内的npm非常慢，所以需要重新设置npm镜像，设置为淘宝的镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>
<p>我们可以看一下镜像地址是：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue npm config get registry  </span><br><span class="line">https://registry.npm.taobao.org/</span><br></pre></td></tr></table></figure>
<p>如果不想修改默认npm地址，也可以<a href="https://npm.taobao.org/" target="_blank" rel="noopener">设置cnpm</a>(因为自带翻墙光环，考虑到后面可能不方便翻墙，后面全程优先使用墙内网络操作。)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">//输入命令,查看是否安装成功</span><br><span class="line">cnpm</span><br></pre></td></tr></table></figure>
<p>安装脚手架工具：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --global vue-cli</span><br></pre></td></tr></table></figure>
<p>安装web-pack：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g webpack</span><br></pre></td></tr></table></figure>
<p>yarn 使用国内镜像</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br><span class="line">yarn config list</span><br></pre></td></tr></table></figure>
<h3 id="npm更新package-json"><a href="#npm更新package-json" class="headerlink" title="npm更新package.json"></a>npm更新package.json</h3><p>将package.json中的依赖更新为最新版</p>
<p>安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g npm-check-updates</span><br></pre></td></tr></table></figure>
<p>显示当前目录下项目中所有新的依赖包</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ncu</span><br></pre></td></tr></table></figure>
<p>更新项目package文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ncu -u</span><br></pre></td></tr></table></figure>
<p><a href="https://www.npmjs.com/package/npm-check-updates" target="_blank" rel="noopener">npm-check-updates更多参数</a></p>
<h3 id="什么是Yarn和NPM"><a href="#什么是Yarn和NPM" class="headerlink" title="什么是Yarn和NPM?"></a>什么是Yarn和NPM?</h3><p><strong>Yarn:Yet Another Resource Negotiator，是一个快速、可靠、安全的依赖管理工具，一款新的JavaScript包管理工具。</strong></p>
<p>Yarn工作流：</p>
<p> <img src="/2020/01/31/electron-vue开发入门指南/1087883-20190909202049178-776852540-1580637729972.png" alt="img"></p>
<p>Yarn使用方法：<a href="https://yarn.bootcss.com/docs/usage/" target="_blank" rel="noopener">https://yarn.bootcss.com/docs/usage</a>/</p>
<p>Yarn使用方法-如图：</p>
<p><img src="/2020/01/31/electron-vue开发入门指南/1087883-20190909202053234-421219548-1580637730004.png" alt="img"></p>
<p>Yarn是什么：<a href="https://yarn.bootcss.com" target="_blank" rel="noopener">https://yarn.bootcss.com</a></p>
<p>Npm是什么 :<a href="https://www.npmjs.cn/" target="_blank" rel="noopener">https://www.npmjs.cn/</a></p>
<h3 id="yarn和npm命令对比"><a href="#yarn和npm命令对比" class="headerlink" title="yarn和npm命令对比"></a>yarn和npm命令对比</h3><h4 id="一、命令对比"><a href="#一、命令对比" class="headerlink" title="一、命令对比"></a>一、命令对比</h4><table>
<thead>
<tr>
<th style="text-align:center">yarn</th>
<th style="text-align:center">npm</th>
<th style="text-align:left">命令功能</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong><code>yarn install</code></strong></td>
<td style="text-align:center"><strong><code>npm install</code></strong></td>
<td style="text-align:left"><strong>根据<code>pack.json</code>安装项目所需的依赖包</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong><code>yarn install --flat</code></strong></td>
<td style="text-align:center"><strong><code>--</code></strong></td>
<td style="text-align:left"><strong>注释1</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong><code>yarn install --no-lockfile</code></strong></td>
<td style="text-align:center"><strong><code>npm install --no-package-lock</code></strong></td>
<td style="text-align:left"><strong>不读取或生成<code>yarn.lock</code>锁文件</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong><code>yarn install --pure-lockfile</code></strong></td>
<td style="text-align:center"><strong><code>--</code></strong></td>
<td style="text-align:left"><strong>不要生成<code>yarn.lock</code>锁文件</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong><code>yarn add [package]</code></strong></td>
<td style="text-align:center"><strong><code>npm install [package]</code></strong></td>
<td style="text-align:left"><strong>安装需要的依赖包</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong><code>yarn add [package] --dev</code></strong></td>
<td style="text-align:center"><strong><code>npm install [package] --save-dev</code></strong></td>
<td style="text-align:left"><strong>注释2</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong><code>yarn add [package] --D</code></strong></td>
<td style="text-align:center"><strong><code>npm install [package] --save-dev</code></strong></td>
<td style="text-align:left"><strong>同上</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong><code>yarn add [package] --peer</code></strong></td>
<td style="text-align:center"><strong><code>--</code></strong></td>
<td style="text-align:left"><strong>注释3</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong><code>yarn add [package] --P</code></strong></td>
<td style="text-align:center"><strong><code>--</code></strong></td>
<td style="text-align:left"><strong>同上</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong><code>yarn add [package] --optional</code></strong></td>
<td style="text-align:center"><strong><code>npm install [package] --save-optional</code></strong></td>
<td style="text-align:left"><strong>注释4</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong><code>yarn add [package] --O</code></strong></td>
<td style="text-align:center"><strong><code>npm install [package] --save-optional</code></strong></td>
<td style="text-align:left"><strong>同上</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong><code>yarn add [package] --exact</code></strong></td>
<td style="text-align:center"><strong><code>npm install [package] --save-exact</code></strong></td>
<td style="text-align:left"><strong>注释5</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong><code>yarn add [package] --E</code></strong></td>
<td style="text-align:center"><strong><code>npm install [package] --save-exact</code></strong></td>
<td style="text-align:left"><strong>同上</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong><code>yarn global add [package]</code></strong></td>
<td style="text-align:center"><strong><code>npm install [package] --global</code></strong></td>
<td style="text-align:left"><strong>全局安装依赖包</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong><code>yarn global upgrade</code></strong></td>
<td style="text-align:center"><strong><code>npm update --global</code></strong></td>
<td style="text-align:left"><strong>全局更新依赖包</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong><code>yarn add --force</code></strong></td>
<td style="text-align:center"><strong><code>npm rebuild</code></strong></td>
<td style="text-align:left"><strong>更改包内容后进行重建</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong><code>yarn remove [package]</code></strong></td>
<td style="text-align:center"><strong><code>npm uninstall [package]</code></strong></td>
<td style="text-align:left"><strong>卸载已经安装的依赖包</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong><code>yarn cache clean [package]</code></strong></td>
<td style="text-align:center"><strong><code>npm cache clean</code></strong></td>
<td style="text-align:left"><strong>注释6</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong><code>yarn upgrade</code></strong></td>
<td style="text-align:center"><strong><code>rm -rf node_modules &amp;&amp; npm install</code></strong></td>
<td style="text-align:left"><strong>更新依赖包</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong><code>yarn version --major</code></strong></td>
<td style="text-align:center"><strong><code>npm version major</code></strong></td>
<td style="text-align:left"><strong>更新依赖包的版本</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong><code>yarn version --minor</code></strong></td>
<td style="text-align:center"><strong><code>npm version minor</code></strong></td>
<td style="text-align:left"><strong>更新依赖包的版本</strong></td>
</tr>
<tr>
<td style="text-align:center"><strong><code>yarn version --patch</code></strong></td>
<td style="text-align:center"><strong><code>npm version patch</code></strong></td>
<td style="text-align:left"><strong>更新依赖包的版本</strong></td>
</tr>
</tbody>
</table>
<h4 id="二、命令注释"><a href="#二、命令注释" class="headerlink" title="二、命令注释"></a>二、命令注释</h4><ul>
<li><strong>注释1</strong> ：安装所有依赖项，但每个依赖项只允许一个版本。在第一次运行时，这将提示你为多版本的依赖包选择一个版本，进行安装。这些将添加到您package.json的 resolutions字段下。</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"resolutions": &#123;</span><br><span class="line">  "package-a": "2.0.0",</span><br><span class="line">  "package-b": "5.0.0",</span><br><span class="line">  "package-c": "1.5.2"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>注释2</strong> ：安装所需的依赖包，并将该包的记录写到<code>package.json</code>文件的 <strong>devDependencies</strong> 选项中。</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">"devDependencies": &#123;</span><br><span class="line">    "autoprefixer": "^7.1.2",</span><br><span class="line">    "babel-core": "^6.22.1",</span><br><span class="line">    "babel-helper-vue-jsx-merge-props": "^2.0.3",</span><br><span class="line">    "babel-loader": "^7.1.1",</span><br><span class="line">    "babel-plugin-syntax-jsx": "^6.18.0",</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li><strong>注释3</strong> ：安装所需的依赖包，并将该包的记录写到<code>package.json</code>文件的 <strong>peerDependencies</strong> 选项中。</li>
<li><strong>注释4</strong> ：安装所需的依赖包，并将该包的记录写到<code>package.json</code>文件的 <strong>optionalDependencies</strong> 选项中。</li>
<li><strong>注释5</strong> ：安装依赖包的确切版本，默认设置是使用依赖包的最新版本。例如， <code>yarn add foo@1.2.3</code>将接受版本1.9.1，但 <code>yarn add foo@1.2.3 --exact</code> 只接受版本1.2.3。</li>
<li><strong>注释6</strong> ：运行此命令将清除全局缓存依赖包。当再次yarn或yarn install运行，进行下载依赖包</li>
</ul>
<h2 id="安装Electron"><a href="#安装Electron" class="headerlink" title="安装Electron"></a>安装Electron</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">cnpm install -g electron</span><br></pre></td></tr></table></figure>
<p>验证</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt;electron -v</span><br><span class="line"></span><br><span class="line"> v7.1.10</span><br></pre></td></tr></table></figure>
<h2 id="搭建electron-vue项目"><a href="#搭建electron-vue项目" class="headerlink" title="搭建electron-vue项目"></a>搭建electron-vue项目</h2><p>simulatedgreg/electron-vue用的vue-cli2，<strong><em>不建议再使用</em></strong>，如果vue-cli用的3或者4，建议直接跳到下面的章节</p>
<h3 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h3><ul>
<li><a href="https://simulatedgreg.gitbooks.io/electron-vue/content/cn/" target="_blank" rel="noopener">electron-vue</a>文档</li>
</ul>
<h3 id="使用electron-vue脚手架工具初始化项目"><a href="#使用electron-vue脚手架工具初始化项目" class="headerlink" title="使用electron-vue脚手架工具初始化项目"></a>使用electron-vue脚手架工具初始化项目</h3><p>可能会比较慢，可以通过webpack方式初始化vue项目，然后在引入electron方式，这个会快很多</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ vue init simulatedgreg/electron-vue alistar</span><br><span class="line"></span><br><span class="line">? Application Name alistar</span><br><span class="line">? Application Id org.evue.alistar</span><br><span class="line">? Application Version 0.0.1</span><br><span class="line">? Project description 哞利斯塔, 快乐辅助</span><br><span class="line">? Use Sass / Scss? Yes</span><br><span class="line">? Select <span class="built_in">which</span> Vue plugins to install axios, vue-electron, vue-router, vuex, vuex-electron</span><br><span class="line">? Use linting with ESLint? Yes</span><br><span class="line">? Which ESLint config would you like to use? Standard</span><br><span class="line">? Set up unit testing with Karma + Mocha? Yes</span><br><span class="line">? Set up end-to-end testing with Spectron + Mocha? Yes</span><br><span class="line">? What build tool would you like to use? builder</span><br><span class="line">? author vincentruan &lt;rzw0813@gmail.com&gt;</span><br><span class="line"></span><br><span class="line">   vue-cli · Generated <span class="string">"alistar"</span>.</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">All <span class="built_in">set</span>. Welcome to your new electron-vue project!</span><br><span class="line"></span><br><span class="line">Make sure to check out the documentation <span class="keyword">for</span> this boilerplate at</span><br><span class="line">https://simulatedgreg.gitbooks.io/electron-vue/content/.</span><br><span class="line"></span><br><span class="line">Next Steps:</span><br><span class="line"></span><br><span class="line">  $ <span class="built_in">cd</span> alistar</span><br><span class="line">  $ yarn (or `npm install`)</span><br><span class="line">  $ yarn run dev (or `npm run dev`)</span><br></pre></td></tr></table></figure>
<p>上面已经有提示下一步做什么了，<code>cd alistar</code>目录下，之后对照执行，如果用yarn记得设置代理或者用国内镜像。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cnpm install</span><br><span class="line">| [22/67] Installing get-stdin@^4.0.1platform unsupported babel-loader@7.1.5 › webpack@4.41.5 › watchpack@1.6.0 › chokidar@2.1.8 › fsevents@^1.2.7 Package require os(darwin) not compatible with your platform(win32)</span><br><span class="line">[fsevents@^1.2.7] optional install error: Package require os(darwin) not compatible with your platform(win32)</span><br><span class="line">√ Installed 67 packages</span><br><span class="line">√ Linked 1218 latest versions</span><br><span class="line">[1/7] scripts.postinstall babel-core@6.26.3 › babel-register@6.26.0 › core-js@^2.5.0 run <span class="string">"node -e \"try&#123;require('./postinstall')&#125;catch(e)&#123;&#125;\""</span>, root: <span class="string">"D:\\gitspace\\alistar\\node_modules\\_core-js@2.6.11@core-js"</span></span><br><span class="line">Thank you <span class="keyword">for</span> using core-js ( https://github.com/zloirock/core-js ) <span class="keyword">for</span> polyfilling JavaScript standard library!</span><br><span class="line"></span><br><span class="line">The project needs your <span class="built_in">help</span>! Please consider supporting of core-js on Open Collective or Patreon:</span><br><span class="line">&gt; https://opencollective.com/core-js</span><br><span class="line">&gt; https://www.patreon.com/zloirock</span><br><span class="line"></span><br><span class="line">Also, the author of core-js ( https://github.com/zloirock ) is looking <span class="keyword">for</span> a good job -)</span><br><span class="line"></span><br><span class="line">[1/7] scripts.postinstall babel-core@6.26.3 › babel-register@6.26.0 › core-js@^2.5.0 finished <span class="keyword">in</span> 2s</span><br><span class="line">[2/7] scripts.postinstall electron-builder@20.44.4 › app-builder-lib@20.44.4 › ejs@^2.6.2 run <span class="string">"node ./postinstall.js"</span>, root: <span class="string">"D:\\gitspace\\alistar\\node_modules\\_ejs@2.7.4@ejs"</span></span><br><span class="line">Thank you <span class="keyword">for</span> installing EJS: built with the Jake JavaScript build tool (https://jakejs.com/)</span><br><span class="line"></span><br><span class="line">[2/7] scripts.postinstall electron-builder@20.44.4 › app-builder-lib@20.44.4 › ejs@^2.6.2 finished <span class="keyword">in</span> 2s</span><br><span class="line">[3/7] scripts.postinstall electron@^2.0.4 run <span class="string">"node install.js"</span>, root: <span class="string">"D:\\gitspace\\alistar\\node_modules\\_electron@2.0.18@electron"</span></span><br><span class="line">Downloading SHASUMS256.txt</span><br><span class="line">[============================================&gt;] 100.0% of 5.39 kB (5.39 kB/s)</span><br><span class="line">[3/7] scripts.postinstall electron@^2.0.4 finished <span class="keyword">in</span> 17s</span><br><span class="line">[4/7] scripts.install spectron@3.8.0 › electron-chromedriver@~1.8.0 run <span class="string">"node ./download-chromedriver.js"</span>, root: <span class="string">"D:\\gitspace\\alistar\\node_modules\\_electron-chromedriver@1.8.0@electron-chromedriver"</span></span><br><span class="line">Downloading tmp-2644-1-SHASUMS256.txt-1.8.0</span><br><span class="line">[============================================&gt;] 100.0% of 8.02 kB (8.02 kB/s)</span><br><span class="line">successfully dowloaded and extracted!</span><br><span class="line">[4/7] scripts.install spectron@3.8.0 › electron-chromedriver@~1.8.0 finished <span class="keyword">in</span> 5s</span><br><span class="line">[5/7] scripts.install karma@2.0.5 › socket.io@2.0.4 › engine.io@3.1.5 › uws@~9.14.0 run <span class="string">"node-gyp rebuild &gt; build_log.txt 2&gt;&amp;1 || exit 0"</span>, root: <span class="string">"D:\\gitspace\\alistar\\node_modules\\_uws@9.14.0@uws"</span></span><br><span class="line">[5/7] scripts.install karma@2.0.5 › socket.io@2.0.4 › engine.io@3.1.5 › uws@~9.14.0 finished <span class="keyword">in</span> 3s</span><br><span class="line">[6/7] scripts.install node-sass@^4.9.2 run <span class="string">"node scripts/install.js"</span>, root: <span class="string">"D:\\gitspace\\alistar\\node_modules\\_node-sass@4.13.1@node-sass"</span></span><br><span class="line">Downloading binary from https://cdn.npm.taobao.org/dist/node-sass/v4.13.1/win32-x64-72_binding.node</span><br><span class="line">Download complete</span><br><span class="line">Binary saved to D:\gitspace\alistar\node_modules\_node-sass@4.13.1@node-sass\vendor\win32-x64-72\binding.node</span><br><span class="line">Caching binary to C:\Users\vincentruan\.npminstall_tarball\node-sass\4.13.1\win32-x64-72_binding.node</span><br><span class="line">[6/7] scripts.install node-sass@^4.9.2 finished <span class="keyword">in</span> 4s</span><br><span class="line">[6/7] scripts.postinstall node-sass@^4.9.2 run <span class="string">"node scripts/build.js"</span>, root: <span class="string">"D:\\gitspace\\alistar\\node_modules\\_node-sass@4.13.1@node-sass"</span></span><br><span class="line">Binary found at D:\gitspace\alistar\node_modules\_node-sass@4.13.1@node-sass\vendor\win32-x64-72\binding.node</span><br><span class="line">Testing binary</span><br><span class="line">Binary is fine</span><br><span class="line">[6/7] scripts.postinstall node-sass@^4.9.2 finished <span class="keyword">in</span> 2s</span><br><span class="line">[7/7] scripts.postinstall alistar@0.0.1 run <span class="string">"npm run lint:fix"</span>, root: <span class="string">"D:\\gitspace\\alistar"</span></span><br><span class="line"></span><br><span class="line">&gt; alistar@0.0.1 lint:fix D:\gitspace\alistar</span><br><span class="line">&gt; eslint --ext .js,.vue -f ./node_modules/eslint-friendly-formatter --fix src <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">[7/7] scripts.postinstall alistar@0.0.1 finished <span class="keyword">in</span> 11s</span><br><span class="line">√ Run 7 scripts</span><br><span class="line">peerDependencies link ajv@5.5.2 <span class="keyword">in</span> D:\gitspace\alistar\node_modules\_ajv-keywords@2.1.1@ajv-keywords unmet with D:\gitspace\alistar\node_modules\ajv(6.11.0)</span><br><span class="line">peerDependencies WARNING karma-webpack@^3.0.0 requires a peer of webpack@^2.0.0 || ^3.0.0 but webpack@4.41.5 was installed</span><br><span class="line">deprecate css-loader@0.28.11 › cssnano@3.10.0 › autoprefixer@6.7.7 › browserslist@^1.7.6 Browserslist 2 could fail on reading Browserslist &gt;3.0 config used <span class="keyword">in</span> other tools.</span><br><span class="line">deprecate babel-core@6.26.3 › babel-register@6.26.0 › core-js@^2.5.0 core-js@&lt;3 is no longer maintained and not recommended <span class="keyword">for</span> usage due to the number of issues. Please, upgrade your dependencies to the actual version of core-js@3.</span><br><span class="line">deprecate eslint@4.19.1 › file-entry-cache@2.0.0 › flat-cache@1.3.4 › circular-json@^0.3.1 CircularJSON is <span class="keyword">in</span> maintenance only, flatted is its successor.</span><br><span class="line">deprecate karma-coverage@1.1.2 › istanbul@^0.4.0 This module is no longer maintained, try this instead:</span><br><span class="line">  npm i nyc</span><br><span class="line">Visit https://istanbul.js.org/integrations <span class="keyword">for</span> other alternatives.</span><br><span class="line">deprecate karma@2.0.5 › log4js@2.11.0 › circular-json@^0.5.4 CircularJSON is <span class="keyword">in</span> maintenance only, flatted is its successor.</span><br><span class="line">deprecate karma@2.0.5 › log4js@2.11.0 › nodemailer@^2.5.0 All versions below 4.0.1 of Nodemailer are deprecated. See https://nodemailer.com/status/</span><br><span class="line">deprecate karma@2.0.5 › log4js@2.11.0 › nodemailer@2.7.2 › socks@1.1.9 If using 2.x branch, please upgrade to at least 2.1.6 to avoid a serious bug with socket data flow and an import issue introduced <span class="keyword">in</span> 2.1.0</span><br><span class="line">deprecate karma@2.0.5 › log4js@2.11.0 › nodemailer@2.7.2 › mailcomposer@4.0.1 This project is unmaintained</span><br><span class="line">deprecate karma@2.0.5 › log4js@2.11.0 › loggly@1.1.1 › request@2.75.0 › node-uuid@~1.4.7 Use uuid module instead</span><br><span class="line">deprecate karma@2.0.5 › log4js@2.11.0 › loggly@1.1.1 › request@2.75.0 › hawk@~3.1.3 This module moved to @hapi/hawk. Please make sure to switch over as this distribution is no longer supported and may contain bugs and critical security issues.</span><br><span class="line">deprecate karma@2.0.5 › log4js@2.11.0 › nodemailer@2.7.2 › mailcomposer@4.0.1 › buildmail@4.0.1 This project is unmaintained</span><br><span class="line">deprecate karma@2.0.5 › log4js@2.11.0 › loggly@1.1.1 › request@2.75.0 › hawk@3.1.3 › cryptiles@2.x.x This version has been deprecated <span class="keyword">in</span> accordance with the hapi support policy (hapi.im/support). Please upgrade to the latest version to get the best features, bug fixes, and security patches. If you are unable to upgrade at this time, paid support is available <span class="keyword">for</span> older versions (hapi.im/commercial).</span><br><span class="line">deprecate karma@2.0.5 › log4js@2.11.0 › loggly@1.1.1 › request@2.75.0 › hawk@3.1.3 › sntp@1.x.x This module moved to @hapi/sntp. Please make sure to switch over as this distribution is no longer supported and may contain bugs and critical security issues.</span><br><span class="line">deprecate karma@2.0.5 › log4js@2.11.0 › loggly@1.1.1 › request@2.75.0 › hawk@3.1.3 › hoek@2.x.x This version has been deprecated <span class="keyword">in</span> accordance with the hapi support policy (hapi.im/support). Please upgrade to the latest version to get the best features, bug fixes, and security patches. If you are unable to upgrade at this time, paid support is available <span class="keyword">for</span> older versions (hapi.im/commercial).</span><br><span class="line">deprecate karma@2.0.5 › log4js@2.11.0 › loggly@1.1.1 › request@2.75.0 › hawk@3.1.3 › boom@2.x.x This version has been deprecated <span class="keyword">in</span> accordance with the hapi support policy (hapi.im/support). Please upgrade to the latest version to get the best features, bug fixes, and security patches. If you are unable to upgrade at this time, paid support is available <span class="keyword">for</span> older versions (hapi.im/commercial).</span><br><span class="line">deprecate spectron@3.8.0 › webdriverio@^4.8.0 outdated version, please use @next</span><br><span class="line">deprecate karma@2.0.5 › socket.io@2.0.4 › engine.io@3.1.5 › uws@~9.14.0 New code is available at github.com/uNetworking/uWebSockets.js</span><br><span class="line">Recently updated (since 2020-01-23): 10 packages (detail see file D:\gitspace\alistar\node_modules\.recently_updates.txt)</span><br><span class="line">  Today:</span><br><span class="line">    → babel-preset-env@1.7.0 › browserslist@3.2.8 › electron-to-chromium@^1.3.47(1.3.342) (09:02:31)</span><br><span class="line">    → webpack-dev-server@3.10.1 › del@4.1.1 › @types/glob@7.1.1 › @types/node@*(13.5.2) (05:51:42)</span><br><span class="line">√ All packages installed (1560 packages installed from npm registry, used 1m(network 27s), speed 2.23MB/s, json 1285(3.12MB), tarball 58.05MB)</span><br></pre></td></tr></table></figure>
<p>编译完成后<code>run dev</code>，</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cnpm run dev</span><br></pre></td></tr></table></figure>
<p><img src="/2020/01/31/electron-vue开发入门指南/image-20200130174511175.png" alt="image-20200130174511175"></p>
<h3 id="问题收集与处理"><a href="#问题收集与处理" class="headerlink" title="问题收集与处理"></a>问题收集与处理</h3><p><strong>修复问题前先将项目初始化提交github</strong></p>
<h4 id="问题一：ERROR-in-Template-execution-failed-ReferenceError-process-is-not-defined"><a href="#问题一：ERROR-in-Template-execution-failed-ReferenceError-process-is-not-defined" class="headerlink" title="问题一：ERROR in Template execution failed: ReferenceError: process is not defined"></a>问题一：ERROR in Template execution failed: ReferenceError: process is not defined</h4><p>高版本的node，大于12的版本时候。使用electron-vue项目时候会报错！Webpack ReferenceError: process is not defined!</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ReferenceError: process is not defined</span><br><span class="line">  </span><br><span class="line">  - index.ejs:11 <span class="built_in">eval</span></span><br><span class="line">    [.]/[_html-webpack-plugin@3.2.0@html-webpack-plugin]/lib/loader.js!./src/index.ejs:11:2</span><br><span class="line">  </span><br><span class="line">  - index.ejs:16 module.exports</span><br><span class="line">    [.]/[_html-webpack-plugin@3.2.0@html-webpack-plugin]/lib/loader.js!./src/index.ejs:16:3</span><br><span class="line">  </span><br><span class="line">  - index.js:284 </span><br><span class="line">    [alistar]/[_html-webpack-plugin@3.2.0@html-webpack-plugin]/index.js:284:18</span><br><span class="line">  </span><br><span class="line">  - runMicrotasks</span><br><span class="line">  </span><br><span class="line">  - task_queues.js:93 processTicksAndRejections</span><br><span class="line">    internal/process/task_queues.js:93:5</span><br></pre></td></tr></table></figure>
<p>修改 .electron-vue/webpack.renderer.config.js 和  .electron-vue/webpack.web.config.js如下</p>
<p>webpack.renderer.config.js：L125</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">  filename: <span class="string">'index.html'</span>,</span><br><span class="line">  template: path.resolve(__dirname, <span class="string">'../src/index.ejs'</span>),</span><br><span class="line">  minify: &#123;</span><br><span class="line">    collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">    removeAttributeQuotes: <span class="literal">true</span>,</span><br><span class="line">    removeComments: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  templateParameters(compilation, assets, options) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      compilation: compilation,</span><br><span class="line">      webpack: compilation.getStats().toJson(),</span><br><span class="line">      webpackConfig: compilation.options,</span><br><span class="line">      htmlWebpackPlugin: &#123;</span><br><span class="line">        files: assets,</span><br><span class="line">        options: options</span><br><span class="line">      &#125;,</span><br><span class="line">      process,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  nodeModules: process.env.NODE_ENV !== <span class="string">'production'</span></span><br><span class="line">    ? path.resolve(__dirname, <span class="string">'../node_modules'</span>)</span><br><span class="line">    : <span class="literal">false</span></span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure>
<p>webpack.web.config.js: L97</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">  filename: <span class="string">'index.html'</span>,</span><br><span class="line">  template: path.resolve(__dirname, <span class="string">'../src/index.ejs'</span>),</span><br><span class="line">  templateParameters(compilation, assets, options) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      compilation: compilation,</span><br><span class="line">      webpack: compilation.getStats().toJson(),</span><br><span class="line">      webpackConfig: compilation.options,</span><br><span class="line">      htmlWebpackPlugin: &#123;</span><br><span class="line">        files: assets,</span><br><span class="line">        options: options</span><br><span class="line">      &#125;,</span><br><span class="line">      process,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  minify: &#123;</span><br><span class="line">    collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">    removeAttributeQuotes: <span class="literal">true</span>,</span><br><span class="line">    removeComments: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  nodeModules: <span class="literal">false</span></span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure>
<p>重新执行<code>run dev</code></p>
<h4 id="问题二：-Unable-to-install-vue-devtools"><a href="#问题二：-Unable-to-install-vue-devtools" class="headerlink" title="问题二： Unable to install vue-devtools"></a>问题二： Unable to install <code>vue-devtools</code></h4><p>electron-devtools-installer无法安装远程的vue-devtool，采用手动安装方式。</p>
<p>从本地浏览器已安装的插件中拷贝到项目路径，在项目目录下创建文件夹<code>devTools\vue-devtools</code>，拷贝</p>
<p>C:\Users\${userName}\AppData\Local\Google\Chrome\User Data\Default\Extensions\nhdogjmejiglipccpnnnanhbledajbpd\5.1.1_0文件夹内容<code>devTools\vue-devtools</code>下，</p>
<p>修改src/main/index.dev.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * This file is used specifically and only for development. It installs</span></span><br><span class="line"><span class="comment"> * `electron-debug` &amp; `vue-devtools`. There shouldn't be any need to</span></span><br><span class="line"><span class="comment"> *  modify this file, but it can be used to extend your development</span></span><br><span class="line"><span class="comment"> *  environment.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Install `electron-debug` with `devtron`</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'electron-debug'</span>)(&#123; <span class="attr">showDevTools</span>: <span class="literal">true</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 新增变量定义</span></span><br><span class="line"><span class="keyword">import</span> &#123; BrowserWindow &#125; <span class="keyword">from</span> <span class="string">'electron'</span>;</span><br><span class="line"><span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">'path'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Install `vue-devtools`</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'electron'</span>).app.on(<span class="string">'ready'</span>, () =&gt; &#123;</span><br><span class="line">  <span class="comment">// 注释掉的这部分是 Electron-Vue 中预装devtool的代码，没有用</span></span><br><span class="line">  <span class="comment">// let installExtension = require('electron-devtools-installer')</span></span><br><span class="line">  <span class="comment">// installExtension.default(installExtension.VUEJS_DEVTOOLS)</span></span><br><span class="line">  <span class="comment">//   .then(() =&gt; &#123;&#125;)</span></span><br><span class="line">  <span class="comment">//   .catch(err =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//     console.log('Unable to install `vue-devtools`: \n', err)</span></span><br><span class="line">  <span class="comment">//   &#125;)</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 安装vue-devtools</span></span><br><span class="line">  BrowserWindow.addDevToolsExtension(path.resolve(__dirname, <span class="string">'../../devTools/vue-devtools'</span>));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Require `main` process to boot app</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">'./index'</span>)</span><br></pre></td></tr></table></figure>
<p>应用自动重启，注意首次启动vue插件被&gt;&gt;这个隐藏了，需要手动拖动一下</p>
<p><img src="/2020/01/31/electron-vue开发入门指南/image-20200130183344218.png" alt="image-20200130183344218"></p>
<h4 id="问题三：ERROR-in-Error-node-modules-html-webpack-plugin-node-modules-clean-css-index-js-1-SyntaxError-Invalid-or-unexpected-token"><a href="#问题三：ERROR-in-Error-node-modules-html-webpack-plugin-node-modules-clean-css-index-js-1-SyntaxError-Invalid-or-unexpected-token" class="headerlink" title="问题三：ERROR in  Error: .\node_modules\html-webpack-plugin\node_modules\clean-css\index.js:1 SyntaxError: Invalid or unexpected token"></a>问题三：ERROR in  Error: .\node_modules\html-webpack-plugin\node_modules\clean-css\index.js:1 SyntaxError: Invalid or unexpected token</h4><p>找到这个文件发现下载的是一串ASII乱码，尝试删除重新安装，发现用yarn install下载的这个文件总有问题，改为cnpm下载就行了</p>
<h4 id="问题四：-ERROR-in-TypeError-compilation-templatesPlugin-is-not-a-function"><a href="#问题四：-ERROR-in-TypeError-compilation-templatesPlugin-is-not-a-function" class="headerlink" title="问题四： ERROR in   TypeError: compilation.templatesPlugin is not a function"></a>问题四： ERROR in   TypeError: compilation.templatesPlugin is not a function</h4><p>webpack不是最新版</p>
<p>解决方法：</p>
<p>1.删除node_modules，重新安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>
<p>2.安装最新webpack</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm add webpack@latest</span><br></pre></td></tr></table></figure>
<h1 id="知识库"><a href="#知识库" class="headerlink" title="知识库"></a>知识库</h1><h2 id="vue项目转换为electron-vue"><a href="#vue项目转换为electron-vue" class="headerlink" title="vue项目转换为electron-vue"></a>vue项目转换为electron-vue</h2><ol>
<li>把原有项目package.json的dependencies，devDependencies中不同的配置项，添加到 my-project 的package.json中</li>
<li>把vue项目src的内容全部拷贝到 my-project/src/renderer 中</li>
<li>安装依赖 npm install</li>
<li>运行 npm run dev 就可以看到跑起来的客户端</li>
<li>打包 npm run build 项目的安装文件放进build里面，执行.exe文件就可以安装了（build文件有点大）</li>
</ol>
<h2 id="electron-vue使用electron-builder指定打包32位"><a href="#electron-vue使用electron-builder指定打包32位" class="headerlink" title="electron-vue使用electron-builder指定打包32位"></a>electron-vue使用electron-builder指定打包32位</h2><p>//package.json</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">"win"</span>: &#123;</span><br><span class="line">  <span class="string">"icon"</span>: <span class="string">"build/icons/icon.ico"</span>,</span><br><span class="line">  <span class="string">"target"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"target"</span>: <span class="string">"nsis"</span>,</span><br><span class="line">      <span class="string">"arch"</span>: [</span><br><span class="line">        <span class="string">"ia32"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<h2 id="electron-vue开发环境跨域代理设置"><a href="#electron-vue开发环境跨域代理设置" class="headerlink" title="electron-vue开发环境跨域代理设置"></a>electron-vue开发环境跨域代理设置</h2><p>//.electron-vue/dev-runner.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startRenderer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">...</span><br><span class="line">        proxy: &#123;</span><br><span class="line">          <span class="string">'/api'</span>: &#123;</span><br><span class="line">            target: <span class="string">'http://192.168.74.222:6019'</span>,</span><br><span class="line">            <span class="comment">// secure: false,  // 如果是https接口，需要配置这个参数</span></span><br><span class="line">            changeOrigin: <span class="literal">true</span>, <span class="comment">// 如果接口跨域，需要进行这个参数配置</span></span><br><span class="line">            pathRewrite: &#123;</span><br><span class="line">              <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="通过BrowserWindow新窗口打开项目内页面"><a href="#通过BrowserWindow新窗口打开项目内页面" class="headerlink" title="通过BrowserWindow新窗口打开项目内页面"></a>通过<a href="https://electronjs.org/docs/api/browser-window#browserwindow" target="_blank" rel="noopener">BrowserWindow</a>新窗口打开项目内页面</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> BrowserWindow = <span class="built_in">require</span>(<span class="string">'electron'</span>).remote.BrowserWindow</span><br><span class="line"><span class="keyword">const</span> winURL = process.env.NODE_ENV === <span class="string">'development'</span></span><br><span class="line">  ? <span class="string">`http://localhost:9080/#/new`</span></span><br><span class="line">  : <span class="string">`file://<span class="subst">$&#123;__dirname&#125;</span>/index.html#new`</span></span><br><span class="line"><span class="keyword">let</span> newWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">  height: <span class="number">600</span>,</span><br><span class="line">  width: <span class="number">800</span></span><br><span class="line">&#125;)</span><br><span class="line">newWindow.loadURL(winURL)</span><br><span class="line">newWindow.on(<span class="string">'closed'</span>, () =&gt; &#123;</span><br><span class="line">  newWindow = <span class="literal">null</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h1 id="放弃SimulatedGREG-electron-vue"><a href="#放弃SimulatedGREG-electron-vue" class="headerlink" title="放弃SimulatedGREG/electron-vue"></a>放弃SimulatedGREG/electron-vue</h1><p>SimulatedGREG/electron-vue已经很久没有更新了，而且其生成的工程结构并不是vue-cli3，在尝试升级vue-cli3过程中，发现简直是无底洞，直接放弃治疗，重头升级！！！</p>
<h1 id="electron-vue3-4从0单排"><a href="#electron-vue3-4从0单排" class="headerlink" title="electron-vue3/4从0单排"></a>electron-vue3/4从0单排</h1><h2 id="安装-升级vue-cli3-4"><a href="#安装-升级vue-cli3-4" class="headerlink" title="安装/升级vue-cli3/4"></a>安装/升级vue-cli3/4</h2><p>先执行以下命令，确认下本地安装的vue-cli版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue -V</span><br></pre></td></tr></table></figure>
<p>如果本地使用的是vue-cli2.x或者更早版本，可先卸载：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cnpm uninstall vue-cli -g</span><br></pre></td></tr></table></figure>
<blockquote>
<p>※注：vue-cli3和vue-cli4使用了新的npm包名，与旧版本不一样。</p>
</blockquote>
<p>如果还没有安装vue-cli3/4，先执行以下命令安装：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">cnpm</span> <span class="selector-tag">install</span> @<span class="keyword">vue</span>/<span class="keyword">cli</span> -g</span><br></pre></td></tr></table></figure>
<p>如果你已安装vue-cli3/4，但不是最新版本，可执行以下命令升级：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">cnpm</span> <span class="selector-tag">update</span> @<span class="keyword">vue</span>/<span class="keyword">cli</span> -g</span><br></pre></td></tr></table></figure>
<p>直接安装vue-cli4</p>
<h2 id="创建vue项目"><a href="#创建vue项目" class="headerlink" title="创建vue项目"></a>创建vue项目</h2><p>找个喜欢的目录，执行以下命令，创建vue项目：</p>
<p>（这里把项目名称定为alistar）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vue create alistar</span><br></pre></td></tr></table></figure>
<p>会出现以下选项（如果熟悉此步骤可跳过本节内容）：<strong>这里建议直接选择default一步搞定，后续有需要插件自己在package.json选配，刚创建项目没必要折腾</strong></p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">Vue CLI v3<span class="number">.8</span><span class="number">.4</span></span><br><span class="line">? Please pick a preset: (Use arrow keys)</span><br><span class="line">  <span class="keyword">default</span> (babel, eslint) </span><br><span class="line">&gt; Manually <span class="keyword">select</span> features</span><br></pre></td></tr></table></figure>
<p>选择“Manually select features” (自定义安装)。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">? Check the features needed for your project: (Press <span class="tag">&lt;<span class="name">space</span>&gt;</span> to select, <span class="tag">&lt;<span class="name">a</span>&gt;</span> to t</span><br><span class="line">oggle all, <span class="tag">&lt;<span class="name">i</span>&gt;</span> to invert selection)</span><br><span class="line">❯◉ Babel</span><br><span class="line"> ◯ TypeScript</span><br><span class="line"> ◯ Progressive Web App (PWA) Support</span><br><span class="line"> ◉ Router</span><br><span class="line"> ◉ Vuex</span><br><span class="line"> ◉ CSS Pre-processors</span><br><span class="line"> ◉ Linter / Formatter</span><br><span class="line"> ◯ Unit Testing</span><br><span class="line"> ◯ E2E Testing</span><br></pre></td></tr></table></figure>
<p>这里选择了常用的模块，请根据实际需求进行选择。</p>
<hr>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">? Use <span class="built_in">history</span> mode <span class="keyword">for</span> router? (Requires proper server setup <span class="keyword">for</span> index fallback </span><br><span class="line"><span class="keyword">in</span> production) (Y/n)  n</span><br></pre></td></tr></table></figure>
<p>如果选择了router，这里会询问是否使用history模式。</p>
<p>vue-router 默认使用hash模式（即通过url#hash来跳转页面），使用URL的hash来模拟一个完整的 URL，当URL改变时，页面不会重新加载。<br> 如果使用history，URL就像正常的url，比较好看。但是还需要后台配置支持。</p>
<p>这里我们选择“n”。</p>
<hr>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">? Pick a CSS pre-processor (PostCSS, Autoprefixer and CSS Modules are supported </span><br><span class="line">by <span class="keyword">default</span>): (Use arrow keys)</span><br><span class="line">  Sass/SCSS (<span class="keyword">with</span> dart-sass) </span><br><span class="line">  Sass/SCSS (<span class="keyword">with</span> node-sass) </span><br><span class="line">  Less </span><br><span class="line">❯ Stylus</span><br></pre></td></tr></table></figure>
<p>选择CSS预处理模块，这里我们使用“Stylus”。</p>
<hr>
<figure class="highlight dart"><table><tr><td class="code"><pre><span class="line">? Pick a linter / formatter config: (Use arrow keys)</span><br><span class="line">  ESLint <span class="keyword">with</span> error prevention only </span><br><span class="line">  ESLint + Airbnb config </span><br><span class="line">❯ ESLint + Standard config </span><br><span class="line">  ESLint + Prettier</span><br></pre></td></tr></table></figure>
<p>选择ESLint代码格式检查工具的配置，选择“ESLint + Standard config”，标准配置。</p>
<hr>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">? Pick additional lint features: (Press &lt;space&gt; to <span class="keyword">select</span>, &lt;a&gt; to toggle all, &lt;i</span><br><span class="line">&gt; to invert selection)</span><br><span class="line">❯◉ Lint <span class="keyword">on</span> save</span><br><span class="line"> ◯ Lint and fix <span class="keyword">on</span> commit</span><br></pre></td></tr></table></figure>
<p>Line on save表示在保存代码的时候，进行格式检查。</p>
<p>Lint and fix on commit表示在git commit的时候自动纠正格式。</p>
<p>这里只选择“Lint on save”。</p>
<hr>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">? Where <span class="keyword">do</span> you prefer placing config <span class="keyword">for</span> Babel, PostCSS, ESLint, etc.? </span><br><span class="line">  In dedicated config files </span><br><span class="line">❯ In <span class="keyword">package</span>.json</span><br></pre></td></tr></table></figure>
<p>这里问把 babel, postcss, eslint 这些配置文件放哪？</p>
<p>In dedicated config files 表示独立文件</p>
<p>In package.json 表示放在package.json里</p>
<p>这里选择“In package.json”。</p>
<hr>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">? Save <span class="keyword">this</span> <span class="keyword">as</span> a preset <span class="keyword">for</span> future projects? (y/N) N</span><br></pre></td></tr></table></figure>
<p>是否为以后的项目保留这些设置？选择“N”。</p>
<p>然后耐心等待项目安装完成。</p>
<h2 id="自动安装electron"><a href="#自动安装electron" class="headerlink" title="自动安装electron"></a>自动安装electron</h2><p>使用<a href="https://github.com/nklayman/vue-cli-plugin-electron-builder" target="_blank" rel="noopener">electron-builder</a>安装</p>
<p>进入到项目根目录，执行：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">vue <span class="keyword">add</span> electron-builder</span><br></pre></td></tr></table></figure>
<p>在安装过程中，很可能会卡在这一步不动了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">node ./download-chromedriver.js</span><br></pre></td></tr></table></figure>
<p>没关系，我们先强制结束掉。再执行一次vue add electron-builder，然后就可以顺利通过了。</p>
<p>接下来出现配置选项：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">? <span class="selector-tag">Choose</span> <span class="selector-tag">Electron</span> <span class="selector-tag">Version</span></span><br><span class="line">  ^4<span class="selector-class">.0</span><span class="selector-class">.0</span></span><br><span class="line">&gt; ^5<span class="selector-class">.0</span><span class="selector-class">.0</span></span><br><span class="line">  ^6<span class="selector-class">.0</span><span class="selector-class">.0</span></span><br></pre></td></tr></table></figure>
<p>选择Electron版本为<code>5.0.0</code></p>
<blockquote>
<p>Electron<code>5.0</code>和<code>6.0</code>的语法变化不大 选用<code>5.0</code>是因为<code>node-ffi</code>第三方修改版也只能支持到<code>5.0</code></p>
</blockquote>
<p>然后耐心等待安装完成。出现报错，跟上面安装的一样VueDevtools不翻墙安装不了，不理他，直接用本地方案开搞</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">-  Running completion hooks...error: Unexpected console statement (no-console) at src\background.js:64:3:</span><br><span class="line">  62 |   await installVueDevtools()</span><br><span class="line">  63 | &#125; catch (e) &#123;</span><br><span class="line">&gt; 64 |   console.error(<span class="string">'Vue Devtools failed to install:'</span>, e.toString())</span><br><span class="line">     |   ^</span><br><span class="line">  65 | &#125;</span><br><span class="line">  66 |</span><br><span class="line">  67 |   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">1 error found.</span><br></pre></td></tr></table></figure>
<p>安装完成后会自动在src目录下生成background.js并修改了package.json。</p>
<h2 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h2><p>在项目根目录执行，安装全部依赖包：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn</span><br></pre></td></tr></table></figure>
<p>如果安装过程中报错：Error: post install error, please remove node_modules before retry!可以忽略，不影响后续使用。</p>
<h2 id="编译并启动APP"><a href="#编译并启动APP" class="headerlink" title="编译并启动APP"></a>编译并启动APP</h2><p>执行以下命令，开始编译APP，并启动开发环境APP：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">yarn</span> <span class="selector-tag">electron</span><span class="selector-pseudo">:serve</span></span><br></pre></td></tr></table></figure>
<p>首次启动可能会等待很久，出现以下信息：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">INFO  Launching Electron...</span><br><span class="line">Failed to fetch extension, trying 4 more <span class="built_in">times</span></span><br><span class="line">Failed to fetch extension, trying 3 more <span class="built_in">times</span></span><br><span class="line">Failed to fetch extension, trying 2 more <span class="built_in">times</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>这是因为在请求安装vuejs devtools插件。需要科学上网才能安装成功。如果不能科学上网也没关系，耐心等待5次请求失败后会自动跳过(可以本地安装）。编译成功后，就会出现开发环境的APP了。</p>
<h2 id="配置ESLint代码格式检查工具"><a href="#配置ESLint代码格式检查工具" class="headerlink" title="配置ESLint代码格式检查工具"></a>配置ESLint代码格式检查工具</h2><p>ESlint可以高效的检查代码格式，让参与项目的所有工程师都能保持统一的代码风格。其检测精度甚至可以精确到是否多一个空格或者少一个空格。代码格式的统一对提高团队的协同开发效率有很大的帮助，特别是对有代码洁癖的工程师。</p>
<p>在项目根目录下创建.eslintrc.js （注意文件名前面有个“.”）</p>
<p>请粘贴以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">module</span>.<span class="keyword">exports</span> = &#123;</span><br><span class="line">  root: <span class="keyword">true</span>,</span><br><span class="line">  env: &#123;</span><br><span class="line">    node: <span class="keyword">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">'extends'</span>: [</span><br><span class="line">    <span class="string">'plugin:vue/essential'</span>,</span><br><span class="line">    <span class="string">'@vue/standard'</span></span><br><span class="line">  ],</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="string">'no-debugger'</span>: process.env.NODE_ENV === <span class="string">'production'</span> ? <span class="string">'error'</span> : <span class="string">'off'</span>,</span><br><span class="line">    <span class="comment">// 不检测语句末尾的分号</span></span><br><span class="line">    <span class="string">'semi'</span>: [<span class="string">'off'</span>, <span class="string">'always'</span>],</span><br><span class="line">    <span class="comment">// 强制缩进为2个空格</span></span><br><span class="line">    <span class="string">'indent'</span>: [<span class="string">'error'</span>, <span class="number">2</span>],</span><br><span class="line">    <span class="comment">// 关闭函数名称跟括号之间的空格检测</span></span><br><span class="line">    <span class="string">'space-before-function-paren'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="comment">// 忽略大括号内的空格</span></span><br><span class="line">    <span class="string">'object-curly-spacing'</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    parser: <span class="string">'babel-eslint'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里说明下关于indent缩进的配置，要配合项目根目录下的.editorconfig</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">[<span class="meta">*.&#123;js,jsx,ts,tsx,vue&#125;</span>]</span><br><span class="line">indent_style = space   &lt;--这里定义缩进类型是空格还是tab</span><br><span class="line">indent_size = <span class="number">2</span>        &lt;--这里需要与.eslintrc.js的indent对应</span><br><span class="line">trim_trailing_whitespace = <span class="literal">true</span></span><br><span class="line">insert_final_newline = <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>.editorconfig 用于IDE自动格式化代码<br> .eslintrc.js 用于ESlint检测</p>
</blockquote>
<p>以上是常用的配置。如果你有更多的配置需求，可参阅： <a href="https://cloud.tencent.com/developer/doc/1078" target="_blank" rel="noopener">https://cloud.tencent.com/developer/doc/1078</a></p>
<h2 id="配置vue"><a href="#配置vue" class="headerlink" title="配置vue"></a>配置vue</h2><p>在项目根目录下创建vue.config.js，粘贴以下代码：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = require(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="function">function <span class="title">resolve</span> (<span class="params">dir</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> path.<span class="keyword">join</span>(__dirname, dir);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  publicPath: <span class="string">'./'</span>,</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    <span class="comment">// can be overwritten by process.env.HOST</span></span><br><span class="line">    host: <span class="string">'0.0.0.0'</span>,  </span><br><span class="line">    port: <span class="number">8080</span></span><br><span class="line">  &#125;,</span><br><span class="line">  chainWebpack: config =&gt; &#123;</span><br><span class="line">    config.resolve.<span class="keyword">alias</span></span><br><span class="line">      .<span class="keyword">set</span>(<span class="string">'@'</span>, resolve(<span class="string">'src'</span>))</span><br><span class="line">      .<span class="keyword">set</span>(<span class="string">'src'</span>, resolve(<span class="string">'src'</span>))</span><br><span class="line">      .<span class="keyword">set</span>(<span class="string">'common'</span>, resolve(<span class="string">'src/common'</span>))</span><br><span class="line">      .<span class="keyword">set</span>(<span class="string">'components'</span>, resolve(<span class="string">'src/components'</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>devServer 用于设置开发环境的服务，这里表示在本地8080端口启动web服务。</p>
<p>chainWebpack 我们给项目目录起了“别名(alias)”，在代码中，我们可以直接用“别名”访问资源，省去了每次输入完整相对路径的麻烦。</p>
<blockquote>
<p>※注：<br> ◉ 在js代码中可直接使用别名，例如：<br> @/common/js/xxx.js 等价于 src/common/js/xxx.js<br> common/js/xxx.js 等价于 src/common/js/xxx.js<br> ◉ 在css或者html中使用别名，需要在别名前加“~”，例如：<br> @import “~common/stylus/font.styl”;</p>
</blockquote>
<h2 id="项目基本设定"><a href="#项目基本设定" class="headerlink" title="项目基本设定"></a>项目基本设定</h2><h3 id="主进程和渲染进程简介"><a href="#主进程和渲染进程简介" class="headerlink" title="主进程和渲染进程简介"></a>主进程和渲染进程简介</h3><p>在开始下面的步骤之前，很有必要简单了解下Electron的应用架构。</p>
<h4 id="主进程"><a href="#主进程" class="headerlink" title="主进程"></a>主进程</h4><p>Electron 运行 package.json 的 main 脚本（background.js）的进程被称为主进程。 在主进程中运行的脚本通过创建web页面来展示用户界面。 一个 Electron 应用总是有且只有一个主进程。</p>
<h4 id="渲染进程"><a href="#渲染进程" class="headerlink" title="渲染进程"></a>渲染进程</h4><p>由于 Electron 使用了 Chromium 来展示 web 页面，所以 Chromium 的多进程架构也被使用到。 每个 Electron 中的 web 页面运行在它自己的渲染进程中。</p>
<p>在普通的浏览器中，web页面通常在一个沙盒环境中运行，不被允许去接触原生的资源。 然而 Electron 的用户在 Node.js 的 API 支持下可以在页面中和操作系统进行一些底层交互。</p>
<h4 id="主进程与渲染进程的关系"><a href="#主进程与渲染进程的关系" class="headerlink" title="主进程与渲染进程的关系"></a>主进程与渲染进程的关系</h4><p>主进程使用 BrowserWindow 实例创建页面。 每个 BrowserWindow 实例都在自己的渲染进程里运行页面。 当一个 BrowserWindow 实例被销毁后，相应的渲染进程也会被终止。</p>
<p>主进程管理所有的web页面和它们对应的渲染进程。 每个渲染进程都是独立的，它只关心它所运行的 web 页面。</p>
<p>具体可参阅官方文档： <a href="https://electronjs.org/docs/tutorial/application-architecture#main-and-renderer-processes" target="_blank" rel="noopener">https://electronjs.org/docs/tutorial/application-architecture#main-and-renderer-processes</a></p>
<h3 id="APP窗口大小"><a href="#APP窗口大小" class="headerlink" title="APP窗口大小"></a>APP窗口大小</h3><p>修改background.js：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createWindow</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Create the browser window.</span></span><br><span class="line">      win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">M       width: <span class="number">1200</span>,</span><br><span class="line">M       height: <span class="number">620</span>,</span><br><span class="line">        webPreferences: &#123;</span><br><span class="line">          nodeIntegration: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="取消跨域限制"><a href="#取消跨域限制" class="headerlink" title="取消跨域限制"></a>取消跨域限制</h3><p>修改background.js：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createWindow</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Create the browser window.</span></span><br><span class="line">      win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">        width: <span class="number">1200</span>,</span><br><span class="line">        height: <span class="number">620</span>,</span><br><span class="line">        webPreferences: &#123;</span><br><span class="line">+         webSecurity: <span class="literal">false</span>,</span><br><span class="line">          nodeIntegration: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="取消菜单栏"><a href="#取消菜单栏" class="headerlink" title="取消菜单栏"></a>取消菜单栏</h3><p>在我们生成的桌面APP中，我们可以看到默认的菜单栏。</p>
<p>在windows中，菜单栏在APP窗口内的顶部；在macOS中，菜单栏位于电脑屏幕顶部。</p>
<p>为了方便项目将来也能直接生成纯web应用，尽量把APP的全部功能都做到渲染进程里，这里我们取消菜单栏。</p>
<p>由于macOS的特殊性，顶部菜单栏无法删除，所以我们针对macOS特殊处理，把菜单栏只保留“关于”和“退出”。</p>
<p>修改background.js：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">M   import &#123; app, protocol, BrowserWindow, Menu &#125; from &apos;electron&apos;</span><br><span class="line">    ...</span><br><span class="line">    function createWindow () &#123;</span><br><span class="line">        ...</span><br><span class="line">        win.on(&apos;closed&apos;, () =&gt; &#123;</span><br><span class="line">            win = null</span><br><span class="line">        &#125;)</span><br><span class="line">        </span><br><span class="line">+       createMenu()</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">+   // 设置菜单栏</span><br><span class="line">+   function createMenu() &#123;</span><br><span class="line">+       // darwin表示macOS，针对macOS的设置</span><br><span class="line">+       if (process.platform === &apos;darwin&apos;) &#123;</span><br><span class="line">+           const template = [</span><br><span class="line">+           &#123;</span><br><span class="line">+               label: &apos;App Demo&apos;,</span><br><span class="line">+               submenu: [</span><br><span class="line">+                   &#123;</span><br><span class="line">+                       role: &apos;about&apos;</span><br><span class="line">+                   &#125;,</span><br><span class="line">+                   &#123;</span><br><span class="line">+                       role: &apos;quit&apos;</span><br><span class="line">+                   &#125;]</span><br><span class="line">+           &#125;]</span><br><span class="line">+           let menu = Menu.buildFromTemplate(template)</span><br><span class="line">+           Menu.setApplicationMenu(menu)</span><br><span class="line">+       &#125; else &#123;</span><br><span class="line">+           // windows及linux系统</span><br><span class="line">+           Menu.setApplicationMenu(null)</span><br><span class="line">+       &#125;</span><br><span class="line">+   &#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>macOS菜单栏名称label的“App Demo”会在build版本生效，dev版本会显示“Electron”</p>
</blockquote>
<p>更多关于菜单栏设置，请参阅：<a href="https://links.jianshu.com/go?to=https%3A%2F%2Felectronjs.org%2Fdocs%2Fapi%2Fmenu" target="_blank" rel="noopener">https://electronjs.org/docs/api/menu</a></p>
<h3 id="设置APP窗口图标"><a href="#设置APP窗口图标" class="headerlink" title="设置APP窗口图标"></a>设置APP窗口图标</h3><p>准备windows和macOS两版图标。</p>
<blockquote>
<p>windows:  app.ico  最小尺寸：256x256<br> macOS:  app.png或app.icns  最小尺寸：512x512</p>
</blockquote>
<p>把图标文件放到public/目录下，项目结构如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">|- /dist_electron</span><br><span class="line">  （略）</span><br><span class="line">|- /<span class="keyword">public</span></span><br><span class="line">   |- app.icns  &lt;-- 本教程暂时未使用icns</span><br><span class="line">   |- app.ico</span><br><span class="line">   |- app.png</span><br><span class="line">   |- favicon.ico</span><br><span class="line">   |- index.html</span><br><span class="line">|- /src</span><br><span class="line">  （略）</span><br><span class="line">|- .editorconfig    </span><br><span class="line">|- .eslintrc.js</span><br><span class="line">|- .gitignore</span><br><span class="line">|- babel.config.js</span><br><span class="line">|- <span class="keyword">package</span>.json</span><br><span class="line">|- <span class="keyword">package</span>-lock.json</span><br><span class="line">|- README.md</span><br></pre></td></tr></table></figure>
<p>可以顺便把favicon.ico也修改一下，但是在桌面版APP上是用不到的。如果以后生成纯web项目才会用到。</p>
<p>修改background.js，让APP窗口应用图标：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">createWindow</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// Create the browser window.</span></span><br><span class="line">      win = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">        width: <span class="number">1200</span>,</span><br><span class="line">        height: <span class="number">620</span>,</span><br><span class="line">        webPreferences: &#123;</span><br><span class="line">          nodeIntegration: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">+       <span class="comment">// eslint-disable-next-line no-undef</span></span><br><span class="line">+       icon: <span class="string">`<span class="subst">$&#123;__static&#125;</span>/app.ico`</span></span><br><span class="line">      &#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里的${__static}对应的是public目录</p>
</blockquote>
<p>现在，Windows系统上可以看到开发环境的APP窗口图标已经生效了。</p>
<p>macOS图标请参照相关章节，并且需要在build后才能生效。</p>
<h3 id="设置APP窗口标题栏名称"><a href="#设置APP窗口标题栏名称" class="headerlink" title="设置APP窗口标题栏名称"></a>设置APP窗口标题栏名称</h3><p>修改public/index.html:</p>
<p>我们把electron-vue-demo改为App Demo。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"&lt;%= BASE_URL %&gt;favicon.ico"</span>&gt;</span></span><br><span class="line">M       <span class="tag">&lt;<span class="name">title</span>&gt;</span>App Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="build最终产品"><a href="#build最终产品" class="headerlink" title="build最终产品"></a>build最终产品</h2><p>这里我们已经集成了electron-builder工具，官方文档可以参阅：<a href="https://www.electron.build/" target="_blank" rel="noopener">https://www.electron.build/</a></p>
<h3 id="设置APP及安装包图标"><a href="#设置APP及安装包图标" class="headerlink" title="设置APP及安装包图标"></a>设置APP及安装包图标</h3><p>在窗口图标章节，我们的图标生效于运行APP的窗口。本小节将生效于最终生成的可执行文件和安装包图标。需要准备的图标文件请回看对应章节。</p>
<p>修改vue.config.js</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">    chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;...&#125;,</span><br><span class="line">+   pluginOptions: &#123;</span><br><span class="line">+       electronBuilder: &#123;</span><br><span class="line">+           builderOptions: &#123;</span><br><span class="line">+               win: &#123;</span><br><span class="line">+                   icon: <span class="string">'./public/app.ico'</span></span><br><span class="line">+               &#125;,</span><br><span class="line">+               mac: &#123;</span><br><span class="line">+                   icon: <span class="string">'./public/app.png'</span></span><br><span class="line">+               &#125;</span><br><span class="line">+           &#125;</span><br><span class="line">+       &#125;</span><br><span class="line">+   &#125;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>运行build后的mac版本，可以看到图标都已生效了。</p>
<p>安装包和可执行文件的截图就不再放出了。</p>
<p>更多详细介绍，可参阅： <a href="https://www.electron.build/icons.html" target="_blank" rel="noopener">https://www.electron.build/icons.html</a></p>
<h3 id="设置APP名称"><a href="#设置APP名称" class="headerlink" title="设置APP名称"></a>设置APP名称</h3><p>APP名称包括安装包中APP的名称、可执行文件的文件名。</p>
<p>修改vue.config.js:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">    pluginOptions: &#123;</span><br><span class="line">        electronBuilder: &#123;</span><br><span class="line">            builderOptions: &#123;</span><br><span class="line">                win: &#123;</span><br><span class="line">                    icon: <span class="string">'./public/app.ico'</span></span><br><span class="line">                &#125;,</span><br><span class="line">                mac: &#123;</span><br><span class="line">                    icon: <span class="string">'./public/app.png'</span></span><br><span class="line">                &#125;,</span><br><span class="line">+               productName: <span class="string">'AppDemo'</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h3 id="打包APP"><a href="#打包APP" class="headerlink" title="打包APP"></a>打包APP</h3><p>执行以下命令，可以build工程：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">npm</span> <span class="selector-tag">run</span> <span class="selector-tag">electron</span><span class="selector-pseudo">:build</span></span><br></pre></td></tr></table></figure>
<p>最终在dist_electron目录下生成build后的产品。</p>
<h4 id="windows版本"><a href="#windows版本" class="headerlink" title="windows版本"></a>windows版本</h4><p>目录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/dist_electron</span><br><span class="line">|- /bundled</span><br><span class="line">  （略）</span><br><span class="line">|- /win-unpacked  &lt;-- 绿色版</span><br><span class="line">  （略）</span><br><span class="line">|- AppDemo Setup 0.1.0.exe  &lt;-- 安装文件</span><br><span class="line">|- AppDemo Setup 0.1.0.exe.blockmap</span><br><span class="line">|- builder-effective-config.yaml</span><br><span class="line">|- index.js</span><br></pre></td></tr></table></figure>
<p>这里其实就win-unpacked和AppDemo Setup 0.1.0.exe有用。</p>
<blockquote>
<p>※注：在32位环境下打包生成的是32位APP，在64位环境下打包生成的是64位APP。</p>
</blockquote>
<h4 id="mac版本"><a href="#mac版本" class="headerlink" title="mac版本"></a>mac版本</h4><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">/dist_electron</span><br><span class="line">|- /bundled</span><br><span class="line">  （略）</span><br><span class="line">|- /mac</span><br><span class="line">   |- <span class="type">AppDemo</span>   &lt;-- 绿色版</span><br><span class="line">|- <span class="type">AppDemo</span>-<span class="number">0.1</span>.<span class="number">0</span>-mac.<span class="built_in">zip</span>  &lt;-- 绿色版压缩包</span><br><span class="line">|- <span class="type">AppDemo</span>-<span class="number">0.1</span>.<span class="number">0</span>-mac.dmg  &lt;-- 安装包</span><br><span class="line">|- <span class="type">AppDemo</span>-<span class="number">0.1</span>.<span class="number">0</span>.dmg.blockmap</span><br><span class="line">|- builder-effective-config.yaml</span><br><span class="line">|- index.js</span><br></pre></td></tr></table></figure>
<h3 id="可能出现的错误"><a href="#可能出现的错误" class="headerlink" title="可能出现的错误"></a>可能出现的错误</h3><p>我曾经在Win10 64bit 1809版本上build失败，保存信息中提示：</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">Error output:</span><br><span class="line">Can<span class="symbol">'t</span> open output file</span><br><span class="line">Error - aborting creation process</span><br></pre></td></tr></table></figure>
<p>与此同时，在win7和win10 1803版本build正常。经研究，无果。后来把windows升级到1903版本，问题解决了。应该是vue-cli-plugin-electron-builder插件与系统之间的问题导致。</p>
<h2 id="关于项目开发的一些经验"><a href="#关于项目开发的一些经验" class="headerlink" title="关于项目开发的一些经验"></a>关于项目开发的一些经验</h2><p>在完成以上章节后，后面基本可以完全按照web方式开发了。这里简单分享下一些小经验。</p>
<h3 id="src目录结构参考"><a href="#src目录结构参考" class="headerlink" title="src目录结构参考"></a>src目录结构参考</h3><figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">/src</span><br><span class="line">|- /common</span><br><span class="line">   |- /fonts</span><br><span class="line">   |- /images</span><br><span class="line">   |- /js</span><br><span class="line">      |- api</span><br><span class="line">      |- libs</span><br><span class="line">   |- /stylus</span><br><span class="line">   |- /components</span><br><span class="line">   |- /<span class="keyword">base</span></span><br><span class="line">   |- /modules</span><br><span class="line">      |- /moduleA</span><br><span class="line">      |- /moduleB</span><br><span class="line">      ...</span><br><span class="line">   |- /views</span><br><span class="line">   |- App.vue</span><br><span class="line">   |- background.js</span><br><span class="line">   |- main.js</span><br><span class="line">   |- router.js</span><br><span class="line">   |- store.js</span><br></pre></td></tr></table></figure>
<p>下面对部分重要目录简要说明：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">common/ - 项目公用库</span><br><span class="line">common/fonts/ - 字体文件</span><br><span class="line">common/images/ - 公用图片</span><br><span class="line">common/js/ - 公用js目录</span><br><span class="line">common/js/api/ - 把api按类别封装成函数，并<span class="built_in">export</span>出去，减少业务逻辑中的重复代码</span><br><span class="line">common/js/lib/ - 存放一些公用函数库、定义的常量库等</span><br><span class="line">common/stylus/ - Stylus样式文件</span><br><span class="line">components/ - vue组件目录</span><br><span class="line">component/base/ - vue基础组件，例如自定义的CheckBox、日期选择器、Dialog、Toaster、分页组件等</span><br><span class="line">component/modules/ - vue模块</span><br><span class="line">views/ - vue页面</span><br></pre></td></tr></table></figure>
<h3 id="换肤功能的实现"><a href="#换肤功能的实现" class="headerlink" title="换肤功能的实现"></a>换肤功能的实现</h3><p>很多项目都有实时换肤的需求，在实际开发中，虽然我们使用了Sass、Less、Stylus等高端样式工具，但最终经过编译还是要回归到最原始的CSS。换肤的本质还是实时替换皮肤样式文件。</p>
<h4 id="失败案例"><a href="#失败案例" class="headerlink" title="失败案例"></a>失败案例</h4><p>以Stylus为例，抽象出皮肤文件skin.styl:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="variable">$color</span>-<span class="built_in">bg</span> = <span class="comment">#fff</span></span><br><span class="line"><span class="variable">$color</span>-text = <span class="comment">#333</span></span><br></pre></td></tr></table></figure>
<p>在业务样式中引用：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@import <span class="string">'skin.styl'</span></span><br><span class="line"></span><br><span class="line">body</span><br><span class="line"> background: <span class="variable">$color</span>-<span class="built_in">bg</span></span><br><span class="line"> color: <span class="variable">$color</span>-text</span><br></pre></td></tr></table></figure>
<p>当经过编译后，生成的css为：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;<span class="attribute">background</span>: <span class="number">#fff</span>; <span class="attribute">color</span>: <span class="number">#333</span>;&#125;</span><br></pre></td></tr></table></figure>
<p>样式已经写死了，无法换肤。</p>
<p>那么应该怎么做呢？</p>
<h4 id="成功案例"><a href="#成功案例" class="headerlink" title="成功案例"></a>成功案例</h4><p>项目根目录下的public目录是静态目录，也就是说在build最终产品的时候，它里面的文件将原封不动保留。所以，可以将皮肤文件放在这里。</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">|- /<span class="keyword">public</span></span><br><span class="line">+  |- /skin</span><br><span class="line">+     |- /skin01</span><br><span class="line">+        |- skin.css</span><br><span class="line">+     |- /skin02</span><br><span class="line">+        |- skin.css     </span><br><span class="line">   |- app.icns</span><br><span class="line">   |- app.ico</span><br><span class="line">   |- app.png</span><br><span class="line">   |- favicon.ico</span><br><span class="line">   |- index.html</span><br></pre></td></tr></table></figure>
<p>由于Electron的是基于chromium内核，所以不用担心代码的浏览器兼容问题。接下来就是发挥CSS3变量var(–*)的时候了。</p>
<p>public/skin/skin01/skin.css：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attribute">--color-bg</span>: <span class="number">#fff</span>;</span><br><span class="line">    <span class="attribute">--color-text</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>public/skin/skin02/skin.css：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">    <span class="attribute">--color-bg</span>: <span class="number">#263238</span>;</span><br><span class="line">    <span class="attribute">--color-text</span>: <span class="number">#b2ccd6</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>修改src/App.vue：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">    ...</span><br><span class="line">    &lt;style lang=<span class="string">"stylus"</span>&gt;</span><br><span class="line">+   body</span><br><span class="line">+     background: <span class="keyword">var</span>(--color-bg)</span><br><span class="line">+     color: <span class="keyword">var</span>(--color-text)</span><br><span class="line">    <span class="meta">#app</span></span><br><span class="line">      font-family <span class="string">'Avenir'</span>, Helvetica, Arial, sans-serif</span><br><span class="line">      -webkit-font-smoothing antialiased</span><br><span class="line">      -moz-osx-font-smoothing grayscale</span><br><span class="line">      text-align center</span><br><span class="line">M     color: <span class="keyword">var</span>(--color-text)</span><br><span class="line">    </span><br><span class="line">    <span class="meta">#nav</span></span><br><span class="line">      padding <span class="number">30</span>px</span><br><span class="line">      a</span><br><span class="line">        font-weight bold</span><br><span class="line">M       color: <span class="keyword">var</span>(--color-text)</span><br><span class="line">        &amp;.router-link-exact-active</span><br><span class="line">          color <span class="meta">#42b983</span></span><br><span class="line">    &lt;/style&gt;</span><br></pre></td></tr></table></figure>
<p>在public/index.html引入皮肤样式，注意加上id=”app-skin”：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width,initial-scale=1.0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"&lt;%= BASE_URL %&gt;favicon.ico"</span>&gt;</span></span><br><span class="line">+       <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"&lt;%= BASE_URL %&gt;skin/skin01/skin.css"</span> <span class="attr">id</span>=<span class="string">"app-skin"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>App Demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>篇幅有限，这里就不写通过js修改皮肤的代码了。通过调试工具手动修改skin的css路径，可看到换肤效果</p>
<h3 id="从Electron4-x升级到5-x"><a href="#从Electron4-x升级到5-x" class="headerlink" title="从Electron4.x升级到5.x"></a>从Electron4.x升级到5.x</h3><p>如果你之前用的是Electron4.x，升级到5.x很简单。</p>
<p>修改package.json中electron的版本(写作本文时是5.0.6)：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">    ...</span><br><span class="line">M   <span class="string">"electron"</span>: <span class="string">"^5.0.6"</span>,</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
<p>修改background.js中的这部分：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Scheme must be registered before the app is ready</span></span><br><span class="line"><span class="comment">// Electron 4.x代码</span></span><br><span class="line"><span class="comment">// protocol.registerStandardSchemes(['app'], &#123;secure: true&#125;)</span></span><br><span class="line"><span class="comment">// Electron 5.x代码</span></span><br><span class="line"><span class="class"><span class="keyword">protocol</span>.<span class="title">registerSchemesAsPrivileged</span>([</span>&#123;</span><br><span class="line">  scheme: 'app',</span><br><span class="line">  privileges: &#123;</span><br><span class="line">    secure: <span class="literal">true</span>,</span><br><span class="line">    standard: <span class="literal">true</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;])</span><br></pre></td></tr></table></figure>
<p>然后执行，等待升级安装完成：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>electron</tag>
        <tag>vue</tag>
        <tag>nodejs</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM 性能调优监控工具 jps、jstack、jmap、jhat、jstat、hprof 使用详解</title>
    <url>/2020/01/27/JVM-%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7-jps%E3%80%81jstack%E3%80%81jmap%E3%80%81jhat%E3%80%81jstat%E3%80%81hprof-%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<p>Java应用开发、维护中，有时候我们会碰到下面这些问题：</p>
<ul>
<li>OutOfMemoryError，内存不足</li>
<li>内存泄露</li>
<li>线程死锁</li>
<li>锁争用（Lock Contention）</li>
<li>Java进程消耗CPU过高</li>
<li>……</li>
</ul>
<p>这些问题在日常开发、维护中可能被很多人忽视（比如有的人遇到上面的问题只是重启服务器或者调大内存，而不会深究问题根源），但能够理解并解决这些问题是Java程序员进阶的必备要求。本文将对一些常用的JVM性能调优监控工具进行介绍，希望能起抛砖引玉之用。</p>
<h1 id="一、jps-Java-Virtual-Machine-Process-Status-Tool-：-基础工具"><a href="#一、jps-Java-Virtual-Machine-Process-Status-Tool-：-基础工具" class="headerlink" title="一、jps(Java Virtual Machine Process Status Tool)   ： 基础工具"></a>一、jps(Java Virtual Machine Process Status Tool)   ： 基础工具</h1><p>jps主要用来输出JVM中运行的进程状态信息。语法格式如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jps [options] [hostid]</span><br></pre></td></tr></table></figure>
<p>如果不指定hostid就默认为当前主机或服务器。</p>
<p>命令行参数选项说明如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-q 不输出类名、Jar名和传入main方法的参数</span><br><span class="line"></span><br><span class="line">-m 输出传入main方法的参数</span><br><span class="line"></span><br><span class="line">-l 输出main类或Jar的全限名</span><br><span class="line"></span><br><span class="line">-v 输出传入JVM的参数</span><br></pre></td></tr></table></figure>
<p>比如下面：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/# jps -m -l</span><br><span class="line">2458 org.artifactory.standalone.main.Main /usr/local/artifactory-2.2.5/etc/jetty.xml</span><br><span class="line">29920 com.sun.tools.hat.Main -port 9998 /tmp/dump.dat</span><br><span class="line">3149 org.apache.catalina.startup.Bootstrap start</span><br><span class="line">30972 sun.tools.jps.Jps -m -l</span><br><span class="line">8247 org.apache.catalina.startup.Bootstrap start</span><br><span class="line">25687 com.sun.tools.hat.Main -port 9999 dump.dat</span><br><span class="line">21711 mrf-center.jar</span><br></pre></td></tr></table></figure></p>
<h1 id="二、-jstack"><a href="#二、-jstack" class="headerlink" title="二、 jstack"></a>二、 jstack</h1><p>jstack主要用来查看某个Java进程内的线程堆栈信息。语法格式如下：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jstack [option] pid</span><br><span class="line">jstack [option] executable core</span><br><span class="line">jstack [option] [server-id@]remote-hostname-or-ip</span><br></pre></td></tr></table></figure></p>
<p>命令行参数选项说明如下：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-l long listings，会打印出额外的锁信息，在发生死锁时可以用jstack -l pid来观察锁持有情况-m mixed mode，不仅会输出Java堆栈信息，还会输出C/C++堆栈信息（比如Native方法）</span><br></pre></td></tr></table></figure></p>
<p>jstack可以定位到线程堆栈，根据堆栈信息我们可以定位到具体代码，所以它在JVM性能调优中使用得非常多。下面我们来一个实例找出某个Java进程中最耗费CPU的Java线程并定位堆栈信息，用到的命令有ps、top、printf、jstack、grep。<br>第一步先找出Java进程ID，我部署在服务器上的Java应用名称为mrf-center：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/# ps -ef | grep mrf-center | grep -v grep</span><br><span class="line">root     21711     1  1 14:47 pts/3    00:02:10 java -jar mrf-center.jar</span><br></pre></td></tr></table></figure>
<p>得到进程ID为21711，第二步找出该进程内最耗费CPU的线程，可以使用ps -Lfp pid或者ps -mp pid -o THREAD, tid, time或者top -Hp pid，我这里用第三个，输出如下：</p>
<p><img src="/2020/01/27/JVM-性能调优监控工具-jps、jstack、jmap、jhat、jstat、hprof-使用详解/JVM-%E6%80%A7%E8%83%BD%E8%B0%83%E4%BC%98%E7%9B%91%E6%8E%A7%E5%B7%A5%E5%85%B7-jps%E3%80%81jstack%E3%80%81jmap%E3%80%81jhat%E3%80%81jstat%E3%80%81hprof-%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/640.jpg" alt=""></p>
<p>TIME列就是各个Java线程耗费的CPU时间，CPU时间最长的是线程ID为21742的线程，用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">printf "%x" 21742</span><br></pre></td></tr></table></figure>
<p>得到21742的十六进制值为54ee，下面会用到。<br>OK，下一步终于轮到jstack上场了，它用来输出进程21711的堆栈信息，然后根据线程ID的十六进制值grep，如下：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/# jstack 21711 | grep 54ee</span><br><span class="line">"PollIntervalRetrySchedulerThread" prio=10 tid=0x00007f950043e000 nid=0x54ee in Object.wait() [0x00007f94c6eda000]</span><br></pre></td></tr></table></figure></p>
<p>可以看到CPU消耗在PollIntervalRetrySchedulerThread这个类的Object.wait()，我找了下我的代码，定位到下面的代码：<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Idle wait</span></span><br><span class="line">getLog().info(<span class="string">"Thread ["</span> + getName() + <span class="string">"] is idle waiting..."</span>);</span><br><span class="line">schedulerThreadState = PollTaskSchedulerThreadState.IdleWaiting;</span><br><span class="line"><span class="keyword">long</span> now = System.currentTimeMillis();</span><br><span class="line"><span class="keyword">long</span> waitTime = now + getIdleWaitTime();</span><br><span class="line"><span class="keyword">long</span> timeUntilContinue = waitTime - now;</span><br><span class="line"><span class="keyword">synchronized</span>(sigLock) &#123;<span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(!halted.get()) &#123;</span><br><span class="line">    sigLock.wait(timeUntilContinue);</span><br><span class="line">    &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException ignore) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>它是轮询任务的空闲等待代码，上面的sigLock.wait(timeUntilContinue)就对应了前面的Object.wait()。</p>
<h1 id="三、jmap（Memory-Map）和-jhat（Java-Heap-Analysis-Tool）"><a href="#三、jmap（Memory-Map）和-jhat（Java-Heap-Analysis-Tool）" class="headerlink" title="三、jmap（Memory Map）和 jhat（Java Heap Analysis Tool）"></a>三、jmap（Memory Map）和 jhat（Java Heap Analysis Tool）</h1><p>jmap导出堆内存，生产上使用曾经导致过进程hang住的情况(JDK1.7)，分析可能存在侵入内存区间读取时，有一定概率造成影响，建议如果机器有重要任务在运行或者不能立刻重启的进程谨慎使用！<br>然后使用jhat来进行分析<br>jmap语法格式如下：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jmap [option] pid</span><br><span class="line">jmap [option] executable core</span><br><span class="line">jmap [option] [server-id@]remote-hostname-or-ip</span><br></pre></td></tr></table></figure></p>
<p>如果运行在64位JVM上，可能需要指定-J-d64命令选项参数。<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jmap -permstat pid</span><br></pre></td></tr></table></figure></p>
<p>打印进程的类加载器和类加载器加载的持久代对象信息，输出：类加载器名称、对象是否存活（不可靠）、对象地址、父类加载器、已加载的类大小等信息，如下图：</p>
<p><img src="/2020/01/27/JVM-性能调优监控工具-jps、jstack、jmap、jhat、jstat、hprof-使用详解/640_2.jpg" alt="img"></p>
<p>使用jmap -heap pid查看进程堆内存使用情况，包括使用的GC算法、堆配置参数和各代中堆内存使用情况。比如下面的例子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/# jmap -heap 21711</span><br><span class="line">Attaching to process ID 21711, please wait...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 20.10-b01</span><br><span class="line"></span><br><span class="line">using thread-local object allocation.</span><br><span class="line">Parallel GC with 4 thread(s)</span><br><span class="line"></span><br><span class="line">Heap Configuration:</span><br><span class="line">MinHeapFreeRatio = 40   </span><br><span class="line">MaxHeapFreeRatio = 70   </span><br><span class="line">MaxHeapSize      = 2067791872 (1972.0MB)</span><br><span class="line">NewSize          = 1310720 (1.25MB)</span><br><span class="line">MaxNewSize       = 17592186044415 MB</span><br><span class="line">OldSize          = 5439488 (5.1875MB)</span><br><span class="line">NewRatio         = 2   </span><br><span class="line">SurvivorRatio    = 8   </span><br><span class="line">PermSize         = 21757952 (20.75MB)</span><br><span class="line">MaxPermSize      = 85983232 (82.0MB)</span><br><span class="line"></span><br><span class="line">Heap Usage:</span><br><span class="line">PS Young Generation</span><br><span class="line">Eden Space:</span><br><span class="line">   capacity = 6422528 (6.125MB)</span><br><span class="line">   used     = 5445552 (5.1932830810546875MB)</span><br><span class="line">   free     = 976976 (0.9317169189453125MB)</span><br><span class="line">   84.78829520089286% used</span><br><span class="line">From Space:</span><br><span class="line">   capacity = 131072 (0.125MB)</span><br><span class="line">   used     = 98304 (0.09375MB)</span><br><span class="line">   free     = 32768 (0.03125MB)</span><br><span class="line">   75.0% used</span><br><span class="line">To Space:</span><br><span class="line">   capacity = 131072 (0.125MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 131072 (0.125MB)</span><br><span class="line">   0.0% used</span><br><span class="line">PS Old Generation</span><br><span class="line">   capacity = 35258368 (33.625MB)</span><br><span class="line">   used     = 4119544 (3.9287033081054688MB)</span><br><span class="line">   free     = 31138824 (29.69629669189453MB)</span><br><span class="line">   11.683876009235595% used</span><br><span class="line">PS Perm Generation</span><br><span class="line">   capacity = 52428800 (50.0MB)</span><br><span class="line">   used     = 26075168 (24.867218017578125MB)</span><br><span class="line">   free     = 26353632 (25.132781982421875MB)</span><br><span class="line">   49.73443603515625% used</span><br><span class="line">   ....</span><br></pre></td></tr></table></figure>
<p>使用jmap -histo[:live] pid查看堆内存中的对象数目、大小统计直方图，如果带上live则只统计活对象，如下：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/# jmap -histo:live 21711 | more </span><br><span class="line">num     #instances         #bytes  class name----------------------------------------------</span><br><span class="line">   1:         38445        5597736  &lt;constMethodKlass&gt;</span><br><span class="line">   2:         38445        5237288  &lt;methodKlass&gt;</span><br><span class="line">   3:          3500        3749504  &lt;constantPoolKlass&gt;</span><br><span class="line">   4:         60858        3242600  &lt;symbolKlass&gt;</span><br><span class="line">   5:          3500        2715264  &lt;instanceKlassKlass&gt;</span><br><span class="line">   6:          2796        2131424  &lt;constantPoolCacheKlass&gt;</span><br><span class="line">   7:          5543        1317400  [I</span><br><span class="line">   8:         13714        1010768  [C</span><br><span class="line">   9:          4752        1003344  [B</span><br><span class="line">  10:          1225         639656  &lt;methodDataKlass&gt;</span><br><span class="line">  11:         14194         454208  java.lang.String</span><br><span class="line">  12:          3809         396136  java.lang.Class</span><br><span class="line">  13:          4979         311952  [S</span><br><span class="line">  14:          5598         287064  [[I</span><br><span class="line">  15:          3028         266464  java.lang.reflect.Method</span><br><span class="line">  16:           280         163520  &lt;objArrayKlassKlass&gt;</span><br><span class="line">  17:          4355         139360  java.util.HashMap$Entry</span><br><span class="line">  18:          1869         138568  [Ljava.util.HashMap$Entry;</span><br><span class="line">  19:          2443          97720  java.util.LinkedHashMap$Entry</span><br><span class="line">  20:          2072          82880  java.lang.ref.SoftReference</span><br><span class="line">  21:          1807          71528  [Ljava.lang.Object;</span><br><span class="line">  22:          2206          70592  java.lang.ref.WeakReference</span><br><span class="line">  23:           934          52304  java.util.LinkedHashMap</span><br><span class="line">  24:           871          48776  java.beans.MethodDescriptor</span><br><span class="line">  25:          1442          46144  java.util.concurrent.ConcurrentHashMap$HashEntry</span><br><span class="line">  26:           804          38592  java.util.HashMap</span><br><span class="line">  27:           948          37920  java.util.concurrent.ConcurrentHashMap$Segment</span><br><span class="line">  28:          1621          35696  [Ljava.lang.Class;</span><br><span class="line">  29:          1313          34880  [Ljava.lang.String;</span><br><span class="line">  30:          1396          33504  java.util.LinkedList$Entry</span><br><span class="line">  31:           462          33264  java.lang.reflect.Field</span><br><span class="line">  32:          1024          32768  java.util.Hashtable$Entry</span><br><span class="line">  33:           948          31440  [Ljava.util.concurrent.ConcurrentHashMap$HashEntry;</span><br></pre></td></tr></table></figure></p>
<p>class name是对象类型，说明如下：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">B  byte</span><br><span class="line">C  char</span><br><span class="line">D  double</span><br><span class="line">F  float</span><br><span class="line">I  int</span><br><span class="line">J  long</span><br><span class="line">Z  boolean</span><br><span class="line">[  数组，如[I表示int[]</span><br><span class="line">[L+类名 其他对象</span><br></pre></td></tr></table></figure></p>
<p>还有一个很常用的情况是：用jmap把进程内存使用情况dump到文件中，再用jhat分析查看。jmap进行dump命令格式如下：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jmap -dump:format=b,file=dumpFileName pid</span><br></pre></td></tr></table></figure></p>
<p>我一样地对上面进程ID为21711进行Dump：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/# jmap -dump:format=b,file=/tmp/dump.dat 21711     </span><br><span class="line">Dumping heap to /tmp/dump.dat ...</span><br><span class="line">Heap dump file created</span><br></pre></td></tr></table></figure></p>
<p>dump出来的文件可以用MAT、VisualVM等工具查看，这里用jhat查看：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/# jhat -port 9998 /tmp/dump.dat</span><br><span class="line">Reading from /tmp/dump.dat...</span><br><span class="line">Dump file created Tue Jan 28 17:46:14 CST 2014Snapshot read, resolving...</span><br><span class="line">Resolving 132207 objects...</span><br><span class="line">Chasing references, expect 26 dots..........................</span><br><span class="line">Eliminating duplicate references..........................</span><br><span class="line">Snapshot resolved.</span><br><span class="line">Started HTTP server on port 9998Server is ready.</span><br></pre></td></tr></table></figure></p>
<p>注意如果Dump文件太大，可能需要加上-J-Xmx512m这种参数指定最大堆内存，即jhat -J-Xmx512m -port 9998 /tmp/dump.dat。然后就可以在浏览器中输入主机地址:9998查看了：</p>
<p><img src="/2020/01/27/JVM-性能调优监控工具-jps、jstack、jmap、jhat、jstat、hprof-使用详解/640_3.png" alt="img"></p>
<p>上面红线框出来的部分大家可以自己去摸索下，最后一项支持OQL（Object Query Language对象查询语言）。</p>
<h1 id="四、jstat（JVM统计监测工具）"><a href="#四、jstat（JVM统计监测工具）" class="headerlink" title="四、jstat（JVM统计监测工具）"></a>四、jstat（JVM统计监测工具）</h1><p>看看各个区内存和GC的情况<br>语法格式如下：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jstat [ generalOption | outputOptions vmid [interval[s|ms] [count]] ]</span><br></pre></td></tr></table></figure></p>
<p>vmid是Java虚拟机ID，在Linux/Unix系统上一般就是进程ID。interval是采样时间间隔。count是采样数目。比如下面输出的是GC信息，采样时间间隔为250ms，采样数为4：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">root@ubuntu:/# jstat -gc 21711 250 4 </span><br><span class="line">S0C    S1C    S0U    S1U      EC       EU        OC         OU       PC     PU    YGC     YGCT    FGC    FGCT     GCT   </span><br><span class="line">192.0  192.0   64.0   0.0    6144.0   1854.9   32000.0     4111.6   55296.0 25472.7    702    0.431   3      0.218    0.649</span><br><span class="line">192.0  192.0   64.0   0.0    6144.0   1972.2   32000.0     4111.6   55296.0 25472.7    702    0.431   3      0.218    0.649</span><br><span class="line">192.0  192.0   64.0   0.0    6144.0   1972.2   32000.0     4111.6   55296.0 25472.7    702    0.431   3      0.218    0.649</span><br><span class="line">192.0  192.0   64.0   0.0    6144.0   2109.7   32000.0     4111.6   55296.0 25472.7    702    0.431   3      0.218    0.649</span><br></pre></td></tr></table></figure></p>
<p>要明白上面各列的意义，先看JVM堆内存布局：<br><img src="/2020/01/27/JVM-性能调优监控工具-jps、jstack、jmap、jhat、jstat、hprof-使用详解/640_4.jpg" alt="img"></p>
<p>可以看出：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">堆内存 = 年轻代 + 年老代 + 永久代</span><br><span class="line">年轻代 = Eden区 + 两个Survivor区（From和To）</span><br></pre></td></tr></table></figure>
<p>现在来解释各列含义：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">S0C、S1C、S0U、S1U：Survivor 0/1区容量（Capacity）和使用量（Used）</span><br><span class="line">EC、EU：Eden区容量和使用量</span><br><span class="line">OC、OU：年老代容量和使用量</span><br><span class="line">PC、PU：永久代容量和使用量</span><br><span class="line">YGC、YGT：年轻代GC次数和GC耗时</span><br><span class="line">FGC、FGCT：Full GC次数和Full GC耗时</span><br><span class="line">GCT：GC总耗时</span><br></pre></td></tr></table></figure>
<h1 id="五、hprof（Heap-CPU-Profiling-Tool）"><a href="#五、hprof（Heap-CPU-Profiling-Tool）" class="headerlink" title="五、hprof（Heap/CPU Profiling Tool）"></a>五、hprof（Heap/CPU Profiling Tool）</h1><p>hprof能够展现CPU使用率，统计堆内存使用情况。<br>语法格式如下：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -agentlib:hprof[=options] ToBeProfiledClass</span><br><span class="line">java -Xrunprof[:options] ToBeProfiledClass</span><br><span class="line">javac -J-agentlib:hprof[=options] ToBeProfiledClass</span><br></pre></td></tr></table></figure></p>
<p>完整的命令选项如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Option Name and Value  Description                    Default</span><br><span class="line">---------------------  -----------                    -------</span><br><span class="line">heap=dump|sites|all    heap profiling                 all</span><br><span class="line">cpu=samples|times|old  CPU usage                      off</span><br><span class="line">monitor=y|n            monitor contention             n</span><br><span class="line">format=a|b             text(txt) or binary output     a</span><br><span class="line">file=&lt;file&gt;            write data to file             java.hprof[.txt]</span><br><span class="line">net=&lt;host&gt;:&lt;port&gt;      send data over a socket        off</span><br><span class="line">depth=&lt;size&gt;           stack trace depth              4</span><br><span class="line">interval=&lt;ms&gt;          sample interval in ms          10</span><br><span class="line">cutoff=&lt;value&gt;         output cutoff point            0.0001</span><br><span class="line">lineno=y|n             line number in traces?         y</span><br><span class="line">thread=y|n             thread in traces?              n</span><br><span class="line">doe=y|n                dump on exit?                  y</span><br><span class="line">msa=y|n                Solaris micro state accounting n</span><br><span class="line">force=y|n              force output to &lt;file&gt;         y</span><br><span class="line">verbose=y|n            print messages about dumps     y</span><br></pre></td></tr></table></figure>
<p>来几个官方指南上的实例。<br>CPU Usage Sampling Profiling(cpu=samples)的例子：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -agentlib:hprof=cpu=samples,interval=20,depth=3 Hello</span><br></pre></td></tr></table></figure></p>
<p>上面每隔20毫秒采样CPU消耗信息，堆栈深度为3，生成的profile文件名称是java.hprof.txt，在当前目录。 </p>
<p>CPU Usage Times Profiling(cpu=times)的例子，它相对于CPU Usage Sampling Profile能够获得更加细粒度的CPU消耗信息，能够细到每个方法调用的开始和结束，它的实现使用了字节码注入技术（BCI）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javac -J-agentlib:hprof=cpu=times Hello.java</span><br></pre></td></tr></table></figure>
<p>Heap Allocation Profiling(heap=sites)的例子：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javac -J-agentlib:hprof=heap=sites Hello.java</span><br></pre></td></tr></table></figure></p>
<p>Heap Dump(heap=dump)的例子，它比上面的Heap Allocation Profiling能生成更详细的Heap Dump信息：<br><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">javac -J-agentlib:hprof=heap=dump Hello.java</span><br></pre></td></tr></table></figure></p>
<p>虽然在JVM启动参数中加入-Xrunprof:heap=sites参数可以生成CPU/Heap Profile文件，但对JVM性能影响非常大，不建议在线上服务器环境使用。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Linux</tag>
        <tag>JVM</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux命令 - netstat</title>
    <url>/2020/01/27/Linux%E5%91%BD%E4%BB%A4-netstat/</url>
    <content><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>netstat 是一个告诉我们系统中所有 tcp/udp/unix socket 连接状态的命令行工具。它会列出所有已经连接或者等待连接状态的连接。 该工具在识别某个应用监听哪个端口时特别有用，我们也能用它来判断某个应用是否正常的在监听某个端口。</p>
<p>netstat 命令还能显示其它各种各样的网络相关信息，例如路由表， 网卡统计信息， 虚假连接以及多播成员等。</p>
<h1 id="1-检查所有的连接"><a href="#1-检查所有的连接" class="headerlink" title="1 - 检查所有的连接"></a>1 - 检查所有的连接</h1><p>使用 <code>a</code> 选项可以列出系统中的所有连接，</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ netstat -a</span><br></pre></td></tr></table></figure>
<p>这会显示系统所有的 tcp、udp 以及 unix 连接。</p>
<h1 id="2-检查所有的-tcp-udp-unix-socket-连接"><a href="#2-检查所有的-tcp-udp-unix-socket-连接" class="headerlink" title="2 - 检查所有的 tcp/udp/unix socket 连接"></a>2 - 检查所有的 tcp/udp/unix socket 连接</h1><p>使用 <code>t</code> 选项只列出 tcp 连接，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> netstat -at</span></span><br></pre></td></tr></table></figure>
<p>类似的，使用 <code>u</code> 选项只列出 udp 连接，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> netstat -au</span></span><br></pre></td></tr></table></figure>
<p>使用 <code>x</code> 选项只列出 Unix socket 连接，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> netstat -ax</span></span><br></pre></td></tr></table></figure>
<h1 id="3-同时列出进程-ID-进程名称"><a href="#3-同时列出进程-ID-进程名称" class="headerlink" title="3 - 同时列出进程 ID/进程名称"></a>3 - 同时列出进程 ID/进程名称</h1><p>使用 <code>p</code> 选项可以在列出连接的同时也显示 PID 或者进程名称，而且它还能与其他选项连用，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> netstat -ap</span></span><br></pre></td></tr></table></figure>
<h1 id="4-列出端口号而不是服务名"><a href="#4-列出端口号而不是服务名" class="headerlink" title="4 - 列出端口号而不是服务名"></a>4 - 列出端口号而不是服务名</h1><p>使用 <code>n</code> 选项可以加快输出，它不会执行任何反向查询（LCTT 译注：这里原文有误），而是直接输出数字。 由于无需查询，因此结果输出会快很多。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> netstat -an</span></span><br></pre></td></tr></table></figure>
<h1 id="5-只输出监听端口"><a href="#5-只输出监听端口" class="headerlink" title="5 - 只输出监听端口"></a>5 - 只输出监听端口</h1><p>使用 <code>l</code> 选项只输出监听端口。它不能与 <code>a</code> 选项连用，因为 <code>a</code> 会输出所有端口，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> netstat -l</span></span><br></pre></td></tr></table></figure>
<h1 id="6-输出网络状态"><a href="#6-输出网络状态" class="headerlink" title="6 - 输出网络状态"></a>6 - 输出网络状态</h1><p>使用 <code>s</code> 选项输出每个协议的统计信息，包括接收/发送的包数量，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> netstat -s</span></span><br></pre></td></tr></table></figure>
<h1 id="7-输出网卡状态"><a href="#7-输出网卡状态" class="headerlink" title="7 - 输出网卡状态"></a>7 - 输出网卡状态</h1><p>使用 <code>I</code> 选项只显示网卡的统计信息，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> netstat -i</span></span><br></pre></td></tr></table></figure>
<h1 id="8-显示多播组multicast-group信息"><a href="#8-显示多播组multicast-group信息" class="headerlink" title="8 - 显示多播组multicast group信息"></a>8 - 显示多播组multicast group信息</h1><p>使用 <code>g</code> 选项输出 IPV4 以及 IPV6 的多播组信息，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> netstat -g</span></span><br></pre></td></tr></table></figure>
<h1 id="9-显示网络路由信息"><a href="#9-显示网络路由信息" class="headerlink" title="9 - 显示网络路由信息"></a>9 - 显示网络路由信息</h1><p>使用 <code>r</code> 输出网络路由信息，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> netstat -r</span></span><br></pre></td></tr></table></figure>
<h1 id="10-持续输出"><a href="#10-持续输出" class="headerlink" title="10 - 持续输出"></a>10 - 持续输出</h1><p>使用 <code>c</code> 选项持续输出结果</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> netstat -c</span></span><br></pre></td></tr></table></figure>
<h1 id="11-过滤出某个端口"><a href="#11-过滤出某个端口" class="headerlink" title="11 - 过滤出某个端口"></a>11 - 过滤出某个端口</h1><p>与 <code>grep</code> 连用来过滤出某个端口的连接，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> netstat -anp | grep 3306</span></span><br></pre></td></tr></table></figure>
<h1 id="12-统计连接个数"><a href="#12-统计连接个数" class="headerlink" title="12 - 统计连接个数"></a>12 - 统计连接个数</h1><p>通过与 <code>wc</code> 和 <code>grep</code> 命令连用，可以统计指定端口的连接数量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> netstat -anp | grep 3306 | wc -l</span></span><br></pre></td></tr></table></figure>
<p>这会输出 mysql 服务端口（即 3306端口）的连接数。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>netstat</tag>
      </tags>
  </entry>
  <entry>
    <title>memcached与redis实现的对比</title>
    <url>/2019/12/29/memcached%E4%B8%8Eredis%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%AF%B9%E6%AF%94/</url>
    <content><![CDATA[<p>  memcached和redis，作为近些年最常用的缓存服务器，相信大家对它们再熟悉不过了。前两年还在学校时，我曾经读过它们的主要源码，如今写篇笔记从个人角度简单对比一下它们的实现方式，权当做复习，有理解错误之处，欢迎指正。</p>
<p>  文中使用的架构类的图片大多来自于网络，有部分图与最新实现有出入，文中已经指出。</p>
<h1 id="1-综述"><a href="#1-综述" class="headerlink" title="1. 综述"></a>1. 综述</h1><p>  读一个软件的源码，首先要弄懂软件是用作干什么的，那memcached和redis是干啥的？众所周知，数据一般会放在数据库中，但是查询数据会相对比较慢，特别是用户很多时，频繁的查询，需要耗费大量的时间。怎么办呢？数据放在哪里查询快？那肯定是内存中。memcached和redis就是将数据存储在内存中，按照key-value的方式查询，可以大幅度提高效率。所以一般它们都用做缓存服务器，缓存常用的数据，需要查询的时候，直接从它们那儿获取，减少查询数据库的次数，提高查询效率。</p>
<h1 id="2-服务方式"><a href="#2-服务方式" class="headerlink" title="2. 服务方式"></a>2. 服务方式</h1><p>memcached和redis怎么提供服务呢？它们是独立的进程，需要的话，还可以让他们变成daemon进程，所以我们的用户进程要使用memcached和redis的服务的话，就需要进程间通信了。考虑到用户进程和memcached和redis不一定在同一台机器上，所以还需要支持网络间通信。因此，memcached和redis自己本身就是网络服务器，用户进程通过与他们通过网络来传输数据，显然最简单和最常用的就是使用tcp连接了。另外，memcached和redis都支持udp协议。而且当用户进程和memcached和redis在同一机器时，还可以使用unix域套接字通信。</p>
<h1 id="3-事件模型"><a href="#3-事件模型" class="headerlink" title="3. 事件模型"></a>3. 事件模型</h1><p>下面开始讲他们具体是怎么实现的了。首先来看一下它们的事件模型。</p>
<p>  自从epoll出来以后，几乎所有的网络服务器全都抛弃select和poll，换成了epoll。redis也一样，只不多它还提供对select和poll的支持，可以自己配置使用哪一个，但是一般都是用epoll。另外针对BSD，还支持使用kqueue。而memcached是基于libevent的，不过libevent底层也是使用epoll的，所以可以认为它们都是使用epoll。epoll的特性这里就不介绍了，网上介绍文章很多。</p>
<p>它们都使用epoll来做事件循环，不过redis是单线程的服务器（redis也是多线程的，只不过除了主线程以外，其他线程没有event loop，只是会进行一些后台存储工作），而memcached是多线程的。 redis的事件模型很简单，只有一个event loop，是简单的reactor实现。不过redis事件模型中有一个亮点，我们知道epoll是针对fd的，它返回的就绪事件也是只有fd，redis里面的fd就是服务器与客户端连接的socket的fd，但是处理的时候，需要根据这个fd找到具体的客户端的信息，怎么找呢？通常的处理方式就是用红黑树将fd与客户端信息保存起来，通过fd查找，效率是lgn。不过redis比较特殊，redis的客户端的数量上限可以设置，即可以知道同一时刻，redis所打开的fd的上限，而我们知道，进程的fd在同一时刻是不会重复的（fd只有关闭后才能复用），所以redis使用一个数组，将fd作为数组的下标，数组的元素就是客户端的信息，这样，直接通过fd就能定位客户端信息，查找效率是O(1)，还省去了复杂的红黑树的实现（我曾经用c写一个网络服务器，就因为要保持fd和connect对应关系，不想自己写红黑树，然后用了STL里面的set，导致项目变成了c++的，最后项目使用g++编译，这事我不说谁知道？）。显然这种方式只能针对connection数量上限已确定，并且不是太大的网络服务器，像nginx这种http服务器就不适用，nginx就是自己写了红黑树。</p>
<p>而memcached是多线程的，使用master-worker的方式，主线程监听端口，建立连接，然后顺序分配给各个工作线程。每一个从线程都有一个event loop，它们服务不同的客户端。master线程和worker线程之间使用管道通信，每一个工作线程都会创建一个管道，然后保存写端和读端，并且将读端加入event loop，监听可读事件。同时，每个从线程都有一个就绪连接队列，主线程连接连接后，将连接的item放入这个队列，然后往该线程的管道的写端写入一个connect命令，这样event loop中加入的管道读端就会就绪，从线程读取命令，解析命令发现是有连接，然后就会去自己的就绪队列中获取连接，并进行处理。多线程的优势就是可以充分发挥多核的优势，不过编写程序麻烦一点，memcached里面就有各种锁和条件变量来进行线程同步。</p>
<h1 id="4-内存分配"><a href="#4-内存分配" class="headerlink" title="4. 内存分配"></a>4. 内存分配</h1><p>memcached和redis的核心任务都是在内存中操作数据，内存管理自然是核心的内容。<br>首先看看他们的内存分配方式。memcached是有自己得内存池的，即预先分配一大块内存，然后接下来分配内存就从内存池中分配，这样可以减少内存分配的次数，提高效率，这也是大部分网络服务器的实现方式，只不过各个内存池的管理方式根据具体情况而不同。而redis没有自己得内存池，而是直接使用时分配，即什么时候需要什么时候分配，内存管理的事交给内核，自己只负责取和释放（redis既是单线程，又没有自己的内存池，是不是感觉实现的太简单了？那是因为它的重点都放在数据库模块了）。不过redis支持使用tcmalloc来替换glibc的malloc，前者是google的产品，比glibc的malloc快。</p>
<p>  由于redis没有自己的内存池，所以内存申请和释放的管理就简单很多，直接malloc和free即可，十分方便。而memcached是支持内存池的，所以内存申请是从内存池中获取，而free也是还给内存池，所以需要很多额外的管理操作，实现起来麻烦很多，具体的会在后面memcached的slab机制讲解中分析。 </p>
<h1 id="5-数据库实现"><a href="#5-数据库实现" class="headerlink" title="5. 数据库实现"></a>5. 数据库实现</h1><p>接下来看看他们的最核心内容，各自数据库的实现。</p>
<h2 id="5-1-memcached数据库实现"><a href="#5-1-memcached数据库实现" class="headerlink" title="5.1 memcached数据库实现"></a>5.1 memcached数据库实现</h2><p>memcached只支持key-value，即只能一个key对于一个value。它的数据在内存中也是这样以key-value对的方式存储，它使用slab机制。</p>
<p> 首先看memcached是如何存储数据的，即存储key-value对。如下图，每一个key-value对都存储在一个item结构中，包含了相关的属性和key和value的值。</p>
<p><img src="/2019/12/29/memcached与redis实现的对比/0.6910520100500435.png" alt="img"> </p>
<p>  item是保存key-value对的，当item多的时候，怎么查找特定的item是个问题。所以memcached维护了一个hash表，它用于快速查找item。hash表适用开链法（与redis一样）解决键的冲突，每一个hash表的桶里面存储了一个链表，链表节点就是item的指针，如上图中的h_next就是指桶里面的链表的下一个节点。 hash表支持扩容（item的数量是桶的数量的1.5以上时扩容），有一个primary_hashtable，还有一个old_hashtable，其中正常适用primary_hashtable，但是扩容的时候，将old_hashtable = primary_hashtable，然后primary_hashtable设置为新申请的hash表（桶的数量乘以2），然后依次将old_hashtable 里面的数据往新的hash表里面移动，并用一个变量expand_bucket记录以及移动了多少个桶，移动完成后，再free原来的old_hashtable 即可（redis也是有两个hash表，也是移动，不过不是后台线程完成，而是每次移动一个桶）。扩容的操作，专门有一个后台扩容的线程来完成，需要扩容的时候，使用条件变量通知它，完成扩容后，它又考试阻塞等待扩容的条件变量。这样在扩容的时候，查找一个item可能会在primary_hashtable和old_hashtable的任意一个中，需要根据比较它的桶的位置和expand_bucket的大小来比较确定它在哪个表里。</p>
<p> item是从哪里分配的呢？从slab中。如下图，memcached有很多slabclass，它们管理slab，每一个slab其实是trunk的集合，真正的item是在trunk中分配的，一个trunk分配一个item。一个slab中的trunk的大小一样，不同的slab，trunk的大小按比例递增，需要新申请一个item的时候，根据它的大小来选择trunk，规则是比它大的最小的那个trunk。这样，不同大小的item就分配在不同的slab中，归不同的slabclass管理。 这样的缺点是会有部分内存浪费，因为一个trunk可能比item大，如图2，分配100B的item的时候，选择112的trunk，但是会有12B的浪费，这部分内存资源没有使用。</p>
<p><img src="/2019/12/29/memcached与redis实现的对比/0.6555308480747044.png" alt="img"></p>
<p><img src="/2019/12/29/memcached与redis实现的对比/0.1720563017297536.png" alt="img"></p>
<p>   <img src="/2019/12/29/memcached与redis实现的对比/0.11287522944621742.png" alt="img"></p>
<p>如上图，整个构造就是这样，slabclass管理slab，一个slabclass有一个slab_list，可以管理多个slab，同一个slabclass中的slab的trunk大小都一样。slabclass有一个指针slot，保存了未分配的item已经被free掉的item（不是真的free内存，只是不用了而已），有item不用的时候，就放入slot的头部，这样每次需要在当前slab中分配item的时候，直接取slot取即可，不用管item是未分配过的还是被释放掉的。</p>
<p>然后，每一个slabclass对应一个链表，有head数组和tail数组，它们分别保存了链表的头节点和尾节点。链表中的节点就是改slabclass所分配的item，新分配的放在头部，链表越往后的item，表示它已经很久没有被使用了。当slabclass的内存不足，需要删除一些过期item的时候，就可以从链表的尾部开始删除，没错，这个链表就是为了实现LRU。光靠它还不行，因为链表的查询是O（n）的，所以定位item的时候，使用hash表，这已经有了，所有分配的item已经在hash表中了，所以，hash用于查找item，然后链表有用存储item的最近使用顺序，这也是lru的标准实现方法。<br> 每次需要新分配item的时候，找到slabclass对于的链表，从尾部往前找，看item是否已经过期，过期的话，直接就用这个过期的item当做新的item。没有过期的，则需要从slab中分配trunk，如果slab用完了，则需要往slabclass中添加slab了。</p>
<p> memcached支持设置过期时间，即expire time，但是内部并不定期检查数据是否过期，而是客户进程使用该数据的时候，memcached会检查expire time，如果过期，直接返回错误。这样的优点是，不需要额外的cpu来进行expire time的检查，缺点是有可能过期数据很久不被使用，则一直没有被释放，占用内存。</p>
<p>memcached是多线程的，而且只维护了一个数据库，所以可能有多个客户进程操作同一个数据，这就有可能产生问题。比如，A已经把数据更改了，然后B也更改了改数据，那么A的操作就被覆盖了，而可能A不知道，A任务数据现在的状态时他改完后的那个值，这样就可能产生问题。为了解决这个问题，memcached使用了CAS协议，简单说就是item保存一个64位的unsigned int值，标记数据的版本，每更新一次（数据值有修改），版本号增加，然后每次对数据进行更改操作，需要比对客户进程传来的版本号和服务器这边item的版本号是否一致，一致则可进行更改操作，否则提示脏数据。</p>
<p>   以上就是memcached如何实现一个key-value的数据库的介绍。</p>
<h2 id="5-2-redis数据库实现"><a href="#5-2-redis数据库实现" class="headerlink" title="5.2 redis数据库实现"></a>5.2 redis数据库实现</h2><p>首先redis数据库的功能强大一些，因为不像memcached只支持保存字符串，redis支持string， list， set，sorted set，hash table 5种数据结构。例如存储一个人的信息就可以使用hash table，用人的名字做key，然后name super， age 24， 通过key 和 name，就可以取到名字super，或者通过key和age，就可以取到年龄24。这样，当只需要取得age的时候，不需要把人的整个信息取回来，然后从里面找age，直接获取age即可，高效方便。</p>
<p>为了实现这些数据结构，redis定义了抽象的对象redis object，如下图。每一个对象有类型，一共5种：字符串，链表，集合，有序集合，哈希表。 同时，为了提高效率，redis为每种类型准备了多种实现方式，根据特定的场景来选择合适的实现方式，encoding就是表示对象的实现方式的。然后还有记录了对象的lru，即上次被访问的时间，同时在redis 服务器中会记录一个当前的时间（近似值，因为这个时间只是每隔一定时间，服务器进行自动维护的时候才更新），它们两个只差就可以计算出对象多久没有被访问了。 然后redis object中还有引用计数，这是为了共享对象，然后确定对象的删除时间用的。最后使用一个void*指针来指向对象的真正内容。正式由于使用了抽象redis object，使得数据库操作数据时方便很多，全部统一使用redis object对象即可，需要区分对象类型的时候，再根据type来判断。而且正式由于采用了这种面向对象的方法，让redis的代码看起来很像c++代码，其实全是用c写的。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//#define REDIS_STRING 0	</span></span><br><span class="line"><span class="comment">// 字符串类型//#define REDIS_LIST 1		</span></span><br><span class="line"><span class="comment">// 链表类型//#define REDIS_SET 2		</span></span><br><span class="line"><span class="comment">// 集合类型(无序的)，可以求差集，并集等</span></span><br><span class="line"><span class="comment">//#define REDIS_ZSET 3		</span></span><br><span class="line"><span class="comment">// 有序的集合类型</span></span><br><span class="line"><span class="comment">//#define REDIS_HASH 4		</span></span><br><span class="line"><span class="comment">// 哈希类型</span></span><br><span class="line"><span class="comment">//#define REDIS_ENCODING_RAW 0     /* Raw representation */ </span></span><br><span class="line"><span class="comment">//raw  未加工</span></span><br><span class="line"><span class="comment">//#define REDIS_ENCODING_INT 1     /* Encoded as integer */</span></span><br><span class="line"><span class="comment">//#define REDIS_ENCODING_HT 2      /* Encoded as hash table */</span></span><br><span class="line"><span class="comment">//#define REDIS_ENCODING_ZIPMAP 3  /* Encoded as zipmap */</span></span><br><span class="line"><span class="comment">//#define REDIS_ENCODING_LINKEDLIST 4 /* Encoded as regular linked list */</span></span><br><span class="line"><span class="comment">//#define REDIS_ENCODING_ZIPLIST 5 /* Encoded as ziplist */</span></span><br><span class="line"><span class="comment">//#define REDIS_ENCODING_INTSET 6  /* Encoded as intset */</span></span><br><span class="line"><span class="comment">//#define REDIS_ENCODING_SKIPLIST 7  /* Encoded as skiplist */</span></span><br><span class="line"><span class="comment">//#define REDIS_ENCODING_EMBSTR 8  /* Embedded sds string encoding */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">redisObject</span> &#123;</span></span><br><span class="line">    <span class="keyword">unsigned</span> type:<span class="number">4</span>;			</span><br><span class="line">    <span class="comment">// 对象的类型，包括 /* Object types */unsigned encoding:4;		</span></span><br><span class="line">    <span class="comment">// 底部为了节省空间，一种type的数据，</span></span><br><span class="line">    <span class="comment">// 可以采用不同的存储方式unsigned lru:REDIS_LRU_BITS; /* lru time (relative to server.lruclock) */int refcount;         </span></span><br><span class="line">    <span class="comment">// 引用计数void *ptr;</span></span><br><span class="line">&#125; robj;</span><br></pre></td></tr></table></figure>
<p>说到底redis还是一个key-value的数据库，不管它支持多少种数据结构，最终存储的还是以key-value的方式，只不过value可以是链表，set，sorted set，hash table等。和memcached一样，所有的key都是string，而set，sorted set，hash table等具体存储的时候也用到了string。 而c没有现成的string，所以redis的首要任务就是实现一个string，取名叫sds（simple dynamic string），如下的代码， 非常简单的一个结构体，len存储改string的内存总长度，free表示还有多少字节没有使用，而buf存储具体的数据，显然len-free就是目前字符串的长度。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sdshdr</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">free</span>;</span><br><span class="line">    <span class="keyword">char</span> buf[];</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p> 字符串解决了，所有的key都存成sds就行了，那么key和value怎么关联呢？key-value的格式在脚本语言中很好处理，直接使用字典即可，C没有字典，怎么办呢？自己写一个呗（redis十分热衷于造轮子）。看下面的代码，privdata存额外信息，用的很少，至少我们发现。 dictht是具体的哈希表，一个dict对应两张哈希表，这是为了扩容（包括rehashidx也是为了扩容）。dictType存储了哈希表的属性。redis还为dict实现了迭代器（所以说看起来像c++代码）。</p>
<p> 哈希表的具体实现是和mc类似的做法，也是使用开链法来解决冲突，不过里面用到了一些小技巧。比如使用dictType存储函数指针，可以动态配置桶里面元素的操作方法。又比如dictht中保存的sizemask取size（桶的数量）-1，用它与key做&amp;操作来代替取余运算，加快速度等等。总的来看，dict里面有两个哈希表，每个哈希表的桶里面存储dictEntry链表，dictEntry存储具体的key和value。</p>
<p> 前面说过，一个dict对于两个dictht，是为了扩容（其实还有缩容）。正常的时候，dict只使用dictht[0]，当dict[0]中已有entry的数量与桶的数量达到一定的比例后，就会触发扩容和缩容操作，我们统称为rehash，这时，为dictht[1]申请rehash后的大小的内存，然后把dictht[0]里的数据往dictht[1]里面移动，并用rehashidx记录当前已经移动万的桶的数量，当所有桶都移完后，rehash完成，这时将dictht[1]变成dictht[0], 将原来的dictht[0]变成dictht[1]，并变为null即可。不同于memcached，这里不用开一个后台线程来做，而是就在event loop中完成，并且rehash不是一次性完成，而是分成多次，每次用户操作dict之前，redis移动一个桶的数据，直到rehash完成。这样就把移动分成多个小移动完成，把rehash的时间开销均分到用户每个操作上，这样避免了用户一个请求导致rehash的时候，需要等待很长时间，直到rehash完成才有返回的情况。不过在rehash期间，每个操作都变慢了点，而且用户还不知道redis在他的请求中间添加了移动数据的操作，感觉redis太贱了 :-D</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dict</span> &#123;</span></span><br><span class="line">    dictType *type;	<span class="comment">// 哈希表的相关属性void *privdata;	// 额外信息</span></span><br><span class="line">    dictht ht[<span class="number">2</span>];	<span class="comment">// 两张哈希表，分主和副，用于扩容int rehashidx; /* rehashing not in progress if rehashidx == -1 */ </span></span><br><span class="line">    <span class="comment">// 记录当前数据迁移的位置，在扩容的时候用的int iterators; /* number of iterators currently running */	</span></span><br><span class="line">    <span class="comment">// 目前存在的迭代器的数量</span></span><br><span class="line">&#125; dict;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictht</span> &#123;</span></span><br><span class="line">    dictEntry **table;  <span class="comment">// dictEntry是item，多个item组成hash桶里面的链表，table则是多个链表头指针组成的数组的指针unsigned long size;	</span></span><br><span class="line">    <span class="comment">// 这个就是桶的数量</span></span><br><span class="line">    <span class="comment">// sizemask取size - 1, 然后一个数据来的时候，通过计算出的hashkey, 让hashkey &amp; sizemask来确定它要放的桶的位置</span></span><br><span class="line">    <span class="comment">// 当size取2^n的时候，sizemask就是1...111，这样就和hashkey % size有一样的效果，但是使用&amp;会快很多。这就是原因unsigned long sizemask;  </span></span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">long</span> used;		<span class="comment">// 已经数值的dictEntry数量</span></span><br><span class="line">&#125; dictht;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictType</span> &#123;</span></span><br><span class="line">    <span class="function"><span class="keyword">unsigned</span> <span class="title">int</span> <span class="params">(*hashFunction)</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *key)</span></span>;	 <span class="comment">// hash的方法void *(*keyDup)(void *privdata, const void *key);	</span></span><br><span class="line">    <span class="comment">// key的复制方法void *(*valDup)(void *privdata, const void *obj);	</span></span><br><span class="line">    <span class="comment">// value的复制方法int (*keyCompare)(void *privdata, const void *key1, const void *key2);	</span></span><br><span class="line">    <span class="comment">// key之间的比较void (*keyDestructor)(void *privdata, void *key);	</span></span><br><span class="line">    <span class="comment">// key的析构void (*valDestructor)(void *privdata, void *obj);	</span></span><br><span class="line">    <span class="comment">// value的析构</span></span><br><span class="line">&#125; dictType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> &#123;</span></span><br><span class="line">    <span class="keyword">void</span> *key;</span><br><span class="line">    <span class="keyword">union</span> &#123;</span><br><span class="line">        <span class="keyword">void</span> *val;</span><br><span class="line">        <span class="keyword">uint64_t</span> u64;</span><br><span class="line">        <span class="keyword">int64_t</span> s64;</span><br><span class="line">    &#125; v;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">dictEntry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; dictEntry;</span><br></pre></td></tr></table></figure>
<p>   有了dict，数据库就好实现了。所有数据读存储在dict中，key存储成dictEntry中的key（string），用void* 指向一个redis object，它可以是5种类型中的任何一种。如下图，结构构造是这样，不过这个图已经过时了，有一些与redis3.0不符合的地方。</p>
<p><img src="/2019/12/29/memcached与redis实现的对比/0.08015050971880555.png" alt="img"></p>
<p> 五种type的对象，每一个都至少有两种底层实现方式。string有3种：REDIS_ENCODING_RAW, REDIS_ENCIDING_INT, REDIS_ENCODING_EMBSTR， list有：普通双向链表和压缩链表，压缩链表简单的说，就是讲数组改造成链表，连续的空间，然后通过存储字符串的大小信息来模拟链表，相对普通链表来说可以节省空间，不过有副作用，由于是连续的空间，所以改变内存大小的时候，需要重新分配，并且由于保存了字符串的字节大小，所有有可能引起连续更新（具体实现请详细看代码）。set有dict和intset（全是整数的时候使用它来存储）， sorted set有：skiplist和ziplist， hashtable实现有压缩列表和dict和ziplist。skiplist就是跳表，它有接近于红黑树的效率，但是实现起来比红黑树简单很多，所以被采用（奇怪，这里又不造轮子了，难道因为这个轮子有点难？）。 hash table可以使用dict实现，则改dict中，每个dictentry中key保存了key（这是哈希表中的键值对的key），而value则保存了value，它们都是string。 而set中的dict，每个dictentry中key保存了set中具体的一个元素的值，value则为null。图中的zset（有序集合）有误，zset使用skiplist和ziplist实现，首先skiplist很好理解，就把它当做红黑树的替代品就行，和红黑树一样，它也可以排序。怎么用ziplist存储zset呢？首先在zset中，每个set中的元素都有一个分值score，用它来排序。所以在ziplist中，按照分值大小，先存元素，再存它的score，再存下一个元素，然后score。这样连续存储，所以插入或者删除的时候，都需要重新分配内存。所以当元素超过一定数量，或者某个元素的字符数超过一定数量，redis就会选择使用skiplist来实现zset（如果当前使用的是ziplist，会将这个ziplist中的数据取出，存入一个新的skiplist，然后删除改ziplist，这就是底层实现转换，其余类型的redis object也是可以转换的）。 另外，ziplist如何实现hashtable呢？其实也很简单，就是存储一个key，存储一个value，再存储一个key，再存储一个value。还是顺序存储，与zset实现类似，所以当元素超过一定数量，或者某个元素的字符数超过一定数量时，就会转换成hashtable来实现。各种底层实现方式是可以转换的，redis可以根据情况选择最合适的实现方式，这也是这样使用类似面向对象的实现方式的好处。</p>
<p> 需要指出的是，使用skiplist来实现zset的时候，其实还用了一个dict，这个dict存储一样的键值对。为什么呢？因为skiplist的查找只是lgn的（可能变成n），而dict可以到O(1)， 所以使用一个dict来加速查找，由于skiplist和dict可以指向同一个redis object，所以不会浪费太多内存。另外使用ziplist实现zset的时候，为什么不用dict来加速查找呢？因为ziplist支持的元素个数很少（个数多时就转换成skiplist了），顺序遍历也很快，所以不用dict了。</p>
<p> 这样看来，上面的dict，dictType，dictHt，dictEntry，redis object都是很有考量的，它们配合实现了一个具有面向对象色彩的灵活、高效数据库。不得不说，redis数据库的设计还是很厉害的。</p>
<p> 与memcached不同的是，redis的数据库不止一个，默认就有16个，编号0-15。客户可以选择使用哪一个数据库，默认使用0号数据库。 不同的数据库数据不共享，即在不同的数据库中可以存在同样的key，但是在同一个数据库中，key必须是唯一的。</p>
<p> redis也支持expire time的设置，我们看上面的redis object，里面没有保存expire的字段，那redis怎么记录数据的expire time呢？ redis是为每个数据库又增加了一个dict，这个dict叫expire dict，它里面的dict entry里面的key就是数对的key，而value全是数据为64位int的redis object，这个int就是expire time。这样，判断一个key是否过期的时候，去expire dict里面找到它，取出expire time比对当前时间即可。为什么这样做呢？ 因为并不是所有的key都会设置过期时间，所以，对于不设置expire time的key来说，保存一个expire time会浪费空间，而是用expire dict来单独保存的话，可以根据需要灵活使用内存（检测到key过期时，会把它从expire dict中删除）。</p>
<p> redis的expire 机制是怎样的呢？ 与memcahed类似，redis也是惰性删除，即要用到数据时，先检查key是否过期，过期则删除，然后返回错误。单纯的靠惰性删除，上面说过可能会导致内存浪费，所以redis也有补充方案，redis里面有个定时执行的函数，叫servercron，它是维护服务器的函数，在它里面，会对过期数据进行删除，注意不是全删，而是在一定的时间内，对每个数据库的expire dict里面的数据随机选取出来，如果过期，则删除，否则再选，直到规定的时间到。即随机选取过期的数据删除，这个操作的时间分两种，一种较长，一种较短，一般执行短时间的删除，每隔一定的时间，执行一次长时间的删除。这样可以有效的缓解光采用惰性删除而导致的内存浪费问题。</p>
<p> 以上就是redis的数据的实现，与memcached不同，redis还支持数据持久化，这个下面介绍。</p>
<h2 id="5-4-redis数据库持久化"><a href="#5-4-redis数据库持久化" class="headerlink" title="5.4 redis数据库持久化"></a>5.4 redis数据库持久化</h2><p>redis和memcached的最大不同，就是redis支持数据持久化，这也是很多人选择使用redis而不是memcached的最大原因。 redis的持久化，分为两种策略，用户可以配置使用不同的策略。</p>
<h3 id="5-4-1-RDB持久化"><a href="#5-4-1-RDB持久化" class="headerlink" title="5.4.1 RDB持久化"></a>5.4.1 RDB持久化</h3><p>用户执行save或者bgsave的时候，就会触发RDB持久化操作。RDB持久化操作的核心思想就是把数据库原封不动的保存在文件里。</p>
<p> 那如何存储呢？如下图， 首先存储一个REDIS字符串，起到验证的作用，表示是RDB文件，然后保存redis的版本信息，然后是具体的数据库，然后存储结束符EOF，最后用检验和。关键就是databases，看它的名字也知道，它存储了多个数据库，数据库按照编号顺序存储，0号数据库存储完了，才轮到1，然后是2, 一直到最后一个数据库。</p>
<p><img src="/2019/12/29/memcached与redis实现的对比/0.9401236739940941.png" alt="img"></p>
<p>  每一个数据库存储方式如下，首先一个1字节的常量SELECTDB，表示切换db了，然后下一个接上数据库的编号，它的长度是可变的，然后接下来就是具体的key-value对的数据了。</p>
<p><img src="/2019/12/29/memcached与redis实现的对比/0.19187591481022537.png" alt="img"></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">rdbSaveKeyValuePair</span><span class="params">(rio *rdb, robj *key, robj *val,</span></span></span><br><span class="line"><span class="function"><span class="params">                        <span class="keyword">long</span> <span class="keyword">long</span> expiretime, <span class="keyword">long</span> <span class="keyword">long</span> now)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/* Save the expire time */</span><span class="keyword">if</span> (expiretime != <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="comment">/* If this key is already expired skip it */</span><span class="keyword">if</span> (expiretime &lt; now) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (rdbSaveType(rdb,REDIS_RDB_OPCODE_EXPIRETIME_MS) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">if</span> (rdbSaveMillisecondTime(rdb,expiretime) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Save type, key, value */</span><span class="keyword">if</span> (rdbSaveObjectType(rdb,val) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (rdbSaveStringObject(rdb,key) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (rdbSaveObject(rdb,val) == <span class="number">-1</span>) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>由上面的代码也可以看出，存储的时候，先检查expire time，如果已经过期，不存就行了，否则，则将expire time存下来，注意，及时是存储expire time，也是先存储它的类型为REDIS_RDB_OPCODE_EXPIRETIME_MS，然后再存储具体过期时间。接下来存储真正的key-value对，首先存储value的类型，然后存储key（它按照字符串存储），然后存储value，如下图。</p>
<p><img src="/2019/12/29/memcached与redis实现的对比/0.5668123732320964.png" alt="img"></p>
<p>在rdbsaveobject中，会根据val的不同类型，按照不同的方式存储，不过从根本上来看，最终都是转换成字符串存储，比如val是一个linklist，那么先存储整个list的字节数，然后遍历这个list，把数据取出来，依次按照string写入文件。对于hash table，也是先计算字节数，然后依次取出hash table中的dictEntry，按照string的方式存储它的key和value，然后存储下一个dictEntry。 总之，RDB的存储方式，对一个key-value对，会先存储expire time（如果有的话），然后是value的类型，然后存储key（字符串方式），然后根据value的类型和底层实现方式，将value转换成字符串存储。这里面为了实现数据压缩，以及能够根据文件恢复数据，redis使用了很多编码的技巧，有些我也没太看懂，不过关键还是要理解思想，不要在意这些细节。</p>
<p> 保存了RDB文件，当redis再启动的时候，就根据RDB文件来恢复数据库。由于以及在RDB文件中保存了数据库的号码，以及它包含的key-value对，以及每个key-value对中value的具体类型，实现方式，和数据，redis只要顺序读取文件，然后恢复object即可。由于保存了expire time，发现当前的时间已经比expire time大了，即数据已经超时了，则不恢复这个key-value对即可。</p>
<p> 保存RDB文件是一个很巨大的工程，所以redis还提供后台保存的机制。即执行bgsave的时候，redis fork出一个子进程，让子进程来执行保存的工作，而父进程继续提供redis正常的数据库服务。由于子进程复制了父进程的地址空间，即子进程拥有父进程fork时的数据库，子进程执行save的操作，把它从父进程那儿继承来的数据库写入一个temp文件即可。在子进程复制期间，redis会记录数据库的修改次数（dirty）。当子进程完成时，发送给父进程SIGUSR1信号，父进程捕捉到这个信号，就知道子进程完成了复制，然后父进程将子进程保存的temp文件改名为真正的rdb文件（即真正保存成功了才改成目标文件，这才是保险的做法）。然后记录下这一次save的结束时间。</p>
<p>  这里有一个问题，在子进程保存期间，父进程的数据库已经被修改了，而父进程只是记录了修改的次数（dirty），被没有进行修正操作。似乎使得RDB保存的不是实时的数据库，有点不太高大上的样子。 不过后面要介绍的AOF持久化，就解决了这个问题。</p>
<p> 除了客户执行sava或者bgsave命令，还可以配置RDB保存条件。即在配置文件中配置，在t时间内，数据库被修改了dirty次，则进行后台保存。redis在serve cron的时候，会根据dirty数目和上次保存的时间，来判断是否符合条件，符合条件的话，就进行bg save，注意，任意时刻只能有一个子进程来进行后台保存，因为保存是个很费io的操作，多个进程大量io效率不行，而且不好管理。</p>
<h3 id="5-4-2-AOF持久化"><a href="#5-4-2-AOF持久化" class="headerlink" title="5.4.2 AOF持久化"></a>5.4.2 AOF持久化</h3><p>  首先想一个问题，保存数据库一定需要像RDB那样把数据库里面的所有数据保存下来么？有没有别的方法？</p>
<p>  RDB保存的只是最终的数据库，它是一个结果。结果是怎么来的？是通过用户的各个命令建立起来的，所以可以不保存结果，而只保存建立这个结果的命令。 redis的AOF就是这个思想，它不同RDB保存db的数据，它保存的是一条一条建立数据库的命令。</p>
<p> 我们首先来看AOF文件的格式，它里面保存的是一条一条的命令，首先存储命令长度，然后存储命令，具体的分隔符什么的可以自己深入研究，这都不是重点，反正知道AOF文件存储的是redis客户端执行的命令即可。</p>
<p> redis server中有一个sds  aof_buf, 如果aof持久化打开的话，每个修改数据库的命令都会存入这个aof_buf（保存的是aof文件中命令格式的字符串），然后event loop没循环一次，在server cron中调用flushaofbuf，把aof_buf中的命令写入aof文件（其实是write，真正写入的是内核缓冲区），再清空aof_buf，进入下一次loop。这样所有的数据库的变化，都可以通过aof文件中的命令来还原，达到了保存数据库的效果。</p>
<p> 需要注意的是，flushaofbuf中调用的write，它只是把数据写入了内核缓冲区，真正写入文件时内核自己决定的，可能需要延后一段时间。 不过redis支持配置，可以配置每次写入后sync，则在redis里面调用sync，将内核中的数据写入文件，这不过这要耗费一次系统调用，耗费时间而已。还可以配置策略为1秒钟sync一次，则redis会开启一个后台线程（所以说redis不是单线程，只是单eventloop而已），这个后台线程会每一秒调用一次sync。这里要问了，RDB的时候为什么没有考虑sync的事情呢？因为RDB是一次性存储的，不像AOF这样多次存储，RDB的时候调用一次sync也没什么影响，而且使用bg save的时候，子进程会自己退出（exit），这时候exit函数内会冲刷缓冲区，自动就写入了文件中。</p>
<p> 再来看，如果不想使用aof_buf保存每次的修改命令，也可以使用aof持久化。redis提供aof_rewrite，即根据现有的数据库生成命令，然后把命令写入aof文件中。很奇特吧？对，就是这么厉害。进行aof_rewrite的时候，redis变量每个数据库，然后根据key-value对中value的具体类型，生成不同的命令，比如是list，则它生成一个保存list的命令，这个命令里包含了保存该list所需要的的数据，如果这个list数据过长，还会分成多条命令，先创建这个list，然后往list里面添加元素，总之，就是根据数据反向生成保存数据的命令。然后将这些命令存储aof文件，这样不就和aof append达到同样的效果了么？</p>
<p> aof格式也支持后台模式。执行aof_bgrewrite的时候，也是fork一个子进程，然后让子进程进行aof_rewrite，把它复制的数据库写入一个临时文件，然后写完后用新号通知父进程。父进程判断子进程的退出信息是否正确，然后将临时文件更名成最终的aof文件。好了，问题来了。在子进程持久化期间，可能父进程的数据库有更新，怎么把这个更新通知子进程呢？难道要用进程间通信么？是不是有点麻烦呢？你猜redis怎么做的？它根本不通知子进程。什么，不通知？那更新怎么办？ 在子进程执行aof_bgrewrite期间，父进程会保存所有对数据库有更改的操作的命令（增，删除，改等），把他们保存在aof_rewrite_buf_blocks中，这是一个链表，每个block都可以保存命令，存不下时，新申请block，然后放入链表后面即可，当子进程通知完成保存后，父进程将aof_rewrite_buf_blocks的命令append 进aof文件就可以了。多么优美的设计，想一想自己当初还考虑用进程间通信，别人直接用最简单的方法就完美的解决了问题，有句话说得真对，越优秀的设计越趋于简单，而复杂的东西往往都是靠不住的。</p>
<p> 至于aof文件的载入，也就是一条一条的执行aof文件里面的命令而已。不过考虑到这些命令就是客户端发送给redis的命令，所以redis干脆生成了一个假的客户端，它没有和redis建立网络连接，而是直接执行命令即可。首先搞清楚，这里的假的客户端，并不是真正的客户端，而是存储在redis里面的客户端的信息，里面有写和读的缓冲区，它是存在于redis服务器中的。所以，如下图，直接读入aof的命令，放入客户端的读缓冲区中，然后执行这个客户端的命令即可。这样就完成了aof文件的载入。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 创建伪客户端</span><br><span class="line">fakeClient = createFakeClient();</span><br><span class="line"></span><br><span class="line">while(命令不为空) &#123;</span><br><span class="line">   // 获取一条命令的参数信息 argc， argv</span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">    // 执行</span><br><span class="line">    fakeClient-&gt;argc = argc;</span><br><span class="line">    fakeClient-&gt;argv = argv;</span><br><span class="line">    cmd-&gt;proc(fakeClient);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p> 整个aof持久化的设计，个人认为相当精彩。其中有很多地方，值得膜拜。</p>
<h2 id="5-5-redis的事务"><a href="#5-5-redis的事务" class="headerlink" title="5.5 redis的事务"></a>5.5 redis的事务</h2><p> redis另一个比memcached强大的地方，是它支持简单的事务。事务简单说就是把几个命令合并，一次性执行全部命令。对于关系型数据库来说，事务还有回滚机制，即事务命令要么全部执行成功，只要有一条失败就回滚，回到事务执行前的状态。redis不支持回滚，它的事务只保证命令依次被执行，即使中间一条命令出错也会继续往下执行，所以说它只支持简单的事务。</p>
<p> 首先看redis事务的执行过程。首先执行multi命令，表示开始事务，然后输入需要执行的命令，最后输入exec执行事务。 redis服务器收到multi命令后，会将对应的client的状态设置为REDIS_MULTI，表示client处于事务阶段，并在client的multiState结构体里面保持事务的命令具体信息（当然首先也会检查命令是否能否识别，错误的命令不会保存），即命令的个数和具体的各个命令，当收到exec命令后，redis会顺序执行multiState里面保存的命令，然后保存每个命令的返回值，当有命令发生错误的时候，redis不会停止事务，而是保存错误信息，然后继续往下执行，当所有的命令都执行完后，将所有命令的返回值一起返回给客户。redis为什么不支持回滚呢？网上看到的解释出现问题是由于客户程序的问题，所以没必要服务器回滚，同时，不支持回滚，redis服务器的运行高效很多。在我看来，redis的事务不是传统关系型数据库的事务，要求CIAD那么非常严格，或者说redis的事务都不是事务，只是提供了一种方式，使得客户端可以一次性执行多条命令而已，就把事务当做普通命令就行了，支持回滚也就没必要了。</p>
<p>   <img src="/2019/12/29/memcached与redis实现的对比/0.5104974769055843.png" alt="img"></p>
<p>  我们知道redis是单event loop的，在真正执行一个事物的时候（即redis收到exec命令后），事物的执行过程是不会被打断的，所有命令都会在一个event loop中执行完。但是在用户逐个输入事务的命令的时候，这期间，可能已经有别的客户修改了事务里面用到的数据，这就可能产生问题。所以redis还提供了watch命令，用户可以在输入multi之前，执行watch命令，指定需要观察的数据，这样如果在exec之前，有其他的客户端修改了这些被watch的数据，则exec的时候，执行到处理被修改的数据的命令的时候，会执行失败，提示数据已经dirty。 这是如何是实现的呢？ 原来在每一个redisDb中还有一个dict watched_keys，watched_kesy中dictentry的key是被watch的数据库的key，而value则是一个list，里面存储的是watch它的client。同时，每个client也有一个watched_keys，里面保存的是这个client当前watch的key。在执行watch的时候，redis在对应的数据库的watched_keys中找到这个key（如果没有，则新建一个dictentry），然后在它的客户列表中加入这个client，同时，往这个client的watched_keys中加入这个key。当有客户执行一个命令修改数据的时候，redis首先在watched_keys中找这个key，如果发现有它，证明有client在watch它，则遍历所有watch它的client，将这些client设置为REDIS_DIRTY_CAS，表面有watch的key被dirty了。当客户执行的事务的时候，首先会检查是否被设置了REDIS_DIRTY_CAS，如果是，则表明数据dirty了，事务无法执行，会立即返回错误，只有client没有被设置REDIS_DIRTY_CAS的时候才能够执行事务。 需要指出的是，执行exec后，该client的所有watch的key都会被清除，同时db中该key的client列表也会清除该client，即执行exec后，该client不再watch任何key（即使exec没有执行成功也是一样）。所以说redis的事务是简单的事务，算不上真正的事务。</p>
<p> 以上就是redis的事务，感觉实现很简单，实际用处也不是太大。</p>
<h2 id="5-6-redis的发布订阅频道"><a href="#5-6-redis的发布订阅频道" class="headerlink" title="5.6 redis的发布订阅频道"></a>5.6 redis的发布订阅频道</h2><p> redis支持频道，即加入一个频道的用户相当于加入了一个群，客户往频道里面发的信息，频道里的所有client都能收到。</p>
<p> 实现也很简单，也watch_keys实现差不多，redis server中保存了一个pubsub_channels的dict，里面的key是频道的名称（显然要唯一了），value则是一个链表，保存加入了该频道的client。同时，每个client都有一个pubsub_channels，保存了自己关注的频道。当用用户往频道发消息的时候，首先在server中的pubsub_channels找到改频道，然后遍历client，给他们发消息。而订阅，取消订阅频道不够都是操作pubsub_channels而已，很好理解。</p>
<p> 同时，redis还支持模式频道。即通过正则匹配频道，如有模式频道p<em>, </em>1,  则向普通频道p1发送消息时，会匹配p<em>，</em>1，除了往普通频道发消息外，还会往p<em>，</em>1模式频道中的client发消息。注意，这里是用发布命令里面的普通频道来匹配已有的模式频道，而不是在发布命令里制定模式频道，然后匹配redis里面保存的频道。实现方式也很简单，在redis server里面有个pubsub_patterns的list（这里为什么不用dict？因为pubsub_patterns的个数一般较少，不需要使用dict，简单的list就好了），它里面存储的是pubsubPattern结构体，里面是模式和client信息，如下所示，一个模式，一个client，所以如果有多个clint监听一个pubsub_patterns的话，在list面会有多个pubsubPattern，保存client和pubsub_patterns的对应关系。 同时，在client里面，也有一个pubsub_patterns list，不过里面存储的就是它监听的pubsub_patterns的列表（就是sds），而不是pubsubPattern结构体。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">pubsubPattern</span> &#123;</span></span><br><span class="line">    redisClient *client;	<span class="comment">// 监听的client</span></span><br><span class="line">    robj *pattern;			<span class="comment">// 模式</span></span><br><span class="line">&#125; pubsubPattern;</span><br></pre></td></tr></table></figure>
<p> 当用户往一个频道发送消息的时候，首先会在redis server中的pubsub_channels里面查找该频道，然后往它的客户列表发送消息。然后在redis server里面的pubsub_patterns里面查找匹配的模式，然后往client里面发送消息。 这里并没有去除重复的客户，在pubsub_channels可能已经给某一个client发过message了，然后在pubsub_patterns中可能还会给用户再发一次（甚至更多次）。 估计redis认为这是客户程序自己的问题，所以不处理。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Publish a message */</span><span class="function"><span class="keyword">int</span> <span class="title">pubsubPublishMessage</span><span class="params">(robj *channel, robj *message)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> receivers = <span class="number">0</span>;</span><br><span class="line">    dictEntry *de;</span><br><span class="line">    listNode *ln;</span><br><span class="line">    listIter li;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* Send to clients listening for that channel */</span></span><br><span class="line">    de = dictFind(server.pubsub_channels,channel);</span><br><span class="line">    <span class="keyword">if</span> (de) &#123;</span><br><span class="line">        <span class="built_in">list</span> *<span class="built_in">list</span> = dictGetVal(de);</span><br><span class="line">        listNode *ln;</span><br><span class="line">        listIter li;</span><br><span class="line"></span><br><span class="line">        listRewind(<span class="built_in">list</span>,&amp;li);</span><br><span class="line">        <span class="keyword">while</span> ((ln = listNext(&amp;li)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            redisClient *c = ln-&gt;value;</span><br><span class="line"></span><br><span class="line">            addReply(c,shared.mbulkhdr[<span class="number">3</span>]);</span><br><span class="line">            addReply(c,shared.messagebulk);</span><br><span class="line">            addReplyBulk(c,channel);</span><br><span class="line">            addReplyBulk(c,message);</span><br><span class="line">            receivers++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* Send to clients listening to matching channels */</span><span class="keyword">if</span> (listLength(server.pubsub_patterns)) &#123;</span><br><span class="line">        listRewind(server.pubsub_patterns,&amp;li);</span><br><span class="line">        channel = getDecodedObject(channel);</span><br><span class="line">        <span class="keyword">while</span> ((ln = listNext(&amp;li)) != <span class="literal">NULL</span>) &#123;</span><br><span class="line">            pubsubPattern *pat = ln-&gt;value;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (stringmatchlen((<span class="keyword">char</span>*)pat-&gt;pattern-&gt;ptr,</span><br><span class="line">                                sdslen(pat-&gt;pattern-&gt;ptr),</span><br><span class="line">                                (<span class="keyword">char</span>*)channel-&gt;ptr,</span><br><span class="line">                                sdslen(channel-&gt;ptr),<span class="number">0</span>)) &#123;</span><br><span class="line">                addReply(pat-&gt;client,shared.mbulkhdr[<span class="number">4</span>]);</span><br><span class="line">                addReply(pat-&gt;client,shared.pmessagebulk);</span><br><span class="line">                addReplyBulk(pat-&gt;client,pat-&gt;pattern);</span><br><span class="line">                addReplyBulk(pat-&gt;client,channel);</span><br><span class="line">                addReplyBulk(pat-&gt;client,message);</span><br><span class="line">                receivers++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        decrRefCount(channel);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> receivers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6. 总结"></a>6. 总结</h1><p>总的来看，redis比memcached的功能多很多，实现也更复杂。 不过memcached更专注于保存key-value数据（这已经能满足大多数使用场景了），而redis提供更丰富的数据结构及其他的一些功能。不能说redis比memcached好，不过从源码阅读的角度来看，redis的价值或许更大一点。 </p>
]]></content>
      <categories>
        <category>缓存</category>
      </categories>
      <tags>
        <tag>redis</tag>
        <tag>memcached</tag>
      </tags>
  </entry>
  <entry>
    <title>[转载]从零开始：史上最详尽V2Ray搭建图文教程</title>
    <url>/2019/12/22/%E8%BD%AC%E8%BD%BD-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%EF%BC%9A%E5%8F%B2%E4%B8%8A%E6%9C%80%E8%AF%A6%E5%B0%BDV2Ray%E6%90%AD%E5%BB%BA%E5%9B%BE%E6%96%87%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<p>本文转载自从零开始：<a href="https://www.4spaces.org/digitalocean-build-v2ray-0-1/" target="_blank" rel="noopener">史上最详尽V2Ray搭建图文教程</a>，根据实际服务器配置做部分修改。</p>
<h2 id="一、服务端安装"><a href="#一、服务端安装" class="headerlink" title="一、服务端安装"></a>一、服务端安装</h2><p>以下所有操作都是使用root用户（普通用户自行sudo）进行操作的，服务器centos7。</p>
<p><strong>1.安装wget</strong></p>
<p>如提示没有安装wget，在登录完成的窗口输入下面命令并回车进行wget安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum -y install wget</span><br></pre></td></tr></table></figure>
<p><strong>2.下载脚本</strong></p>
<p>安装完wget之后就可以进行下载安装v2ray的脚本了，输入如下命令并回车：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://install.direct/go.sh</span><br></pre></td></tr></table></figure>
<p><strong>3.安装unzip</strong></p>
<p>因为centos不支持apt-get，我们需要安装unzip，详见<a href="https://www.v2ray.com/chapter_00/install.html" target="_blank" rel="noopener">官方说明</a>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y zip unzip</span><br></pre></td></tr></table></figure>
<p><strong>4.执行安装</strong></p>
<p>输入下面的命令并回车执行安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[michael@centos74 v2ray]$ bash go.sh </span><br><span class="line">Installing V2Ray v3.14 on x86_64</span><br><span class="line">Downloading V2Ray.</span><br><span class="line"><span class="meta">  %</span><span class="bash"> Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span></span><br><span class="line">                                 Dload  Upload   Total   Spent    Left  Speed</span><br><span class="line">100   608    0   608    0     0   2229      0 --:--:-- --:--:-- --:--:--  2235</span><br><span class="line">100 8482k  100 8482k    0     0  2501k      0  0:00:03  0:00:03 --:--:-- 2813k</span><br><span class="line">Extracting V2Ray package to /tmp/v2ray.</span><br><span class="line">Archive:  /tmp/v2ray/v2ray.zip</span><br><span class="line">   creating: /tmp/v2ray/v2ray-v3.14-linux-64/</span><br><span class="line">  inflating: /tmp/v2ray/v2ray-v3.14-linux-64/geoip.dat  </span><br><span class="line">  inflating: /tmp/v2ray/v2ray-v3.14-linux-64/geosite.dat  </span><br><span class="line">  inflating: /tmp/v2ray/v2ray-v3.14-linux-64/readme.md  </span><br><span class="line">   creating: /tmp/v2ray/v2ray-v3.14-linux-64/systemd/</span><br><span class="line">  inflating: /tmp/v2ray/v2ray-v3.14-linux-64/systemd/v2ray.service  </span><br><span class="line">   creating: /tmp/v2ray/v2ray-v3.14-linux-64/systemv/</span><br><span class="line">  inflating: /tmp/v2ray/v2ray-v3.14-linux-64/systemv/v2ray  </span><br><span class="line">  inflating: /tmp/v2ray/v2ray-v3.14-linux-64/v2ctl  </span><br><span class="line"> extracting: /tmp/v2ray/v2ray-v3.14-linux-64/v2ctl.sig  </span><br><span class="line">  inflating: /tmp/v2ray/v2ray-v3.14-linux-64/v2ray  </span><br><span class="line"> extracting: /tmp/v2ray/v2ray-v3.14-linux-64/v2ray.sig  </span><br><span class="line">  inflating: /tmp/v2ray/v2ray-v3.14-linux-64/vpoint_socks_vmess.json  </span><br><span class="line">  inflating: /tmp/v2ray/v2ray-v3.14-linux-64/vpoint_vmess_freedom.json  </span><br><span class="line">PORT:13437</span><br><span class="line">UUID:f500ecf5-e135-49c6-9ce2-78eb490d0aa9</span><br><span class="line">Created symlink from /etc/systemd/system/multi-user.target.wants/v2ray.service to /etc/systemd/system/v2ray.service.</span><br><span class="line">V2Ray v3.14 is installed.</span><br></pre></td></tr></table></figure>
<p><strong>5.相关命令</strong></p>
<p>在首次安装完成之后，V2Ray不会自动启动，需要手动运行上述启动命令。而在已经运行V2Ray的VPS上再次执行安装脚本，安装脚本会自动停止V2Ray 进程，升级V2Ray程序，然后自动运行V2Ray。在升级过程中，配置文件不会被修改。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 启动</span></span></span><br><span class="line">systemctl start v2ray</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 停止</span></span></span><br><span class="line">systemctl stop v2ray</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 重启</span></span></span><br><span class="line">systemctl restart v2ray</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 开机自启</span></span></span><br><span class="line">systemctl enable v2ray</span><br></pre></td></tr></table></figure>
<p>关于软件更新：<strong>更新 V2Ray 的方法是再次执行安装脚本！再次执行安装脚本！再次执行安装脚本！</strong></p>
<p><strong>6.配置</strong></p>
<p>如果你按照上面的命令执行安装完成之后，服务端其实是不需要再进行任何配置的，配置文件位于<code>/etc/v2ray/config.json</code>，使用<code>cat /etc/v2ray/config.json</code>查看配置信息。接下来进行客户端配置就行了。</p>
<p><strong>说明：</strong></p>
<ul>
<li><em>配置文件中的id、端口、alterId需要和客户端的配置保持一致</em>；</li>
<li><em>服务端使用脚本安装成功之后默认就是vmess协议</em>；</li>
</ul>
<p>配置完成之后重启v2ray。</p>
<p><strong>9.防火墙开放端口</strong></p>
<p>有的vps端口默认不开放，可能导致连接不成功，如果有这种情况，详细配置，见<a href="https://www.4spaces.org/centos-open-porter/" target="_blank" rel="noopener">CentOs开放端口的方法—二、firewalld</a>。部分服务器的防火墙配置只能在服务提供商的控制台操作，请注意。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 查看已开放端口</span><br><span class="line">firewall-cmd --zone=public --list-ports</span><br><span class="line"></span><br><span class="line">## 添加开放端口</span><br><span class="line">firewall-cmd --zone=public --add-port=80/tcp --permanent</span><br></pre></td></tr></table></figure>
<h2 id="二、Windows-客户端"><a href="#二、Windows-客户端" class="headerlink" title="二、Windows 客户端"></a>二、Windows 客户端</h2><p><strong>1.下载</strong></p>
<p>目前不支持水果系列，水果机只能自行走野路子解决。</p>
<p>1)下载【<a href="https://github.com/v2ray/v2ray-core/releases" target="_blank" rel="noopener">v2ray-windows-64.zip Github Release</a>】;<br>2)下载【<a href="https://github.com/2dust/v2rayN/releases" target="_blank" rel="noopener">v2rayN-v2rayN.exe-Github Release</a>】；</p>
<p>对<code>v2ray-windows-64.zip</code>进行解压，然后将下载的<code>V2RayN.exe</code>复制到解压后的目录，即两个下载好的文件需要在同一目录。</p>
<p><img src="/2019/12/22/转载-从零开始：史上最详尽V2Ray搭建图文教程/vmess-windows-client-dir.jpg" alt="img"></p>
<p><strong>2.配置</strong></p>
<p>运行V2RayN.exe，然后进行配置，下图中的配置信息，需要和你VPS搭建的时候的配置信息对应，VPS的v2ray配置信息位于<code>/etc/v2ray/config.json</code>文件里。</p>
<p>如果采用上面的默认方式安装，服务端配置是协议vmess，则配置如下：</p>
<p><img src="/2019/12/22/转载-从零开始：史上最详尽V2Ray搭建图文教程/new-vmess-config.jpg" alt="img"></p>
<p><img src="/2019/12/22/转载-从零开始：史上最详尽V2Ray搭建图文教程/vmess-windows-client.jpg" alt="img"></p>
<p><img src="/2019/12/22/转载-从零开始：史上最详尽V2Ray搭建图文教程/1577006106052.png" alt="1577006106052"></p>
<h2 id="三、测试"><a href="#三、测试" class="headerlink" title="三、测试"></a>三、测试</h2><p>打开浏览器，访问<code>www.google.com</code></p>
<h2 id="四、进阶"><a href="#四、进阶" class="headerlink" title="四、进阶"></a>四、进阶</h2><p>现在你已经学会使用v2ray了，为了更好的上网效果，建议继续了解一下下面文章：</p>
<ul>
<li><a href="https://www.4spaces.org/v2ray-nginx-tls-websocket/" target="_blank" rel="noopener">centos7基于nginx搭建v2ray服务端配置vmess+tls+websocket完全手册</a>；【推荐】</li>
<li><a href="https://www.4spaces.org/speed-up-your-vps-with-bbr-plus/" target="_blank" rel="noopener">使用Google BBR PLUS加速你的VPS网络</a>；</li>
<li><a href="https://www.4spaces.org/digitalocean-build-v2ray-mkcp/" target="_blank" rel="noopener">如何以mkcp方式部署v2ray</a>；</li>
</ul>
<h2 id="五、相关问题"><a href="#五、相关问题" class="headerlink" title="五、相关问题"></a>五、相关问题</h2><ul>
<li><a href="https://www.4spaces.org/v2ray-google-check/" target="_blank" rel="noopener">使用v2ray访问谷歌提示异常流量</a>；</li>
<li><a href="https://www.4spaces.org/v2ray-cloudflare-cdn-403/" target="_blank" rel="noopener">启用cloudflare cdn之后v2ray报403错误</a>；</li>
</ul>
]]></content>
      <tags>
        <tag>v2ray</tag>
      </tags>
  </entry>
  <entry>
    <title>详解分布式协调服务 ZooKeeper</title>
    <url>/2018/10/07/%E8%AF%A6%E8%A7%A3%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%B0%83%E6%9C%8D%E5%8A%A1-ZooKeeper/</url>
    <content><![CDATA[<p><code>作者 | Draveness</code></p>
<p><code>本文作者 Draveness，文章转载自 https://draveness.me/zookeeper-chubby， 对其内容进行过编辑。</code></p>
<p><code>这篇文章主要会介绍 Zookeeper 的实现原理以及常见的应用</code></p>
<p>在 2006 年，Google 发表了一篇名为 The Chubby lock service for loosely-coupled distributed systems 的论文，其中描述了一个分布式锁服务 Chubby 的设计理念和实现原理；作为 Google 内部的一个基础服务，虽然 Chubby 与 GFS、Bigtable 和 MapReduce 相比并没有那么大的名气，不过它在 Google 内部也是非常重要的基础设施。</p>
<p><img src="/2018/10/07/详解分布式协调服务-ZooKeeper/FE4VibF0SjfNC55Nwr7XreFBdYW0Q4icTg30dtZEX41yMutAaHrOdtng3gZrnXVS6ib5nUAGWphPdibZibF0xASOWWQ.png" alt="img"></p>
<p>相比于名不见经传的 Chubby，作者相信 Zookeeper 更被广大开发者所熟知，作为非常出名的分布式协调服务，Zookeeper 有非常多的应用，包括发布订阅、命名服务、分数是协调和分布式锁，这篇文章主要会介绍 Zookeeper 的实现原理以及常见的应用，但是在具体介绍 Zookeeper 的功能和原理之前，我们会简单介绍一下分布式锁服务 Chubby 以及它与 Zookeeper 之间的异同。</p>
<h1 id="Chubby"><a href="#Chubby" class="headerlink" title="Chubby"></a>Chubby</h1><p>作为分布式锁服务，Chubby 的目的就是允许多个客户端对它们的行为进行同步，同时也能够解决客户端的环境相关信息的分发和粗粒度的同步问题，GFS 和 Bigtable 都使用了 Chubby 以解决主节点的选举等问题。在网络上你很难找到关于 Chubby 的相关资料，我们只能从 The Chubby lock service for loosely-coupled distributed systems 一文中窥见它的一些设计思路、技术架构等信息。</p>
<p>虽然 Chubby 和 Zookeeper 有着比较相似的功能，但是它们的设计理念却非常不同，Chubby 在论文的摘要中写道：</p>
<blockquote>
<p>We describe our experiences with the Chubby lock service, which is intended to provide coarse-grained locking as well as reliable (though low-volume) storage for a loosely-coupled distributed system.</p>
</blockquote>
<p>从论文的摘要中我们可以看出 Chubby 首先被定义成一个 <strong>分布式的锁服务</strong>，它能够为分布式系统提供 <strong>松耦合、粗粒度</strong> 的分布式锁功能，然而我们并不能依赖于它来做一些重量的数据存储。</p>
<p><img src="/2018/10/07/详解分布式协调服务-ZooKeeper/FE4VibF0SjfNC55Nwr7XreFBdYW0Q4icTgsCvAvp0ZAfSaibY0AYOrm0lnwgTVc1kibuLHZkZImojibaia0r4Vfw7Fcg.png" alt="img"></p>
<p>Chubby 在设计时做了两个重要的设计决定，一是提供完整、独立的分布式锁服务而非一个用于共识的库或者服务，另一个是选择提供小文件的的读写功能，使得主节点能够方便地发布自己的状态信息。</p>
<h1 id="系统架构"><a href="#系统架构" class="headerlink" title="系统架构"></a>系统架构</h1><p>Chubby 总共由两部分组成，一部分是用于提供数据的读写接口并管理相关的配置数据的服务端，另一部分就是客户端使用的 SDK，为了提高系统的稳定性，每一个 Chubby 单元都由一组服务器组成，它会使用 共识算法 从集群中选举出主节点。</p>
<p><img src="/2018/10/07/详解分布式协调服务-ZooKeeper/FE4VibF0SjfNC55Nwr7XreFBdYW0Q4icTgCrLF3icVq2AXHKypeTWYbdyAg48hlAmrz6SQLicCG1EI0lic1u0icTuiaQw.png" alt="img"></p>
<p>在一个 Chubby Cell 中，<strong>只有</strong> 主节点会对外提供读写服务，其他的节点其实都是当前节点的副本（Replica），它们只是维护一个数据的拷贝并会在主节点更新时对它们持有的数据库进行更新；客户端通过向副本发送请求获取主节点的位置，一旦它获取到了主节点的位置，就会向所有的读写请求发送给主节点，直到其不再响应为止。写请求都会通过一致性协议传播到所有的副本中，当集群中的多数节点都同步了请求时就会认为当前的写入已经被确认。</p>
<p>当主节点宕机时，副本会在其租约到期时重新进行选举，副本节点如果在宕机几小时还没有回复，那么系统就会从资源池中选择一个新的节点并在该节点上启动 Chubby 服务并更新 DNS 表。</p>
<p><img src="/2018/10/07/详解分布式协调服务-ZooKeeper/FE4VibF0SjfNC55Nwr7XreFBdYW0Q4icTgJD5ICuJ3PWapYFJouDRg4yWhtKnvtEVIntAgDLDX9QW6psWY7lwETw.png" alt="img"></p>
<p>主节点会不停地轮训 DNS 表获取集群中最新的配置，每次 DNS 表更新时，主节点都会将新的配置下发给 Chubby 集群中其他的副本节点。</p>
<h1 id="Zookeeper"><a href="#Zookeeper" class="headerlink" title="Zookeeper"></a>Zookeeper</h1><p>很多人都会说 Zookeeper 是 Chubby 的一个开源实现，这其实是有问题的，它们两者只不过都提供了具有层级结构的命名空间：</p>
<p><img src="/2018/10/07/详解分布式协调服务-ZooKeeper/FE4VibF0SjfNC55Nwr7XreFBdYW0Q4icTgeS4Sicic9Zkwb6na4tyvZNZIvfPiaaDwzd2pUXpUIj5tOZqRUYkWqOEKQ.png" alt="img"></p>
<p>Chubby 和 Zookeeper 从最根本的设计理念上就有着非常明显的不同，在上文中我们已经提到了 Chubby 被设计成一个分布式的锁服务，它能够为分布式系统提供松耦合、粗粒度的分布式锁功能，然而我们并不能依赖于它来做一些重量的数据存储，而 Zookeeper 的论文在摘要中介绍到，它是一个能够为分布式系统提供协调功能的服务：</p>
<blockquote>
<p>In this paper, we describe ZooKeeper, a service for co- ordinating processes of distributed applications.</p>
</blockquote>
<p>Zookeeper 的目的是为客户端构建复杂的协调功能提供简单、高效的核心 API，相比于 Chubby 对外提供已经封装好的更上层的功能，Zookeeper 提供了更抽象的接口以便于客户端自行实现想要完成的功能。</p>
<p><img src="/2018/10/07/详解分布式协调服务-ZooKeeper/FE4VibF0SjfNC55Nwr7XreFBdYW0Q4icTgUYD5VIJiaYolwILeGH8wLoRsic727mvH1JeG0dk4cXt0A2HsofrINLPg.png" alt="img"></p>
<p>Chubby 直接为用户提供封装好的锁和解锁的功能，内部完成了锁的实现，只是将 API 直接暴露给用户，而 Zookeeper 却需要用户自己实现分布式锁；总的来说，使用 Zookeeper 往往需要客户端做更多的事情，但是也享有更多的自由。</p>
<h1 id="技术架构"><a href="#技术架构" class="headerlink" title="技术架构"></a>技术架构</h1><p>与 Chubby 集群中，多个节点只有一个能够对外提供服务不同，Zookeeper 集群中所有的节点都可以对外提供服务，但是集群中的节点也分为主从两种节点，所有的节点都能处理来自客户端的读请求，但是只有主节点才能处理写入操作：</p>
<blockquote>
<p>这里所说的 Zookeeper 集群主从节点实际上分别是 Leader 和 Follower 节点。</p>
</blockquote>
<p><img src="/2018/10/07/详解分布式协调服务-ZooKeeper/FE4VibF0SjfNC55Nwr7XreFBdYW0Q4icTgCQ1kr6OiarIQLJ946WZlOq2gx64l0iaCVVcEW3z14DpMu2ibX0Ud8uniaA.png" alt="img"></p>
<p>客户端使用 Zookeeper 时会连接到集群中的任意节点，所有的节点都能够直接对外提供读操作，但是写操作都会被从节点路由到主节点，由主节点进行处理。</p>
<p>Zookeeper 在设计上提供了以下的两个基本的顺序保证，线性写和先进先出的客户端顺序：</p>
<p><img src="/2018/10/07/详解分布式协调服务-ZooKeeper/FE4VibF0SjfNC55Nwr7XreFBdYW0Q4icTgV3dXOUmNaEzLib3EWJIqGGibLnSE24muXv6wPSvScaeumGGBqQibyTASw.png" alt="img"></p>
<p>其中线性写是指所有更新 Zookeeper 状态的请求都应该按照既定的顺序串行执行；而先进先出的客户端顺序是指，所有客户端发出的请求会按照发出的顺序执行。</p>
<h1 id="Zab-协议"><a href="#Zab-协议" class="headerlink" title="Zab 协议"></a>Zab 协议</h1><p>在我们简单介绍 Zookeeper 的技术架构之后，这一节将谈及 Zookeeper 中的 Zab 协议，Zookeeper 的 Zab 协议是为了解决分布式一致性而设计出的一种协议，它的全称是 Zookeeper 原子广播协议，它能够在发生崩溃时快速恢复服务，达到高可用性。</p>
<p><img src="/2018/10/07/详解分布式协调服务-ZooKeeper/FE4VibF0SjfNC55Nwr7XreFBdYW0Q4icTgT9kzpzicC2QY5iaONychlyTeaVcVqRloDy2Wk5Hsia20sVWPcj7z2Xplw.png" alt="img"></p>
<p>如上一节提到的，客户端在使用 Zookeeper 服务时会随机连接到集群中的一个节点，所有的读请求都会由当前节点处理，而写请求会被路由给主节点并由主节点向其他节点广播事务，与 2PC 非常相似，如果在所有的节点中超过一半都返回成功，那么当前写请求就会被提交。</p>
<p>当主节点崩溃时，其他的 Replica 节点会进入崩溃恢复模式并重新进行选举，Zab 协议必须确保提交已经被 Leader 提交的事务提案，同时舍弃被跳过的提案，这也就是说当前集群中最新 ZXID 最大的服务器会被选举成为 Leader 节点；但是在正式对外提供服务之前，新的 Leader 也需要先与 Follower 中的数据进行同步，确保所有节点拥有完全相同的提案列表。</p>
<p><img src="/2018/10/07/详解分布式协调服务-ZooKeeper/FE4VibF0SjfNC55Nwr7XreFBdYW0Q4icTgeHVia4rKjgtvujiarNR7HeicOvgEfzffY403N0vhx1EpHrAZ7WvXks86w.png" alt="img"></p>
<p>在上面提到 ZXID 其实就是 Zab 协议中设计的事务编号，它是一个 64 位的整数，其中最低的 32 位是一个计数器，每当客户端修改 Zookeeper 集群状态时，Leader 都会以当前 ZXID 值作为提案的编号创建一个新的事务，在这之后会将当前计数器加一；ZXID 中高的 32 位表示当前 Leader 的任期，每当发生崩溃进入恢复模式，集群的 Leader 重新选举之后都会将 epoch 加一。</p>
<h1 id="Zab-和-Paxos"><a href="#Zab-和-Paxos" class="headerlink" title="Zab 和 Paxos"></a>Zab 和 Paxos</h1><p>Zab 和 Paxos 协议在实现上其实有非常多的相似点，例如：</p>
<ul>
<li>主节点会向所有的从节点发出提案；</li>
<li>主节点在接收到一组从节点中 50% 以上节点的确认后，才会认为当前提案被提交了；</li>
<li>Zab 协议中的每一个提案都包含一个 epoch 值，与 Paxos 中的 Ballot 非常相似；</li>
</ul>
<p>因为它们有一些相同的特点，所以有的观点会认为 Zab 是 Paxos 的一个简化版本，但是 Zab 和 Paxos 在设计理念上就有着比较大的不同，两者的主要区别就在于 Zab 主要是为构建高可用的主备系统设计的，而 Paxos 能够帮助工程师搭建具有一致性的状态机系统。</p>
<p>作为一个一致性状态机系统，它能够保证集群中任意一个状态机副本都按照客户端的请求执行了相同顺序的请求，即使来自客户端请求是异步的并且不同客户端的接收同一个请求的顺序不同，集群中的这些副本就是会使用 Paxos 或者它的变种对提案达成一致；在集群运行的过程中，如果主节点出现了错误导致宕机，其他的节点会重新开始进行选举并处理未提交的请求。</p>
<p>但是在类似 Zookeeper 的高可用主备系统中，所有的副本都需要对增量的状态更新顺序达成一致，这些状态更新的变量都是由主节点创建并发送给其他的从节点的，每一个从节点都会严格按照顺序逐一的执行主节点生成的状态更新请求，如果 Zookeeper 集群中的主节点发生了宕机，新的主节点也必须严格按照顺序对请求进行恢复。</p>
<p>总的来说，使用状态更新节点数据的主备系统相比根据客户端请求改变状态的状态机系统对于请求的执行顺序有着更严格的要求。</p>
<h1 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h1><p>这一节会简单介绍 Zookeeper 的一些实现原理，重点会介绍以下几个部分的内容：文件系统、临时 / 持久节点和通知的实现原理。</p>
<h2 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h2><p>了解或者使用 Zookeeper 或者其他分布式协调服务的读者对于使用类似文件系统的方式比较熟悉，与 Unix 中的文件系统份上相似的是，Zookeeper 中也使用文件系统组织系统中存储的资源。</p>
<p><img src="/2018/10/07/详解分布式协调服务-ZooKeeper/FE4VibF0SjfNC55Nwr7XreFBdYW0Q4icTgLk65iczeaxzRHMdIbfb1ayLT8r6UFdPgibRhRQtb95FLMszicc0gWv2DA.png" alt="img"></p>
<p>Zookeeper 中其实并没有文件和文件夹的概念，它只有一个 Znode 的概念，它既能作为容器存储数据，也可以持有其他的 Znode 形成父子关系。</p>
<p>Znode 其实有 <code>PERSISTENT</code>、<code>PERSISTENT_SEQUENTIAL</code>、<code>EPHEMERAL</code> 和 <code>EPHEMERAL_SEQUENTIAL</code> 四种类型，它们是临时与持久、顺序与非顺序两个不同的方向组合成的四种类型。</p>
<p><img src="/2018/10/07/详解分布式协调服务-ZooKeeper/FE4VibF0SjfNC55Nwr7XreFBdYW0Q4icTgibl0xqo7lereZkzibrQHO3sGI0tRrDQ9oqNUlqwq0HdyTXicIdtLd2cOg.png" alt="img"></p>
<p>临时节点是客户端在连接 Zookeeper 时才会保持存在的节点，一旦客户端和服务端之间的连接中断，当前连接持有的所有节点都会被删除，而持久的节点不会随着会话连接的中断而删除，它们需要被客户端主动删除；Zookeeper 中另一种节点的特性就是顺序和非顺序，如果我们使用 Zookeeper 创建了顺序的节点，那么所有节点就会在名字的末尾附加一个序列号，序列号是一个由父节点维护的单调递增计数器。</p>
<h2 id="通知"><a href="#通知" class="headerlink" title="通知"></a>通知</h2><p>常见的通知机制往往都有两种，一种是客户端使用『拉』的方式从服务端获取最新的状态，这种方式获取的状态很有可能都是过期的，需要客户端不断地通过轮训的方式获取服务端最新的状态，另一种方式就是在客户端订阅对应节点后由服务端向所有订阅者推送该节点的变化，相比于客户端主动获取数据的方式，服务端主动推送更能够保证客户端数据的实时性。</p>
<p>作为分布式协调工具的 Zookeeper 就实现了这种服务端主动推送请求的机制，也就是 <code>Watch</code>，当客户端使用 <code>getData</code> 等接口获取 Znode 状态时传入了一个用于处理节点变更的回调，那么服务端就会主动向客户端推送节点的变更：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">byte</span>[] getData(<span class="keyword">final</span> String path, Watcher watcher, Stat stat)</span><br></pre></td></tr></table></figure>
<p>从这个方法中传入的 <code>Watcher</code> 对象实现了相应的 <code>process</code> 方法，每次对应节点出现了状态的改变，<code>WatchManager</code> 都会通过以下的方式调用传入 <code>Watcher</code> 的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Set&lt;Watcher&gt; <span class="title">triggerWatch</span><span class="params">(String path, EventType type, Set&lt;Watcher&gt; supress)</span> </span>&#123;</span><br><span class="line">    WatchedEvent e = <span class="keyword">new</span> WatchedEvent(type, KeeperState.SyncConnected, path);</span><br><span class="line">    Set&lt;Watcher&gt; watchers;</span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="keyword">this</span>) &#123;</span><br><span class="line">        watchers = watchTable.remove(path);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (Watcher w : watchers) &#123;</span><br><span class="line">        w.process(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> watchers;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Zookeeper 中的所有数据其实都是由一个名为 DataTree 的数据结构管理的，所有的读写数据的请求最终都会改变这颗树的内容，在发出读请求时可能会传入 Watcher 注册一个回调函数，而写请求就可能会触发相应的回调，由 WatchManager 通知客户端数据的变化。</p>
<p><img src="/2018/10/07/详解分布式协调服务-ZooKeeper/FE4VibF0SjfNC55Nwr7XreFBdYW0Q4icTgxm5Yy8RVU1JiaQpcUNs68ibbPOAoPhjicAFfsI3gytutlicibianBXaibGJFQ.png" alt="img"></p>
<p>通知机制的实现其实还是比较简单的，通过读请求设置 Watcher 监听事件，写请求在触发事件时就能将通知发送给指定的客户端。</p>
<h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>在 Zookeeper 中一个非常重要的概念就是会话，客户端与服务器之间的任何操作都与 Zookeeper 中会话的概念有关，比如我们再上一节中提到的临时节点生命周期以及通知的机制等等，它们都是基于会话来实现的。</p>
<p>每当客户端与服务端建立连接时，其实创建了一个新的会话，在每一个会话的生命周期中，Zookeeper 会在不同的会话状态之间进行切换，比如说：CONNECTING、CONNECTED、RECONNECTING、RECONNECTED 和 CLOSE 等。</p>
<p><img src="/2018/10/07/详解分布式协调服务-ZooKeeper/FE4VibF0SjfNC55Nwr7XreFBdYW0Q4icTgBknuNvicqze0Wk9Fl0qVrA69M7lzjnDL6mB9B1vGAHWfu5lvxmNiagSw.png" alt="img"></p>
<p>作为 Zookeeper 中最重要的概念之一，每一个 Session 都包含四个基本属性，会话的唯一 ID、会话超时时间、下次会话的超时时间点和表示会话是否被关闭的标记。</p>
<p>SessionTracker 是 Zookeeper 中的会话管理器，它负责所有会话的创建、管理以及清理工作，但是它本身只是一个 Java 的接口，定义了一系列用于管理会话的相关接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">SessionTracker</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">Session</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">long</span> <span class="title">getSessionId</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getTimeout</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">boolean</span> <span class="title">isClosing</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">interface</span> <span class="title">SessionExpirer</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">expire</span><span class="params">(Session session)</span></span>;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">long</span> <span class="title">getServerId</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">createSession</span><span class="params">(<span class="keyword">int</span> sessionTimeout)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">trackSession</span><span class="params">(<span class="keyword">long</span> id, <span class="keyword">int</span> to)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">commitSession</span><span class="params">(<span class="keyword">long</span> id, <span class="keyword">int</span> to)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">touchSession</span><span class="params">(<span class="keyword">long</span> sessionId, <span class="keyword">int</span> sessionTimeout)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setSessionClosing</span><span class="params">(<span class="keyword">long</span> sessionId)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">shutdown</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">removeSession</span><span class="params">(<span class="keyword">long</span> sessionId)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>与其他的长连接一样，Zookeeper 中的会话也需要客户端与服务端之间进行心跳检测，客户端会在超时时间内向服务端发送心跳请求来保证会话不会被服务端关闭，一旦服务端检测到某一个会话长时间没有收到心跳包就会中断当前会话释放服务器上的资源。</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>作为分布式协调服务，Zookeeper 能够为集群提供分布式一致性的保证，我们可以通过 Zookeeper 提供的最基本的 API 组合成更高级的功能：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zookeeper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">create</span><span class="params">(<span class="keyword">final</span> String path, <span class="keyword">byte</span> data[], List&lt;ACL&gt; acl, CreateMode createMode)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">final</span> String path, <span class="keyword">int</span> version)</span> <span class="keyword">throws</span> InterruptedException, KeeperException</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> Stat <span class="title">exists</span><span class="params">(<span class="keyword">final</span> String path, Watcher watcher)</span> <span class="keyword">throws</span> KeeperException, InterruptedException</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">byte</span>[] <span class="title">getData</span><span class="params">(<span class="keyword">final</span> String path, Watcher watcher, Stat stat)</span> <span class="keyword">throws</span> KeeperException, InterruptedException</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> Stat <span class="title">setData</span><span class="params">(<span class="keyword">final</span> String path, <span class="keyword">byte</span> data[], <span class="keyword">int</span> version)</span> <span class="keyword">throws</span> KeeperException, InterruptedException</span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sync</span><span class="params">(<span class="keyword">final</span> String path, VoidCallback cb, Object ctx)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure>
<p>在这一节中，我们将介绍如何在生产环境中使用 Zookeeper 实现发布订阅、命名服务、分布式协调以及分布式锁等功能。</p>
<h3 id="发布订阅"><a href="#发布订阅" class="headerlink" title="发布订阅"></a>发布订阅</h3><p>通过 Zookeeper 进行数据的发布与订阅其实可以说是它提供的最基本功能，它能够允许多个客户端同时订阅某一个节点的变更并在变更发生时执行我们预先设置好的回调函数，在运行时改变服务的配置和行为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ZooKeeper zk = <span class="keyword">new</span> ZooKeeper(<span class="string">"localhost"</span>, <span class="number">3000</span>, <span class="keyword">null</span>);</span><br><span class="line">zk.getData(<span class="string">"/config"</span>, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent watchedEvent)</span> </span>&#123;</span><br><span class="line">        System.out.println(watchedEvent.toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="keyword">null</span>);</span><br><span class="line">zk.setData(<span class="string">"/config"</span>, <span class="string">"draven"</span>.getBytes(), <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// WatchedEvent state:SyncConnected type:NodeDataChanged path:/config</span></span><br></pre></td></tr></table></figure>
<p>发布与订阅是 Zookeeper 提供的一个最基本的功能，它的使用非常的简单，我们可以在 getData 中传入实现 process 方法的 Watcher 对象，在每次改变节点的状态时，process 方法都会被调用，在这个方法中就可以对变更进行响应动态修改一些行为。</p>
<p><img src="/2018/10/07/详解分布式协调服务-ZooKeeper/FE4VibF0SjfNC55Nwr7XreFBdYW0Q4icTgSxTEVkXYajOZVRbEoze94QtA3VJWVDJeZR0bZOTNEut2phSlTeia1PQ.png" alt="img"></p>
<p>通过 Zookeeper 这个中枢，每一个客户端对节点状态的改变都能够推送给节点的订阅者，在发布订阅模型中，Zookeeper 的每一个节点都可以被理解成一个主题，每一个客户端都可以向这个主题推送详细，同时也可以订阅这个主题中的消息；只是 Zookeeper 引入了文件系统的父子层级的概念将发布订阅功能实现得更加复杂。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">enum</span> EventType &#123;</span><br><span class="line">    None(-<span class="number">1</span>),</span><br><span class="line">    NodeCreated(<span class="number">1</span>),</span><br><span class="line">    NodeDeleted(<span class="number">2</span>),</span><br><span class="line">    NodeDataChanged(<span class="number">3</span>),</span><br><span class="line">    NodeChildrenChanged(<span class="number">4</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果我们订阅了一个节点的变更信息，那么该节点的子节点出现数量变更时就会调用 process 方法通知观察者，这也意味着更复杂的实现，同时和专门做发布订阅的中间件相比也没有性能优势，在海量推送的应用场景下，消息队列更能胜任，而 Zookeeper 更适合做一些类似服务配置的动态下发的工作。</p>
<h3 id="命名服务"><a href="#命名服务" class="headerlink" title="命名服务"></a>命名服务</h3><p>除了实现服务配置数据的发布与订阅功能，Zookeeper 还能帮助分布式系统实现命名服务，在每一个分布式系统中，客户端应用都有根据指定名字获取资源、服务器地址的需求，在这时就要求整个集群中的全部服务有着唯一的名字。</p>
<p>在大型分布式系统中，有两件事情非常常见，一是不同服务之间的可能拥有相同的名字，另一个是同一个服务可能会在集群中部署很多的节点，Zookeeper 就可以通过文件系统和顺序节点解决这两个问题。</p>
<p><img src="/2018/10/07/详解分布式协调服务-ZooKeeper/FE4VibF0SjfNC55Nwr7XreFBdYW0Q4icTgf97vCKocKsSdxkFHv6dSkVVBib7FBptgKSk3iaZw2GnPB9JILiarMttsg.png" alt="img"></p>
<p>在上图中，我们创建了两个命名空间，/infrastructure 和 /business 分别代表架构和业务部门，两个部门中都拥有名为 metrics 的服务，而业务部门的 metrics 服务也部署了两个节点，在这里使用了命名空间和顺序节点解决唯一标志符的问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ZooKeeper zk = <span class="keyword">new</span> ZooKeeper(<span class="string">"localhost"</span>, <span class="number">3000</span>, <span class="keyword">null</span>);</span><br><span class="line">zk.create(<span class="string">"/metrics"</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL);</span><br><span class="line">zk.create(<span class="string">"/metrics"</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL);</span><br><span class="line">List children = zk.getChildren(<span class="string">"/"</span>, <span class="keyword">null</span>);</span><br><span class="line">System.out.println(children);</span><br><span class="line"></span><br><span class="line"><span class="comment">// [metrics0000000001, metrics0000000002]</span></span><br></pre></td></tr></table></figure>
<p>使用上面的代码就能在 Zookeeper 中创建两个带序号的 metrics 节点，分别是 metrics0000000001 和 metrics0000000002，也就是说 Zookeeper 帮助我们保证了节点的唯一性，让我们能通过唯一的 ID 查找到对应服务的地址等信息。</p>
<h3 id="协调分布式事务"><a href="#协调分布式事务" class="headerlink" title="协调分布式事务"></a>协调分布式事务</h3><p>Zookeeper 的另一个作用就是担任分布式事务中的协调者角色，在之前介绍 分布式事务 的文章中我们曾经介绍过分布式事务本质上都是通过 2PC 来实现的，在两阶段提交中就需要一个协调者负责协调分布式事务的执行。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ZooKeeper zk = <span class="keyword">new</span> ZooKeeper(<span class="string">"localhost"</span>, <span class="number">3000</span>, <span class="keyword">null</span>);</span><br><span class="line">String path = zk.create(<span class="string">"/transfer/tx"</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL);</span><br><span class="line"></span><br><span class="line">List ops = Arrays.asList(</span><br><span class="line">        Op.create(path + <span class="string">"/cohort"</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL),</span><br><span class="line">        Op.create(path + <span class="string">"/cohort"</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL),</span><br><span class="line">        Op.create(path + <span class="string">"/cohort"</span>, <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>], ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.PERSISTENT_SEQUENTIAL)</span><br><span class="line">);</span><br><span class="line">zk.multi(ops);</span><br></pre></td></tr></table></figure>
<p>当前节点作为协调者在每次发起分布式事务时都会创建一个 /transfer/tx 的持久顺序节点，然后为几个事务的参与者创建几个空白的节点，事务的参与者在收到事务时会向这些空白的节点中写入信息并监听这些节点中的内容。</p>
<p><img src="/2018/10/07/详解分布式协调服务-ZooKeeper/FE4VibF0SjfNC55Nwr7XreFBdYW0Q4icTgZTwRH2NybwfgpMTD8gOUAT2k6NAG2MAE3UEpJTLic29Zu6HO1iac7dsA.png" alt="img"></p>
<p>所有的事务参与者会向当前节点中写入提交或者终止，一旦当前的节点改变了事务的状态，其他节点就会得到通知，如果出现一个写入终止的节点，所有的节点就会回滚对分布式事务进行回滚。</p>
<p>使用 Zookeeper 实现强一致性的分布式事务其实还是一件比较困难的事情，一方面是因为强一致性的分布式事务本身就有一定的复杂性，另一方面就是 Zookeeper 为了给客户端提供更多的自由，对外暴露的都是比较基础的 API，对它们进行组装实现复杂的分布式事务还是比较麻烦的，对于如何使用 Zookeeper 实现分布式事务，我们可以在 ZooKeeper Recipes and Solutions 一文中找到更为详细的内容。</p>
<h3 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h3><p>在数据库中，锁的概念其实是非常重要的，常见的关系型数据库就会对排他锁和共享锁进行支持，而 Zookeeper 提供的 API 也可以让我们非常简单的实现分布式锁。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ZooKeeper zk = <span class="keyword">new</span> ZooKeeper(<span class="string">"localhost"</span>, <span class="number">3000</span>, <span class="keyword">null</span>);</span><br><span class="line"><span class="keyword">final</span> String resource = <span class="string">"/resource"</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> String lockNumber = zk</span><br><span class="line">        .create(<span class="string">"/resource/lock-"</span>, <span class="keyword">null</span>, ZooDefs.Ids.OPEN_ACL_UNSAFE, CreateMode.EPHEMERAL_SEQUENTIAL);</span><br><span class="line"></span><br><span class="line">List&lt;String&gt; locks = zk.getChildren(resource, <span class="keyword">false</span>, <span class="keyword">null</span>);</span><br><span class="line">Collections.sort(locks);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (locks.get(<span class="number">0</span>).equals(lockNumber.replace(<span class="string">"/resource/"</span>, <span class="string">""</span>))) &#123;</span><br><span class="line">    System.out.println(<span class="string">"Acquire Lock"</span>);</span><br><span class="line">    zk.delete(lockNumber, <span class="number">0</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    zk.getChildren(resource, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent watchedEvent)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ZooKeeper zk = <span class="keyword">new</span> ZooKeeper(<span class="string">"localhost"</span>, <span class="number">3000</span>, <span class="keyword">null</span>);</span><br><span class="line">                List locks = zk.getChildren(resource, <span class="keyword">null</span>, <span class="keyword">null</span>);</span><br><span class="line">                Collections.sort(locks);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (locks.get(<span class="number">0</span>).equals(lockNumber.replace(<span class="string">"/resource/"</span>, <span class="string">""</span>))) &#123;</span><br><span class="line">                    System.out.println(<span class="string">"Acquire Lock"</span>);</span><br><span class="line">                    zk.delete(lockNumber, <span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="keyword">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果多个服务同时要对某个资源进行修改，就可以使用上述的代码来实现分布式锁，假设集群中存在一个资源 /resource，几个服务需要通过分布式锁保证资源只能同时被一个节点使用，我们可以用创建临时顺序节点的方式实现分布式锁；当我们创建临时节点后，通过 getChildren 获取当前等待锁的全部节点，如果当前节点是所有节点中序号最小的就得到了当前资源的使用权限，在对资源进行处理后，就可以通过删除 /resource/lock-00000000x 来释放锁，如果当前节点不是最小值，就会注册一个 Watcher 等待 /resource 子节点的变化直到当前节点的序列号成为最小值。</p>
<p>上述代码在集群中争夺同一资源的服务器特别多的情况下会出现羊群效应，每次子节点改变时都会通知当前节点，造成资源的浪费，我们其实可以将 getChildren 换成 getData，让当前节点只监听前一个节点的删除事件：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer number = Integer.parseInt(lockNumber.replace(<span class="string">"/resource/lock-"</span>, <span class="string">""</span>)) + <span class="number">1</span>;</span><br><span class="line">String previousLock = <span class="string">"/resource/lock-"</span> + String.format(<span class="string">"%010d"</span>, number);</span><br><span class="line"></span><br><span class="line">zk.getData(previousLock, <span class="keyword">new</span> Watcher() &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(WatchedEvent watchedEvent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (watchedEvent.getType() == Event.EventType.NodeDeleted) &#123;</span><br><span class="line">                System.out.println(<span class="string">"Acquire Lock"</span>);</span><br><span class="line">                ZooKeeper zk = <span class="keyword">new</span> ZooKeeper(<span class="string">"localhost"</span>, <span class="number">3000</span>, <span class="keyword">null</span>);</span><br><span class="line">                zk.delete(lockNumber, <span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>
<p>在新的分布式锁实现中，我们减少了每一个服务需要关注的事情，只让它们监听需要关心的数据变更，减少 Zookeeper 发送不必要的通知影响效率。</p>
<p><img src="/2018/10/07/详解分布式协调服务-ZooKeeper/FE4VibF0SjfNC55Nwr7XreFBdYW0Q4icTgicZX3XWkhCibYLhs7bo1XoibRfNoS05Rrhk76Yowaw8RMlv3X0MXA5BfA.png" alt="img"></p>
<p>分布式锁作为分布式系统中比较重要的一个工具，确实有着比较多的应用，同时也有非常多的实现方式，除了 Zookeeper 之外，其他服务例如 Redis 和 etcd 也能够实现分布式锁，为分布式系统的构建提供支持，不过在这篇文章中就不展开介绍了。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>我们在这篇文章中简单介绍了 Google 的分布式锁服务 Chubby 以及同样能够提供分布式锁服务功能的 Zookeeper。</p>
<p>作为分布式协调服务，Zookeeper 的应用场景非常广泛，不仅能够用于服务配置的下发、命名服务、协调分布式事务以及分布式锁，还能够用来实现微服务治理中的服务注册以及发现等功能，这些其实都源于 Zookeeper 能够提供高可用的分布式协调服务，能够为客户端提供分布式一致性的支持，在后面的文章中作者也会介绍其他用于分布式协调的服务。</p>
<h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://zookeeper.apache.org/doc/r3.4.4/recipes.html" target="_blank" rel="noopener">https://zookeeper.apache.org/doc/r3.4.4/recipes.html</a></p>
<p><a href="https://static.googleusercontent.com/media/research.google.com/en//archive/chubby-osdi06.pdf" target="_blank" rel="noopener">https://static.googleusercontent.com/media/research.google.com/en//archive/chubby-osdi06.pdf</a></p>
]]></content>
      <categories>
        <category>架构设计</category>
      </categories>
      <tags>
        <tag>zookeeper</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title>Shadowsocks服务器代理</title>
    <url>/2018/07/13/Shadowsocks%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文讲述如何安装配置Shadowsocks Server，并支持通过代理方式（http/sock v4/5)连接因特网.</p>
<p><img src="/2018/07/13/Shadowsocks服务器代理/1531388960253.png" alt="1531388960253"></p>
<p>这里主要阐述服务端通过proxy连接的解决方案，shadowsocks server直连网络的方式比较简单，网上这块资料也比较齐全，不做过多描述，</p>
<h2 id="ssserver代理安装配置"><a href="#ssserver代理安装配置" class="headerlink" title="ssserver代理安装配置"></a>ssserver代理安装配置</h2><h3 id="安装Shadowsocks-Server"><a href="#安装Shadowsocks-Server" class="headerlink" title="安装Shadowsocks Server"></a>安装Shadowsocks Server</h3><p>参考<a href="https://github.com/shadowsocks/shadowsocks/wiki/Install-Shadowsocks-Server-on-Windows" target="_blank" rel="noopener">Install Shadowsocks Server on Windows</a>，</p>
<p>客户端的安装方式参考<a href="https://github.com/shadowsocks/shadowsocks/wiki/Ports-and-Clients#windows" target="_blank" rel="noopener">Shadowsocks Client安装</a>, 这里主要解决服务端通过代理解决shadowsocks server无法直连网络的问题，客户端这块不做过多描述。</p>
<h3 id="更新代理脚本"><a href="#更新代理脚本" class="headerlink" title="更新代理脚本"></a>更新代理脚本</h3><p>​    这个问题的解决方案来自github的一个issue <a href="https://github.com/shadowsocks/shadowsocks/issues/771" target="_blank" rel="noopener">通过猴子补丁的方式给ss添加了一个前置代理的功能</a></p>
<p>有兴趣深入了解的推荐star一下该作者的项目<a href="https://github.com/falseen/PySocket" target="_blank" rel="noopener">PySocket</a></p>
<p>​    在上述步骤安装了python版的Shadowsocks Server之后，通过猴子补丁的方式给给 shadowsocks 服务端添加前置代理的功能（原则上也适用于客户端），支持 http、socks4、socks5 代理。并且通过 hook 的方式去掉了ss的dns查询，ss在接收到数据之后会直接把域名和请求一起发给代理。</p>
<p><strong>使用的时候修改 socket.py 文件中 PROXY_TYPE、PROXY_ADDR、PROXY_PORT 等字段为你的代理地址，然后把 socket.py 文件放到 shadowsocks 根目录即可生效，不用修改任何源码</strong>。</p>
<p>通过pip安装的话要放到ssserver所在的目录，一般都在 <code>Python27\Scripts</code> （python27上验证OK）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install win_inet_pton --proxy=http://your-proxy-host:your-proxy-port</span><br><span class="line">pip install shadowsocks --proxy=http://your-proxy-host:your-proxy-port</span><br></pre></td></tr></table></figure>
<p>配置部分：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># the proxy type. SOCKS5 SOCKS4 HTTP</span></span><br><span class="line">PROXY_TYPE = SOCKS5</span><br><span class="line">PROXY_ADDR = <span class="string">"127.0.0.1"</span></span><br><span class="line">PROXY_PORT = <span class="number">1080</span></span><br></pre></td></tr></table></figure>
<p><strong>socket.py</strong> 文末部分，因为我选择 hook shadowsocks的代码，实际使用时在del module会报异常，因此将文末修改为</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hook shadowsocks's code remove the dns req</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_resolve</span><span class="params">(self,  hostname, callback)</span>:</span></span><br><span class="line">    callback((hostname, hostname), <span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">modules_list = [<span class="string">"shadowsocks.common"</span>, <span class="string">"shadowsocks.shell"</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> modules_list:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">       <span class="keyword">del</span> sys.modules[x]</span><br><span class="line">    <span class="keyword">except</span> KeyError:</span><br><span class="line">       <span class="keyword">print</span> <span class="string">"Error: key"</span>, x, <span class="string">"not found"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> shadowsocks.asyncdns</span><br><span class="line">shadowsocks.asyncdns.DNSResolver.resolve = new_resolve</span><br></pre></td></tr></table></figure>
<p>如果不想 hook shadowsocks的代码的话，把文件中末尾的代码删除即可，原文件代码末尾如下: </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hook shadowsocks's code remove the dns req</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_resolve</span><span class="params">(self,  hostname, callback)</span>:</span></span><br><span class="line">    callback((hostname, hostname), <span class="keyword">None</span>)</span><br><span class="line"></span><br><span class="line">modules_list = [<span class="string">"shadowsocks.common"</span>, <span class="string">"shadowsocks.shell"</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> modules_list:</span><br><span class="line">    <span class="keyword">del</span> sys.modules[x]</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> shadowsocks.asyncdns</span><br><span class="line">shadowsocks.asyncdns.DNSResolver.resolve = new_resolve</span><br></pre></td></tr></table></figure>
<h3 id="ssserver配置"><a href="#ssserver配置" class="headerlink" title="ssserver配置"></a>ssserver配置</h3><p>参考<a href="https://github.com/shadowsocks/shadowsocks/wiki/Configuration-via-Config-File" target="_blank" rel="noopener">Configuration via Config File</a></p>
<p>创建一个配置文件 <code>/etc/shadowsocks.json</code>. 示例如下:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"server"</span>:<span class="string">"my_server_ip"</span>,</span><br><span class="line">    <span class="attr">"server_port"</span>:<span class="number">8388</span>,</span><br><span class="line">    <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">    <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">    <span class="attr">"password"</span>:<span class="string">"mypassword"</span>,</span><br><span class="line">    <span class="attr">"timeout"</span>:<span class="number">300</span>,</span><br><span class="line">    <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">    <span class="attr">"fast_open"</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>配置文件字段详解:</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Explanation</th>
</tr>
</thead>
<tbody>
<tr>
<td>server</td>
<td>ssserver监听地址，0.0.0.0监听本地所有网卡地址</td>
</tr>
<tr>
<td>server_port</td>
<td>ssserver服务端口</td>
</tr>
<tr>
<td>local_address</td>
<td>本地监听地址</td>
</tr>
<tr>
<td>local_port</td>
<td>本地端口</td>
</tr>
<tr>
<td>password</td>
<td>用于加密的密码</td>
</tr>
<tr>
<td>timeout</td>
<td>超时设置，单位秒，不建议太长</td>
</tr>
<tr>
<td>method</td>
<td>默认: “aes-256-cfb”, 详见 <a href="https://github.com/shadowsocks/shadowsocks/wiki/Encryption" target="_blank" rel="noopener">Encryption</a></td>
</tr>
<tr>
<td>fast_open</td>
<td>是否使用 <a href="https://github.com/shadowsocks/shadowsocks/wiki/TCP-Fast-Open" target="_blank" rel="noopener">TCP_FASTOPEN</a>, true / false</td>
</tr>
<tr>
<td>workers</td>
<td>worker数量, 仅在Unix/Linux生效</td>
</tr>
</tbody>
</table>
<p>在控制台中执行，日志直接显示在控制台，首次测试使用建议该方式，可通过ctrl+C退出:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json</span><br></pre></td></tr></table></figure>
<p>后台静默执行:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 启动服务</span><br><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br><span class="line"># 停止服务</span><br><span class="line">ssserver -c /etc/shadowsocks.json -d stop</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>developer tools</category>
      </categories>
      <tags>
        <tag>Shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title>docker碎片拾遗</title>
    <url>/2018/06/24/docker%E7%A2%8E%E7%89%87%E6%8B%BE%E9%81%97/</url>
    <content><![CDATA[<h2 id="进入shell环境"><a href="#进入shell环境" class="headerlink" title="进入shell环境"></a>进入shell环境</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker exec -it &lt;container&gt; bash</span><br></pre></td></tr></table></figure>
<p>and run</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install vim</span><br></pre></td></tr></table></figure>
<h2 id="！不要去改系统配置"><a href="#！不要去改系统配置" class="headerlink" title="！不要去改系统配置"></a>！不要去改系统配置</h2><p>正常运行的docker先保存一下docker的ID，之后不要去改下面的配置，否则docker会更新为新的那个，导致数据丢失</p>
<p><img src="/2018/06/24/docker碎片拾遗/1529818594236.png" alt="1529818594236"></p>
<h2 id="docker指令"><a href="#docker指令" class="headerlink" title="docker指令"></a>docker指令</h2><h3 id="1、启动docker"><a href="#1、启动docker" class="headerlink" title="1、启动docker"></a>1、启动docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -it --privileged=<span class="literal">true</span> -v /home/oracle/download:/usr/Downloads centos /bin/bash</span><br></pre></td></tr></table></figure>
<h3 id="2、查看当前docker运行"><a href="#2、查看当前docker运行" class="headerlink" title="2、查看当前docker运行"></a>2、查看当前docker运行</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>
<h3 id="3、提交docker"><a href="#3、提交docker" class="headerlink" title="3、提交docker"></a>3、提交docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker commit 9f73a02d5ef0[CONTAINER ID] docker.io/ubuntu[REPOSITORY]</span><br></pre></td></tr></table></figure>
<h3 id="4、查看容器的root用户密码"><a href="#4、查看容器的root用户密码" class="headerlink" title="4、查看容器的root用户密码"></a>4、查看容器的root用户密码</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs &lt;容器名orID&gt; 2&gt;&amp;1 | grep <span class="string">'^User: '</span> | tail -n1</span><br></pre></td></tr></table></figure>
<p>因为docker容器启动时的root用户的密码是随机分配的。所以，通过这种方式就可以得到redmine容器的root用户的密码了。</p>
<h3 id="5、查看容器日志"><a href="#5、查看容器日志" class="headerlink" title="5、查看容器日志"></a>5、查看容器日志</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker logs -f &lt;容器名orID&gt;</span><br></pre></td></tr></table></figure>
<h3 id="6、查看正在运行的容器"><a href="#6、查看正在运行的容器" class="headerlink" title="6、查看正在运行的容器"></a>6、查看正在运行的容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line">docker ps -a为查看所有的容器，包括已经停止的。</span><br></pre></td></tr></table></figure>
<h3 id="7、删除所有容器"><a href="#7、删除所有容器" class="headerlink" title="7、删除所有容器"></a>7、删除所有容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rm $(docker ps -a -q)</span><br></pre></td></tr></table></figure>
<h3 id="8、删除单个容器"><a href="#8、删除单个容器" class="headerlink" title="8、删除单个容器"></a>8、删除单个容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rm &lt;容器名orID&gt;</span><br></pre></td></tr></table></figure>
<h3 id="9、停止、启动、杀死一个容器"><a href="#9、停止、启动、杀死一个容器" class="headerlink" title="9、停止、启动、杀死一个容器"></a>9、停止、启动、杀死一个容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop &lt;容器名orID&gt;</span><br><span class="line"></span><br><span class="line">docker start &lt;容器名orID&gt;</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">kill</span> &lt;容器名orID&gt;</span><br></pre></td></tr></table></figure>
<h3 id="10、查看所有镜像"><a href="#10、查看所有镜像" class="headerlink" title="10、查看所有镜像"></a>10、查看所有镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>
<h3 id="11、删除所有镜像"><a href="#11、删除所有镜像" class="headerlink" title="11、删除所有镜像"></a>11、删除所有镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rmi $(docker images | grep none | awk <span class="string">'&#123;print $3&#125;'</span> | sort -r)</span><br></pre></td></tr></table></figure>
<h3 id="12、运行一个新容器，同时为它命名、端口映射、文件夹映射。以redmine镜像为例"><a href="#12、运行一个新容器，同时为它命名、端口映射、文件夹映射。以redmine镜像为例" class="headerlink" title="12、运行一个新容器，同时为它命名、端口映射、文件夹映射。以redmine镜像为例"></a>12、运行一个新容器，同时为它命名、端口映射、文件夹映射。以redmine镜像为例</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --name redmine -p 9003:80 -p 9023:22 -d -v /var/redmine/files:/redmine/files -v   /var/redmine/mysql:/var/lib/mysql sameersbn/redmine</span><br></pre></td></tr></table></figure>
<h3 id="13、一个容器连接到另一个容器"><a href="#13、一个容器连接到另一个容器" class="headerlink" title="13、一个容器连接到另一个容器"></a>13、一个容器连接到另一个容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -i -t --name sonar -d -link mmysql:db  tpires/sonar-server</span><br></pre></td></tr></table></figure>
<p>sonar容器连接到mmysql容器，并将mmysql容器重命名为db。这样，sonar容器就可以使用db的相关的环境变量了。</p>
<h3 id="14、拉取镜像"><a href="#14、拉取镜像" class="headerlink" title="14、拉取镜像"></a>14、拉取镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker pull &lt;镜像名:tag&gt;</span><br></pre></td></tr></table></figure>
<p>如docker pull sameersbn/redmine:latest</p>
<p>当需要把一台机器上的镜像迁移到另一台机器的时候，需要保存镜像与加载镜像。</p>
<p>机器a<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker save busybox-1 &gt; /home/save.tar</span><br></pre></td></tr></table></figure></p>
<p>使用scp将save.tar拷到机器b上，然后：<br><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker load &lt; /home/save.tar</span><br></pre></td></tr></table></figure></p>
<h3 id="15、构建自己的镜像"><a href="#15、构建自己的镜像" class="headerlink" title="15、构建自己的镜像"></a>15、构建自己的镜像</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t &lt;镜像名&gt; &lt;Dockerfile路径&gt;</span><br></pre></td></tr></table></figure>
<p>如Dockerfile在当前路径：docker build -t xx/gitlab .</p>
]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Xshell显示X11图形化界面</title>
    <url>/2018/06/17/Xshell%E6%98%BE%E7%A4%BAX11%E5%9B%BE%E5%BD%A2%E5%8C%96%E7%95%8C%E9%9D%A2/</url>
    <content><![CDATA[<h3 id="安装Xmanager全家桶"><a href="#安装Xmanager全家桶" class="headerlink" title="安装Xmanager全家桶"></a>安装Xmanager全家桶</h3><p>使用前检查一下是否安装了Xshell、Xstart、Xmanager - Passive，正常安装Xmanager全家桶应该是全的</p>
<p><img src="/2018/06/17/Xshell显示X11图形化界面/1529248519265.png" alt="1529248519265"></p>
<h3 id="使用XStart登录"><a href="#使用XStart登录" class="headerlink" title="使用XStart登录"></a>使用XStart登录</h3><p>通过SSH的方式尝试登录VPS，</p>
<p><img src="/2018/06/17/Xshell显示X11图形化界面/1529248581921.png" alt="1529248581921"></p>
<p>正常成功后会这样提示</p>
<p><img src="/2018/06/17/Xshell显示X11图形化界面/1529248649118.png" alt="1529248649118"></p>
<p>当然更多的可能是弹出个错误框提示“已拒绝X11转移申请”，这是因为默认的VPS一般不会安装XAUTH导致，</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install xorg-x11-xauth</span><br></pre></td></tr></table></figure>
<p>这里可能会缺一些其他组件，见招拆招即可，谷歌或者百度解决</p>
<h3 id="设置XSHELL"><a href="#设置XSHELL" class="headerlink" title="设置XSHELL"></a>设置XSHELL</h3><ol>
<li>打开会话对话框</li>
<li>选择要激活X11转发功能的会话</li>
<li>点击[属性]按钮</li>
<li>在[类别]中选择[连接-&gt;SSH-&gt;隧道]</li>
<li>选择[转发X11连接到]</li>
<li>如用户的PC上已<a href="http://www.xshellcn.com/xmg_column/xm-az.html" target="_blank" rel="noopener">安装Xmanager</a>，请勾选[Xmanager(M)]。如使用其他PC X 服务器，请选择[X DISPLAY(D)]后输入适用的DISPLAY </li>
<li>点击[确定] </li>
</ol>
<p><img src="/2018/06/17/Xshell显示X11图形化界面/1529248873947.png" alt="1529248873947"></p>
<h3 id="检查当前监听端口"><a href="#检查当前监听端口" class="headerlink" title="检查当前监听端口"></a>检查当前监听端口</h3><p><strong>IMPORTANT</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo netstat -tnlp|grep sshd</span><br></pre></td></tr></table></figure>
<p><img src="/2018/06/17/Xshell显示X11图形化界面/1529249219317.png" alt="1529249219317"></p>
<p>注意上面监听的6010，Xmanager会把X DISPLAY选项自动查找为<a href="http://www.xshellcn.com/" target="_blank" rel="noopener">Xshell</a>。其他 PC X 服务器程序需由用户进行设置。如果PC X 服务器使用TCP 6000号端口，DISPLAY设置为“localhost:0.0” ，也就是说，X11的<strong>偏移量是6000</strong>，因此下面需要设置一个最终要的DISPLAY的值<strong>:10.0</strong>，如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export DISPLAY=:10.0</span><br><span class="line">或者</span><br><span class="line">export DISPLAY=localhost:10.0</span><br></pre></td></tr></table></figure>
<h3 id="测试X11-DISPLAY"><a href="#测试X11-DISPLAY" class="headerlink" title="测试X11 DISPLAY"></a>测试X11 DISPLAY</h3><p>如果本地已经有需要X11界面展示的应用，直接运行查看即可，如无，推荐使用xclock检查是否生效[以下步骤不是必须，自行选择]</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install xclock</span><br></pre></td></tr></table></figure>
<p>这里可能出现乱码之类的，可能需要安装x窗口相关包，和字体显示包 </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum groupinstall "X Window System" "Fonts"</span><br></pre></td></tr></table></figure>
<p>然后执行xclock，看是否在PC桌面显示对应的时钟图形。如果xclock出现<a href="https://access.redhat.com/solutions/409033" target="_blank" rel="noopener">Warning: Missing charsets in String to FontSet conversion</a>，可以执行下面执行，然后重新执行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export LC_ALL=C</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>X11 Display</tag>
        <tag>XSHELL</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加Gitalk评论插件</title>
    <url>/2018/06/01/Hexo%E6%B7%BB%E5%8A%A0Gitalk%E8%AF%84%E8%AE%BA%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><a href="https://github.com/gitalk/gitalk" target="_blank" rel="noopener">Gitalk</a>提供了两种方式：</p>
<ul>
<li>直接引入</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://cdn.jsdelivr.net/npm/gitalk@1/dist/gitalk.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- or --&gt;</span><br><span class="line"></span><br><span class="line">&lt;link rel=<span class="string">"stylesheet"</span> href=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.css"</span>&gt;</span><br><span class="line">&lt;script src=<span class="string">"https://unpkg.com/gitalk/dist/gitalk.min.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<ul>
<li>npm安装</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i --save gitalk</span><br><span class="line">import &apos;gitalk/dist/gitalk.css&apos;</span><br><span class="line">import Gitalk from &apos;gitalk&apos;</span><br></pre></td></tr></table></figure>
<p>相对来说第一种会更简单。</p>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>A <strong>GitHub Application</strong> is needed for authorization, if you don’t have one, <a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">Click here to register</a> a new one.</p>
<p><strong>Note:</strong> You must specify the website domain url in the <code>Authorization callback URL</code> field.</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const gitalk = new Gitalk(&#123;</span><br><span class="line">  clientID: &apos;GitHub Application Client ID&apos;,</span><br><span class="line">  clientSecret: &apos;GitHub Application Client Secret&apos;,</span><br><span class="line">  repo: &apos;GitHub repo&apos;,</span><br><span class="line">  owner: &apos;GitHub repo owner&apos;,</span><br><span class="line">  admin: [&apos;GitHub repo owner and collaborators, only these guys can initialize github issues&apos;],</span><br><span class="line">  id: location.pathname,      // Ensure uniqueness and length less than 50</span><br><span class="line">  distractionFreeMode: false  // Facebook-like distraction free mode</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">gitalk.render(&apos;gitalk-container&apos;)</span><br></pre></td></tr></table></figure>
<h3 id="修改主题文件"><a href="#修改主题文件" class="headerlink" title="修改主题文件"></a>修改主题文件</h3><ul>
<li>这里以next主题为例，参考<a href="https://github.com/iissnan/hexo-theme-next/pull/1814/files#diff-9f7e5af0c701ee066fc50dcf184a48ec" target="_blank" rel="noopener">Feature: Add Gitalk Support</a></li>
</ul>
<p>不同的主题目录和模板引擎不同，可以自己修改, 修改next主题配置文件<code>_config.yml</code>，添加字段：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Gitalk</span><br><span class="line"># more info please open https://github.com/gitalk/gitalk</span><br><span class="line">gitalk:</span><br><span class="line">  enable: false</span><br><span class="line">  clientID:</span><br><span class="line">  clientSecret:</span><br><span class="line">  repo:</span><br><span class="line">  owner:</span><br><span class="line">  admin: # support multiple admins split with comma, e.g. foo,bar</span><br><span class="line">  pagerDirection: first</span><br></pre></td></tr></table></figure>
<ul>
<li>找到<code>next/layout/_third-party/comments</code>文件夹，新建<code>gitalk.swig</code>文件，代码如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% if not (theme.duoshuo and theme.duoshuo.shortname) and not theme.duoshuo_shortname %&#125;</span><br><span class="line">  &#123;% if theme.gitalk.enable %&#125;</span><br><span class="line">    &#123;% if page.comments %&#125;</span><br><span class="line">      &lt;script src=&quot;https://unpkg.com/gitalk/dist/gitalk.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">      &lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line">        const gitalk = new Gitalk(&#123;</span><br><span class="line">          clientID: &apos;&#123;&#123;theme.gitalk.clientID&#125;&#125;&apos;,</span><br><span class="line">          clientSecret: &apos;&#123;&#123;theme.gitalk.clientSecret&#125;&#125;&apos;,</span><br><span class="line">          repo: &apos;&#123;&#123;theme.gitalk.repo&#125;&#125;&apos;,</span><br><span class="line">          owner: &apos;&#123;&#123;theme.gitalk.owner&#125;&#125;&apos;,</span><br><span class="line">          admin: &apos;&#123;&#123;theme.gitalk.admin&#125;&#125;&apos;.split(&apos;,&apos;),</span><br><span class="line">          pagerDirection: &apos;&#123;&#123;theme.gitalk.pagerDirection&#125;&#125;&apos;,</span><br><span class="line">          // facebook-like distraction free mode</span><br><span class="line">          distractionFreeMode: false</span><br><span class="line">        &#125;)</span><br><span class="line">        gitalk.render(&apos;gitalk-container&apos;)</span><br><span class="line">      &lt;/script&gt;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>同目录下在<code>index.swig</code>文件末尾添加：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% include &apos;gitalk.swig&apos; %&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>下步搞起，<code>next/layout/_partials</code>文件夹下，找到<code>comments.swig</code>文件，添加代码：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% elseif theme.gitalk.enable %&#125;</span><br><span class="line">      &lt;div id=&quot;gitalk-container&quot;&gt;&lt;/div&gt;</span><br><span class="line">      &lt;link rel=&quot;stylesheet&quot; href=&quot;https://unpkg.com/gitalk/dist/gitalk.css&quot;&gt;</span><br></pre></td></tr></table></figure>
<p> 因为github限制了issue的提交title长度不能超过50，可能会遇到<a href="https://github.com/gitalk/gitalk/issues/102" target="_blank" rel="noopener">Error: Validation Failed</a> 按照这里的方案，使用MD5的方式降低长度即可</p>
<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><ol>
<li><a href="https://www.jianshu.com/p/9be29ed2f4b7" target="_blank" rel="noopener">Hexo添加Gitalk评论插件</a></li>
<li><a href="http://theme-next.iissnan.com/third-party-services.html" target="_blank" rel="noopener">Next 第三方服务集成</a></li>
<li><a href="https://github.com/gitalk/gitalk/wiki/%E5%9C%A8hexo-next%E4%B8%BB%E9%A2%98%E4%B8%8A%E4%BD%BF%E7%94%A8gitalk" target="_blank" rel="noopener">在hexo next主题上使用gitalk</a></li>
</ol>
]]></content>
      <categories>
        <category>Hexo使用攻略</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo集成Algolia搜索插件</title>
    <url>/2018/06/01/Hexo%E9%9B%86%E6%88%90Algolia%E6%90%9C%E7%B4%A2%E6%8F%92%E4%BB%B6/</url>
    <content><![CDATA[<p><strong><em>本文转载自</em></strong><a href="http://zouzeir.xyz/2017/01/16/Hexo%E9%9B%86%E6%88%90Algolia%E6%90%9C%E7%B4%A2%E6%8F%92%E4%BB%B6/" target="_blank" rel="noopener">Hexo集成Algolia搜索插件</a></p>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>个人博客自从2016年10月21日搭建以来，迄今为止已经有49 篇日志了。虽然不是很多篇文章，但是搜索站内的内容已经力不从心了。</p>
<p>搜索了网上很多关于“Hexo 站内搜索”的内容，发现大部分都是使用<a href="https://swiftype.com/" target="_blank" rel="noopener">Swiftype</a>，但是发现Swiftype 搜索只有15 天的免费，之后就需要开始收费了。</p>
<p>因为只是为自己的<a href="https://jobbym.github.io/" target="_blank" rel="noopener">个人博客 </a>使用站内搜索，所以希望找一个类似与Swiftype 的，但是<strong>免费的</strong>站内搜索。最后找了Algolia 这个免费版本替代。</p>
<p>下面简单说下搭建过程：</p>
<h2 id="搭建过程"><a href="#搭建过程" class="headerlink" title="搭建过程"></a>搭建过程</h2><h3 id="前提条件"><a href="#前提条件" class="headerlink" title="前提条件"></a>前提条件</h3><p>如果你的Next 版本为5.1.0 之后，可以使用Algolia。如果不是，请先升级到5.1.0 版本之后</p>
<h3 id="一个Algolia-帐号"><a href="#一个Algolia-帐号" class="headerlink" title="一个Algolia 帐号"></a>一个Algolia 帐号</h3><p><a href="https://www.algolia.com/users/sign_in" target="_blank" rel="noopener">官网地址</a> 使用GitHub 或Google 帐号登录。<br><a href="http://zouzeir.xyz/2017/01/16/Hexo%E9%9B%86%E6%88%90Algolia%E6%90%9C%E7%B4%A2%E6%8F%92%E4%BB%B6/algolia_login.jpg" target="_blank" rel="noopener"><img src="/2018/06/01/Hexo集成Algolia搜索插件/algolia_login.jpg" alt="img"></a></p>
<h3 id="创建Index"><a href="#创建Index" class="headerlink" title="创建Index"></a>创建Index</h3><p>进入<a href="https://www.algolia.com/dashboard" target="_blank" rel="noopener">Dashboard</a>，<br>选择<a href="https://www.algolia.com/explorer#?index=getstarted_actors" target="_blank" rel="noopener">Indices</a> 新建一个Index。<br><a href="http://zouzeir.xyz/2017/01/16/Hexo%E9%9B%86%E6%88%90Algolia%E6%90%9C%E7%B4%A2%E6%8F%92%E4%BB%B6/algolia_explorer.jpg" target="_blank" rel="noopener"><img src="/2018/06/01/Hexo集成Algolia搜索插件/algolia_explorer.jpg" alt="img"></a><br><a href="http://zouzeir.xyz/2017/01/16/Hexo%E9%9B%86%E6%88%90Algolia%E6%90%9C%E7%B4%A2%E6%8F%92%E4%BB%B6/algolia_newindex.jpg" target="_blank" rel="noopener"><img src="/2018/06/01/Hexo集成Algolia搜索插件/algolia_newindex.jpg" alt="img"></a></p>
<h3 id="安装Hexo-Algolia"><a href="#安装Hexo-Algolia" class="headerlink" title="安装Hexo Algolia"></a>安装Hexo Algolia</h3><p>Index 创建完成后，此时Index 为包含任何数据。需要安装Hexo Aloglia 扩展，这个扩展的功能是搜集站点的内容并通过API 发送给Aloglia。前往站点根目录，执行命令安装：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-algolia</span><br></pre></td></tr></table></figure>
<h3 id="获取Key，更新站点信配置"><a href="#获取Key，更新站点信配置" class="headerlink" title="获取Key，更新站点信配置"></a>获取Key，更新站点信配置</h3><p>点击Dashborad 左侧的<a href="https://www.algolia.com/api-keys" target="_blank" rel="noopener">API Keys</a>，其中的信息接下来将会被用到。<br><a href="http://zouzeir.xyz/2017/01/16/Hexo%E9%9B%86%E6%88%90Algolia%E6%90%9C%E7%B4%A2%E6%8F%92%E4%BB%B6/algolia_apikeys.jpg" target="_blank" rel="noopener"><img src="/2018/06/01/Hexo集成Algolia搜索插件/algolia_apikeys.jpg" alt="img"></a><br>包括<code>Application ID</code> 、<code>Search-Only API Key</code> 和 <code>Admin API Key</code>，其中<code>Admin API Key</code>需要保密保存</p>
<p>编辑站点配置文件，新增以下配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">algolia:</span><br><span class="line">  applicationID: &apos;SV57WJ53OS&apos;</span><br><span class="line">  apiKey: &apos;c7d219504e44d09ab55f5f7a195fce98&apos;</span><br><span class="line">  adminApiKey: &apos;adminApiKey&apos;</span><br><span class="line">  indexName: &apos;dev_jobbymsblog&apos;</span><br><span class="line">  chunkSize: 5000</span><br></pre></td></tr></table></figure>
<h3 id="更新Index"><a href="#更新Index" class="headerlink" title="更新Index"></a>更新Index</h3><p>当配置完成，在站点根目录下执行<code>hexo algolia</code> 来更新Index。请注意观察命令的输出。<br><a href="http://zouzeir.xyz/2017/01/16/Hexo%E9%9B%86%E6%88%90Algolia%E6%90%9C%E7%B4%A2%E6%8F%92%E4%BB%B6/algolia_hexo_algolia.jpg" target="_blank" rel="noopener"><img src="/2018/06/01/Hexo集成Algolia搜索插件/algolia_hexo_algolia.jpg" alt="img"></a></p>
<h3 id="主题集成"><a href="#主题集成" class="headerlink" title="主题集成"></a>主题集成</h3><p>更改主题配置文件，找到Algolia Search 配置部分：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Algolia Search</span><br><span class="line">algolia_search:</span><br><span class="line">  enable: false</span><br><span class="line">  hits:</span><br><span class="line">    per_page: 10</span><br><span class="line">  labels:</span><br><span class="line">    input_placeholder: Search for Posts</span><br><span class="line">    hits_empty: &quot;We didn&apos;t find any results for the search: $&#123;query&#125;&quot;</span><br><span class="line">    hits_stats: &quot;$&#123;hits&#125; results found in $&#123;time&#125; ms&quot;</span><br></pre></td></tr></table></figure>
<p>将<code>enable</code> 改为<code>true</code> 即可，根据需要你可以调整<code>labels</code> 中的文本。</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. 点击搜索结果，结果跳转地址为：</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Cannot GET /undefined/</span><br></pre></td></tr></table></figure>
<p>按照<a href="https://github.com/iissnan/hexo-theme-next/issues/1084" target="_blank" rel="noopener">5.1.0使用algolia搜索问题</a>这里进行的处理，在这里总结一下：</p>
<ul>
<li>因为hexo-aloglia 的作者没有把<code>post.path</code> 加入index，所以<code>data.path</code> 是<code>undefined</code>。</li>
<li>遇到这个问题，首先运行<code>npm uninstll hexo-algolia</code> 卸载之前的版本，再运行<code>npm install hexo-algolia@0.2.0 --save</code>,最后运行<code>hexo algolia</code> 命令重新index 就可以了。</li>
</ul>
<h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><ol>
<li><a href="https://github.com/iissnan/hexo-theme-next/wiki/Swiftype%E7%AB%99%E5%86%85%E6%90%9C%E7%B4%A2" target="_blank" rel="noopener">Swiftype站内搜索</a></li>
<li><a href="http://theme-next.iissnan.com/third-party-services.html" target="_blank" rel="noopener">Next 第三方服务集成</a></li>
</ol>
]]></content>
      <categories>
        <category>Hexo使用攻略</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>Algolia</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux xmr-stak挖矿教程</title>
    <url>/2018/05/27/Linux-xmr-stak%E6%8C%96%E7%9F%BF%E6%95%99%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="在Linux上编译-xmr-stak"><a href="#在Linux上编译-xmr-stak" class="headerlink" title="在Linux上编译 xmr-stak"></a>在Linux上编译 <strong>xmr-stak</strong></h1><h2 id="Install-Dependencies"><a href="#Install-Dependencies" class="headerlink" title="Install Dependencies"></a>Install Dependencies</h2><h3 id="AMD-APP-SDK-3-0-only-needed-to-use-AMD-GPUs"><a href="#AMD-APP-SDK-3-0-only-needed-to-use-AMD-GPUs" class="headerlink" title="AMD APP SDK 3.0 (only needed to use AMD GPUs)"></a>AMD APP SDK 3.0 (only needed to use AMD GPUs)</h3><ul>
<li>download and install the latest version from <a href="https://www.dropbox.com/sh/mpg882ekirnsfa7/AADWz5X-TgVdsmWt0QwMgTWLa/AMD-APP-SDKInstaller-v3.0.130.136-GA-linux64.tar.bz2?dl=0" target="_blank" rel="noopener">https://www.dropbox.com/sh/mpg882ekirnsfa7/AADWz5X-TgVdsmWt0QwMgTWLa/AMD-APP-SDKInstaller-v3.0.130.136-GA-linux64.tar.bz2?dl=0</a><br>(do not wonder why it is a link to a dropbox but AMD has removed the SDK downloads, see <a href="https://community.amd.com/thread/228059" target="_blank" rel="noopener">https://community.amd.com/thread/228059</a>)</li>
</ul>
<h3 id="Cuda-8-0-only-needed-to-use-NVIDIA-GPUs"><a href="#Cuda-8-0-only-needed-to-use-NVIDIA-GPUs" class="headerlink" title="Cuda 8.0+ (only needed to use NVIDIA GPUs)"></a>Cuda 8.0+ (only needed to use NVIDIA GPUs)</h3><ul>
<li>download and install <a href="https://developer.nvidia.com/cuda-downloads" target="_blank" rel="noopener">https://developer.nvidia.com/cuda-downloads</a></li>
<li>for minimal install choose <code>Custom installation options</code> during the install and select<ul>
<li>CUDA/Develpment</li>
<li>CUDA/Runtime</li>
<li>Driver components</li>
</ul>
</li>
</ul>
<h2 id="GNU-Compiler"><a href="#GNU-Compiler" class="headerlink" title="GNU Compiler"></a>GNU Compiler</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Ubuntu / Debian</span><br><span class="line">sudo apt install libmicrohttpd-dev libssl-dev cmake build-essential libhwloc-dev</span><br><span class="line">git clone https://github.com/fireice-uk/xmr-stak.git</span><br><span class="line">mkdir xmr-stak/build</span><br><span class="line">cd xmr-stak/build</span><br><span class="line">cmake ..</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"># Arch</span><br><span class="line">sudo pacman -S --needed base-devel hwloc openssl cmake libmicrohttpd</span><br><span class="line">git clone https://github.com/fireice-uk/xmr-stak.git</span><br><span class="line">mkdir xmr-stak/build</span><br><span class="line">cd xmr-stak/build</span><br><span class="line">cmake ..</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"># Fedora</span><br><span class="line">sudo dnf install gcc gcc-c++ hwloc-devel libmicrohttpd-devel libstdc++-static make openssl-devel cmake</span><br><span class="line">git clone https://github.com/fireice-uk/xmr-stak.git</span><br><span class="line">mkdir xmr-stak/build</span><br><span class="line">cd xmr-stak/build</span><br><span class="line">cmake ..</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"># CentOS</span><br><span class="line">sudo yum install centos-release-scl epel-release</span><br><span class="line">sudo yum install cmake3 devtoolset-4-gcc* hwloc-devel libmicrohttpd-devel openssl-devel make</span><br><span class="line">scl enable devtoolset-4 bash</span><br><span class="line">git clone https://github.com/fireice-uk/xmr-stak.git</span><br><span class="line">mkdir xmr-stak/build</span><br><span class="line">cd xmr-stak/build</span><br><span class="line">cmake3 ..</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"># Ubuntu 14.04</span><br><span class="line">sudo add-apt-repository ppa:ubuntu-toolchain-r/test</span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt install gcc-5 g++-5 make</span><br><span class="line">sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 1 --slave /usr/bin/g++ g++ /usr/bin/g++-5</span><br><span class="line">curl -L http://www.cmake.org/files/v3.4/cmake-3.4.1.tar.gz | tar -xvzf - -C /tmp/</span><br><span class="line">cd /tmp/cmake-3.4.1/ &amp;&amp; ./configure &amp;&amp; make &amp;&amp; sudo make install &amp;&amp; cd -</span><br><span class="line">sudo update-alternatives --install /usr/bin/cmake cmake /usr/local/bin/cmake 1 --force</span><br><span class="line">sudo apt install libmicrohttpd-dev libssl-dev libhwloc-dev</span><br><span class="line">git clone https://github.com/fireice-uk/xmr-stak.git</span><br><span class="line">mkdir xmr-stak/build</span><br><span class="line">cd xmr-stak/build</span><br><span class="line">cmake ..</span><br><span class="line">make install</span><br><span class="line"></span><br><span class="line"># TinyCore Linux 8.x</span><br><span class="line"># TinyCore is 32-bit only, but there is an x86-64 port, known as &quot;Pure 64,&quot;</span><br><span class="line"># hosted on the TinyCore home page, and it works well.</span><br><span class="line"># Beware that huge page support is not enabled in the kernel distributed</span><br><span class="line"># with Pure 64.  Consider http://wiki.tinycorelinux.net/wiki:custom_kernel</span><br><span class="line"># Note that as of yet there are no distro packages for microhttpd or hwloc.</span><br><span class="line"># hwloc is easy enough to install manually though, shown below.</span><br><span class="line"># Also note that only CPU mining has been tested on this platform, thus the</span><br><span class="line"># disabling of CUDA and OpenCL shown below.</span><br><span class="line">tce-load -iw openssl-dev.tcz cmake.tcz make.tcz gcc.tcz git.tcz \</span><br><span class="line">             glibc_base-dev.tcz linux-4.8.1_api_headers.tcz \</span><br><span class="line">             glibc_add_lib.tcz</span><br><span class="line">wget https://www.open-mpi.org/software/hwloc/v1.11/downloads/hwloc-1.11.8.tar.gz</span><br><span class="line">tar xzvf hwloc-1.11.8.tar.gz</span><br><span class="line">cd hwloc-1.11.8</span><br><span class="line">./configure --prefix=/usr/local</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">cd ..</span><br><span class="line">git clone http://github.com/fireice-uk/xmr-stak</span><br><span class="line">cd xmr-stak</span><br><span class="line">mkdir build</span><br><span class="line">cd build</span><br><span class="line">CC=gcc cmake .. -DCUDA_ENABLE=OFF \</span><br><span class="line">                -DOpenCL_ENABLE=OFF \</span><br><span class="line">                -DMICROHTTPD_ENABLE=OFF</span><br><span class="line">make install</span><br></pre></td></tr></table></figure>
<ul>
<li><p>g++ version 5.1 or higher is required for full C++11 support.<br>If you want to compile the binary without installing libraries / compiler or just compile binary for some other distribution, please check the <a href="scripts/build_xmr-stak_docker/build_xmr-stak_docker.sh">build_xmr-stak_docker.sh script</a>.</p>
</li>
<li><p>Some newer gcc versions are not supported by CUDA (e.g. Ubuntu 17.10). It will require installing gcc 5 but you can avoid changing defaults.</p>
</li>
</ul>
<p>In that case you can force CUDA to use an older compiler in the following way:<br><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmake -DCUDA_HOST_COMPILER=/usr/bin/gcc-5 ..</span><br></pre></td></tr></table></figure></p>
<h3 id="To-do-a-generic-and-static-build-for-a-system-without-gcc-5-1"><a href="#To-do-a-generic-and-static-build-for-a-system-without-gcc-5-1" class="headerlink" title="To do a generic and static build for a system without gcc 5.1+"></a>To do a generic and static build for a system without gcc 5.1+</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cmake -DCMAKE_LINK_STATIC=ON -DXMR-STAK_COMPILE=generic .</span><br><span class="line">make install</span><br><span class="line">cd bin\Release</span><br><span class="line">copy C:\xmr-stak-dep\openssl\bin\* .</span><br></pre></td></tr></table></figure>
<p>Note - cmake caches variables, so if you want to do a dynamic build later you need to specify ‘-DCMAKE_LINK_STATIC=OFF’</p>
<p>Reference <a href="https://github.com/fireice-uk/xmr-stak" target="_blank" rel="noopener">xmr-stak</a></p>
]]></content>
      <categories>
        <category>block-chain</category>
      </categories>
      <tags>
        <tag>xmr</tag>
      </tags>
  </entry>
  <entry>
    <title>Day 1: Bower —— 管理你的客户端依赖关系</title>
    <url>/2018/05/26/Day-1-Bower-%E2%80%94%E2%80%94-%E7%AE%A1%E7%90%86%E4%BD%A0%E7%9A%84%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%BE%9D%E8%B5%96%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<p><em>编者注：我们发现了比较有趣的系列文章<a href="http://segmentfault.com/a/1190000000349384" target="_blank" rel="noopener">《30天学习30种新技术》</a>，准备翻译，一天一篇更新，年终礼包。以下是第一天技术的译文。</em></p>
<hr>
<p>我决定将第一天的学习主题选为<a href="http://bower.io/" target="_blank" rel="noopener">Bower</a>。</p>
<p><img src="/2018/05/26/Day-1-Bower-——-管理你的客户端依赖关系/bVbC4e.jpg" alt="img-1"></p>
<hr>
<h2 id="什么是Bower？"><a href="#什么是Bower？" class="headerlink" title="什么是Bower？"></a>什么是Bower？</h2><p>Bower是一个客户端技术的软件包管理器，它可用于搜索、安装和卸载如JavaScript、HTML、CSS之类的网络资源。其他一些建立在Bower基础之上的开发工具，如YeoMan和Grunt，这个会在以后的文章中介绍。</p>
<hr>
<h2 id="为什么我会在意Bower？"><a href="#为什么我会在意Bower？" class="headerlink" title="为什么我会在意Bower？"></a>为什么我会在意Bower？</h2><ol>
<li>节省时间。为什么要学习Bower的第一个原因，就是它会为你节省寻找客户端的依赖关系的时间。每次我需要安装jQuery的时候，我都需要去jQuery网站下载包或使用CDN版本。但是有了Bower，你只需要输入一个命令，jquery就会安装在本地计算机上，你不需要去记版本号之类的东西，你也可以通过Bower的info命令去查看任意库的信息。</li>
<li>脱机工作。Bower会在用户主目录下创建一个.bower的文件夹，这个文件夹会下载所有的资源、并安装一个软件包使它们可以离线使用。如果你熟悉Java，Bower即是一个类似于现在流行的Maven构建系统的<em>.m2</em>仓库。每次你下载任何资源库都将被安装在两个文件夹中 —— 一个在的应用程序文件夹，另一个在用户主目录下的.bower文件夹。因此，下一次你需要这个仓库时，就会用那个用户主目录下.bower中的版本。</li>
<li>可以很容易地展现客户端的依赖关系。你可以创建一个名为bower.json的文件，在这个文件里你可以指定所有客户端的依赖关系，任何时候你需要弄清楚你正在使用哪些库，你可以参考这个文件。</li>
<li>让升级变得简单。假设某个库的新版本发布了一个重要的安全修补程序，为了安装新版本，你只需要运行一个命令，bower会自动更新所有有关新版本的依赖关系。</li>
</ol>
<hr>
<h2 id="前提准备"><a href="#前提准备" class="headerlink" title="前提准备"></a>前提准备</h2><p>为了安装bower，你首先需要安装如下文件：</p>
<blockquote>
<ol>
<li>Node：下载最新版本的<a href="http://nodejs.org/" target="_blank" rel="noopener">node.js</a></li>
<li>NPM：<a href="http://npmjs.org/" target="_blank" rel="noopener">NPM</a>是node程序包管理器。它是捆绑在nodejs的安装程序上的，所以一旦你已经安装了node，NPM也就安装好了。</li>
<li>Git：你需要从git仓库获取一些代码包。</li>
</ol>
</blockquote>
<hr>
<h2 id="安装Bower"><a href="#安装Bower" class="headerlink" title="安装Bower"></a>安装Bower</h2><p>一旦你已经安装了上面所说的所有必要文件，键入以下命令安装Bower：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g bower</span><br></pre></td></tr></table></figure>
<p>这行命令是Bower的全局安装，<code>-g</code> 操作表示全局。</p>
<hr>
<h2 id="开始使用Bower"><a href="#开始使用Bower" class="headerlink" title="开始使用Bower"></a>开始使用Bower</h2><p>安装完bower之后就可以使用所有的bower命令了。可以键入<code>help</code> 命令来查看bower可以完成那些操作，如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower help</span><br><span class="line">Usage:</span><br><span class="line"></span><br><span class="line">    bower &lt;command&gt; [&lt;args&gt;] [&lt;options&gt;]</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line"></span><br><span class="line">    cache                   Manage bower cache</span><br><span class="line">    help                    Display help information about Bower</span><br><span class="line">    home                    Opens a package homepage into your favorite browser</span><br><span class="line">    info                    Info of a particular package</span><br><span class="line">    init                    Interactively create a bower.json file</span><br><span class="line">    install                 Install a package locally</span><br><span class="line">    link                    Symlink a package folder</span><br><span class="line">    list                    List local packages</span><br><span class="line">    lookup                  Look up a package URL by name</span><br><span class="line">    prune                   Removes local extraneous packages</span><br><span class="line">    register                Register a package</span><br><span class="line">    search                  Search for a package by name</span><br><span class="line">    update                  Update a local package</span><br><span class="line">    uninstall               Remove a local package</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line"></span><br><span class="line">    -f, --force             Makes various commands more forceful</span><br><span class="line">    -j, --json              Output consumable JSON</span><br><span class="line">    -l, --log-level         What level of logs to report</span><br><span class="line">    -o, --offline           Do not hit the network</span><br><span class="line">    -q, --quiet             Only output important information</span><br><span class="line">    -s, --silent            Do not output anything, besides errors</span><br><span class="line">    -V, --verbose           Makes output more verbose</span><br><span class="line">    --allow-root            Allows running commands as root</span><br></pre></td></tr></table></figure>
<h3 id="包的安装"><a href="#包的安装" class="headerlink" title="包的安装"></a>包的安装</h3><p>Bower是一个软件包管理器，所以你可以在应用程序中用它来安装新的软件包。举例来看一下来如何使用Bower安装JQuery，在你想要安装该包的地方创建一个新的文件夹，键入如下命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower install jquery</span><br></pre></td></tr></table></figure>
<p>上述命令完成以后，你会在你刚才创建的目录下看到一个<code>bower_components</code>的文件夹，其中目录如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ tree bower_components/</span><br><span class="line">bower_components/</span><br><span class="line">└── jquery</span><br><span class="line">    ├── README.md</span><br><span class="line">    ├── bower.json</span><br><span class="line">    ├── component.json</span><br><span class="line">    ├── composer.json</span><br><span class="line">    ├── jquery-migrate.js</span><br><span class="line">    ├── jquery-migrate.min.js</span><br><span class="line">    ├── jquery.js</span><br><span class="line">    ├── jquery.min.js</span><br><span class="line">    ├── jquery.min.map</span><br><span class="line">    └── package.json</span><br><span class="line"></span><br><span class="line">1 directory, 10 files</span><br></pre></td></tr></table></figure>
<h3 id="包的使用"><a href="#包的使用" class="headerlink" title="包的使用"></a>包的使用</h3><p>现在就可以在应用程序中使用jQuery包了，在jQuery里创建一个简单的html5文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Learning Bower&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;button&gt;Animate Me!!&lt;/button&gt;</span><br><span class="line">&lt;div style=&quot;background:red;height:100px;width:100px;position:absolute;&quot;&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;bower_components/jquery/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class="line"></span><br><span class="line">    $(document).ready(function()&#123;</span><br><span class="line">        $(&quot;button&quot;).click(function()&#123;</span><br><span class="line">            $(&quot;div&quot;).animate(&#123;left:&apos;250px&apos;&#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>正如你所看到的，你刚刚引用jquery.min.js文件，现阶段完成。</p>
<h3 id="所有包的列表"><a href="#所有包的列表" class="headerlink" title="所有包的列表"></a>所有包的列表</h3><p>如果你想找出所有安装在应用程序中的包，可以使用list命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower list</span><br><span class="line">bower check-new     Checking for new versions of the project dependencies..</span><br><span class="line">blog /Users/shekhargulati/day1/blog</span><br><span class="line">└── jquery#2.0.3 extraneous</span><br></pre></td></tr></table></figure>
<h3 id="包的搜索"><a href="#包的搜索" class="headerlink" title="包的搜索"></a>包的搜索</h3><p>假如你想在你的应用程序中使用twitter的bootstrap框架，但你不确定包的名字，这时你可以使用<code>search</code> 命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower search bootstrap</span><br><span class="line">Search results:</span><br><span class="line"></span><br><span class="line">    bootstrap git://github.com/twbs/bootstrap.git</span><br><span class="line">    angular-bootstrap git://github.com/angular-ui/bootstrap-bower.git</span><br><span class="line">    sass-bootstrap git://github.com/jlong/sass-twitter-bootstrap.git</span><br></pre></td></tr></table></figure>
<h3 id="包的信息"><a href="#包的信息" class="headerlink" title="包的信息"></a>包的信息</h3><p>如果你想看到关于特定的包的信息，可以使用<code>info</code> 命令来查看该包的所有信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower info bootstrap</span><br><span class="line">bower bootstrap#*           not-cached git://github.com/twbs/bootstrap.git#*</span><br><span class="line">bower bootstrap#*              resolve git://github.com/twbs/bootstrap.git#*</span><br><span class="line">bower bootstrap#*             download https://github.com/twbs/bootstrap/archive/v3.0.0.tar.gz</span><br><span class="line">bower bootstrap#*              extract archive.tar.gz</span><br><span class="line">bower bootstrap#*             resolved git://github.com/twbs/bootstrap.git#3.0.0</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  name: &apos;bootstrap&apos;,</span><br><span class="line">  version: &apos;3.0.0&apos;,</span><br><span class="line">  main: [</span><br><span class="line">    &apos;./dist/js/bootstrap.js&apos;,</span><br><span class="line">    &apos;./dist/css/bootstrap.css&apos;</span><br><span class="line">  ],</span><br><span class="line">  ignore: [</span><br><span class="line">    &apos;**/.*&apos;</span><br><span class="line">  ],</span><br><span class="line">  dependencies: &#123;</span><br><span class="line">    jquery: &apos;&gt;= 1.9.0&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  homepage: &apos;https://github.com/twbs/bootstrap&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Available versions:</span><br><span class="line">  - 3.0.0</span><br><span class="line">  - 3.0.0-rc1</span><br><span class="line">  - 3.0.0-rc.2</span><br><span class="line">  - 2.3.2</span><br><span class="line"> .....</span><br></pre></td></tr></table></figure>
<p>如果你想得到单个包的信息，也可以使用<code>info</code> 命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower info bootstrap#3.0.0</span><br><span class="line">bower bootstrap#3.0.0           cached git://github.com/twbs/bootstrap.git#3.0.0</span><br><span class="line">bower bootstrap#3.0.0         validate 3.0.0 against git://github.com/twbs/bootstrap.git#3.0.0</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  name: &apos;bootstrap&apos;,</span><br><span class="line">  version: &apos;3.0.0&apos;,</span><br><span class="line">  main: [</span><br><span class="line">    &apos;./dist/js/bootstrap.js&apos;,</span><br><span class="line">    &apos;./dist/css/bootstrap.css&apos;</span><br><span class="line">  ],</span><br><span class="line">  ignore: [</span><br><span class="line">    &apos;**/.*&apos;</span><br><span class="line">  ],</span><br><span class="line">  dependencies: &#123;</span><br><span class="line">    jquery: &apos;&gt;= 1.9.0&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  homepage: &apos;https://github.com/twbs/bootstrap&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="包的卸载"><a href="#包的卸载" class="headerlink" title="包的卸载"></a>包的卸载</h3><p>卸载包可以使用<code>uninstall</code> 命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower uninstall jquery</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="bower-json文件的使用"><a href="#bower-json文件的使用" class="headerlink" title="bower.json文件的使用"></a>bower.json文件的使用</h2><p>bower.json文件的使用可以让包的安装更容易，你可以在应用程序的根目录下创建一个名为“bower.json”的文件，并定义它的依赖关系。使用<code>bower init</code> 命令来创建bower.json文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower init</span><br><span class="line">[?] name: blog</span><br><span class="line">[?] version: 0.0.1</span><br><span class="line">[?] description:</span><br><span class="line">[?] main file:</span><br><span class="line">[?] keywords:</span><br><span class="line">[?] authors: Shekhar Gulati &lt;shekhargulati84@gmail.com&gt;</span><br><span class="line">[?] license: MIT</span><br><span class="line">[?] homepage:</span><br><span class="line">[?] set currently installed components as dependencies? Yes</span><br><span class="line">[?] add commonly ignored files to ignore list? Yes</span><br><span class="line">[?] would you like to mark this package as private which prevents it from being accidentally published to the registry? No</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  name: &apos;blog&apos;,</span><br><span class="line">  version: &apos;0.0.1&apos;,</span><br><span class="line">  authors: [</span><br><span class="line">    &apos;Shekhar Gulati &lt;shekhargulati84@gmail.com&gt;&apos;</span><br><span class="line">  ],</span><br><span class="line">  license: &apos;MIT&apos;,</span><br><span class="line">  ignore: [</span><br><span class="line">    &apos;**/.*&apos;,</span><br><span class="line">    &apos;node_modules&apos;,</span><br><span class="line">    &apos;bower_components&apos;,</span><br><span class="line">    &apos;test&apos;,</span><br><span class="line">    &apos;tests&apos;</span><br><span class="line">  ],</span><br><span class="line">  dependencies: &#123;</span><br><span class="line">    jquery: &apos;~2.0.3&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[?] Looks good? Yes</span><br></pre></td></tr></table></figure>
<p>可以查看该文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;blog&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.1&quot;,</span><br><span class="line">  &quot;authors&quot;: [</span><br><span class="line">    &quot;Shekhar Gulati &lt;shekhargulati84@gmail.com&gt;&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">  &quot;ignore&quot;: [</span><br><span class="line">    &quot;**/.*&quot;,</span><br><span class="line">    &quot;node_modules&quot;,</span><br><span class="line">    &quot;bower_components&quot;,</span><br><span class="line">    &quot;test&quot;,</span><br><span class="line">    &quot;tests&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;jquery&quot;: &quot;~2.0.3&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意看，它已经加入了jQuery依赖关系。</p>
<p>现在假设也想用twitter bootstrap，我们可以用下面的命令安装twitter bootstrap并更新bower.json文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ bower install bootstrap --save</span><br></pre></td></tr></table></figure>
<p>它会自动安装最新版本的bootstrap并更新bower.json文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;blog&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;0.0.1&quot;,</span><br><span class="line">  &quot;authors&quot;: [</span><br><span class="line">    &quot;Shekhar Gulati &lt;shekhargulati84@gmail.com&gt;&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;license&quot;: &quot;MIT&quot;,</span><br><span class="line">  &quot;ignore&quot;: [</span><br><span class="line">    &quot;**/.*&quot;,</span><br><span class="line">    &quot;node_modules&quot;,</span><br><span class="line">    &quot;bower_components&quot;,</span><br><span class="line">    &quot;test&quot;,</span><br><span class="line">    &quot;tests&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;jquery&quot;: &quot;~2.0.3&quot;,</span><br><span class="line">    &quot;bootstrap&quot;: &quot;~3.0.0&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这就是今天的学习，希望能让你对bower有个足够的了解，最好可以自己尝试一下。</p>
<hr>
<p>原文 <a href="https://www.openshift.com/blogs/day-1-bower-manage-your-client-side-dependencies" target="_blank" rel="noopener">Day 1: Bower–Manage Your Client Side Dependencies</a><br>翻译 <a href="http://segmentfault.com/" target="_blank" rel="noopener">SegmentFault</a></p>
]]></content>
      <categories>
        <category>30天学习30种新技术系列</category>
      </categories>
      <tags>
        <tag>30天学习30种新技术系列</tag>
      </tags>
  </entry>
  <entry>
    <title>30天学习30种新技术系列</title>
    <url>/2018/05/26/30-%E5%A4%A9%E5%AD%A6%E4%B9%A0-30-%E7%A7%8D%E6%96%B0%E6%8A%80%E6%9C%AF%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<p>编者注：我们发现了比较有趣的系列文章《30 天学习 30 种新技术》，准备翻译，一天一篇更新，年终礼包。以下是译文，英文标题表示还未翻译，附原文链接；中文标题表示已翻译，附译文链接。</p>
<p>更新：全系列已经全部翻译完成。</p>
<blockquote>
<p>让你 30 天学习 30 种新技术，你会觉得这是挑战吗？</p>
</blockquote>
<p><img src="/2018/05/26/30-天学习-30-种新技术系列/bvbc2p.jpg" alt="img-1"></p>
<p>我已经接受了挑战，我会在一个月的时间内每天学习一门新技术，挑战开始于 2013 年 10 月 29 日。下面就是我将要学习的新技术的列表，我会把每天学到的内容写出来。在我每天正常的工作之后，我会花几个小时学习一门新技术，再用一小时将今天学到的写在博客上。这项活动的目的是熟悉许多在开发者社区所使用的新技术。</p>
<p>我会把重点放在 JavaScript 及其相关技术的学习上，当然也会去了解一下像 Java 这类我比较感兴趣的其他技术。我也可能会在一门技术上花费好几天的时间，但我每次会选择和这门技术相关的不同的主题来讲。只要是有意义的，我将尽量展示它如何与 OpenShift 工作，我希望这是一次充满乐趣并能学到很多东西的旅程。（你可以在 twitter 上<a href="https://twitter.com/shekhargulati" target="_blank" rel="noopener">follow 我</a>）</p>
<p>下边是学习列表：</p>
<ul>
<li>2013.10.29 - <a href="https://segmentfault.com/a/1190000000349555" target="_blank" rel="noopener">Day 1: Bower —— 管理你的客户端依赖关系</a></li>
<li>2013.10.30 - <a href="http://segmentfault.com/a/1190000000350125" target="_blank" rel="noopener">Day 2: AngularJS —— 对 AngularJS 的初步认识</a></li>
<li>2013.10.31 - <a href="http://segmentfault.com/a/1190000000351512" target="_blank" rel="noopener">Day 3: Flask —— 使用 Python 和 OpenShift 进行即时 Web 开发</a></li>
<li>2013.11.01 - <a href="http://segmentfault.com/a/1190000000352163" target="_blank" rel="noopener">Day 4: PredictionIO —— 如何创建一个博客推荐器</a></li>
<li>2013.11.02 - <a href="http://segmentfault.com/a/1190000000353114" target="_blank" rel="noopener">Day 5: GruntJS —— 重复乏味的工作总会有人做（反正我不做）</a></li>
<li>2013.11.03 - <a href="http://segmentfault.com/a/1190000000353272" target="_blank" rel="noopener">Day 6: 在 Java 虚拟机上使用 Grails 进行快速 Web 开发</a></li>
<li>2013.11.04 - <a href="http://segmentfault.com/a/1190000000354555" target="_blank" rel="noopener">Day 7: GruntJS 在线重载 提升生产率至新境界</a></li>
<li>2013.11.05 - <a href="http://segmentfault.com/a/1190000000355181" target="_blank" rel="noopener">Day 8: Harp.JS —— 现代静态 Web 服务器</a></li>
<li>2013.11.06 - <a href="http://segmentfault.com/a/1190000000356029" target="_blank" rel="noopener">Day 9: TextBlob —— 对文本进行情感分析</a></li>
<li>2013.11.07 - <a href="http://segmentfault.com/a/1190000000357272" target="_blank" rel="noopener">Day 10: PhoneGap —— 开发手机应用如此简单</a></li>
<li>2013.11.08 - <a href="http://segmentfault.com/a/1190000000358740" target="_blank" rel="noopener">Day 11: AeroGear 推送服务器：使应用的通知推送变得简单</a></li>
<li>2013.11.09 - <a href="http://segmentfault.com/a/1190000000358809" target="_blank" rel="noopener">Day 12: OpenCV —— Java 开发者的人脸检测</a></li>
<li>2013.11.10 - <a href="http://segmentfault.com/a/1190000000359827" target="_blank" rel="noopener">Day 13: Dropwizard —— 非常棒的 Java REST 服务器栈</a></li>
<li>2013.11.11 - <a href="http://segmentfault.com/a/1190000000360213" target="_blank" rel="noopener">Day14：使用斯坦福 NER 软件包实现你自己的命名实体识别器（Named Entity Recognition，NER）</a></li>
<li>2013.11.12 - <a href="http://segmentfault.com/a/1190000000361440" target="_blank" rel="noopener">Day 15：Meteor —— 从零开始创建一个 Web 应用</a></li>
<li>2013.11.13 - <a href="http://segmentfault.com/a/1190000000362182" target="_blank" rel="noopener">Day 16: Goose Extractor —— 好用的文章提取工具</a></li>
<li>2013.11.14 - <a href="http://segmentfault.com/a/1190000000363485" target="_blank" rel="noopener">Day 17: 使用 JBoss Forge 和 OpenShift 构建部署 JAVA EE 6 应用</a></li>
<li>2013.11.15 - <a href="http://segmentfault.com/a/1190000000363797" target="_blank" rel="noopener">Day 18: BoilerPipe —— Java开发者的文章提取工具</a></li>
<li>2013.11.16 - <a href="http://segmentfault.com/a/1190000000365519" target="_blank" rel="noopener">Day 19: EmberJS 入门指南</a></li>
<li>2013.11.17 - <a href="http://segmentfault.com/a/1190000000365547" target="_blank" rel="noopener">Day 20: 斯坦福CoreNLP —— 用 Java 给 Twitter 情感分析</a></li>
<li>2013.11.18 - <a href="http://segmentfault.com/a/1190000000366923" target="_blank" rel="noopener">Day 21：Docker 入门教程</a></li>
<li>2013.11.19 - <a href="http://segmentfault.com/a/1190000000367441" target="_blank" rel="noopener">Day 22： 使用 Spring、MongoDB 和 AngularJS 开发单页面应用</a></li>
<li>2013.11.20 - <a href="http://segmentfault.com/a/1190000000368066" target="_blank" rel="noopener">Day 23： 使用 TimelineJS 构建精美的时间轴</a></li>
<li>2013.11.21 - <a href="http://segmentfault.com/a/1190000000368881" target="_blank" rel="noopener">Day 24: 使用 Yeoman 自动构建 Ember 项目</a></li>
<li>2013.11.22 - <a href="http://segmentfault.com/a/1190000000368729" target="_blank" rel="noopener">Day 25: Tornado —— 联合 Tornado、MongoDB 和 AngularJS 进行应用开发</a></li>
<li>2013.11.23 - <a href="http://segmentfault.com/a/1190000000370631" target="_blank" rel="noopener">Day 26: TogetherJS —— 让我们一起来编程！</a></li>
<li>2013.11.24 - <a href="http://segmentfault.com/a/1190000000369308" target="_blank" rel="noopener">Day 27: Restify —— 在Node.js中构建正确的REST Web服务</a></li>
<li>2013.11.25 - <a href="http://segmentfault.com/a/1190000000372498" target="_blank" rel="noopener">Day 28: OpenShift 的 Eclipse 集成</a></li>
<li>2013.11.26 - <a href="http://segmentfault.com/a/1190000000371543" target="_blank" rel="noopener">Day 29: 编写你的第一个 Google Chrome 扩展程序</a></li>
<li>2013.11.27 - <a href="http://segmentfault.com/a/1190000000374033" target="_blank" rel="noopener">Day 30: Play Framework —— Java 开发者的梦想框架</a></li>
</ul>
<hr>
<p>原文 <a href="https://www.openshift.com/blogs/learning-30-technologies-in-30-days-a-developer-challenge" target="_blank" rel="noopener">Learning 30 Technologies in 30 Days: A Developer Challenge</a><br>翻译 <a href="http://segmentfault.com/" target="_blank" rel="noopener">SegmentFault</a></p>
]]></content>
      <categories>
        <category>30天学习30种新技术系列</category>
      </categories>
      <tags>
        <tag>30天学习30种新技术系列</tag>
      </tags>
  </entry>
  <entry>
    <title>教你免费搭建个人博客，Hexo&amp;Github</title>
    <url>/2018/05/26/%E6%95%99%E4%BD%A0%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%8CHexo-Github/</url>
    <content><![CDATA[<h1 id="什么是-Hexo？"><a href="#什么是-Hexo？" class="headerlink" title="什么是 Hexo？"></a>什么是 Hexo？</h1><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">https://hexo.io/zh-cn/docs/</a></p>
<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<h1 id="一、配置Github"><a href="#一、配置Github" class="headerlink" title="一、配置Github"></a>一、配置Github</h1><p>首先注册、登录 <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></p>
<p>记住自己的Username（很重要）</p>
<p>然后右上角选择 Create a new repository <a href="https://github.com/new" target="_blank" rel="noopener">https://github.com/new</a></p>
<p>Repository name （填自己的名字） <strong>yourname.github.io</strong>(yourname与你的注册用户名一致,这个就是你博客的域名了)</p>
<p>例如，我的域名是github.com/zhihuya，就填入zhihuya.github.io。成功后出现下面的画面</p>
<p><img src="/2018/05/26/教你免费搭建个人博客，Hexo-Github/JNWXHHS.jpg" alt="img"></p>
<h1 id="二、环境安装（node、git）"><a href="#二、环境安装（node、git）" class="headerlink" title="二、环境安装（node、git）"></a>二、环境安装（node、git）</h1><p>1、安装 Node.js <a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a></p>
<p>2、安装 Git <a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">https://github.com/waylau/git-for-win</a></p>
<p>Git教程 <a href="https://github.com/waylau/git-for-win" target="_blank" rel="noopener">https://github.com/waylau/git-for-win</a>廖雪峰老师的教程，非常好。</p>
<p>3、安装完成后，在开始菜单里找到“Git”-&gt;“Git Bash”，名称和邮箱是Github上的</p>
<p><img src="/2018/05/26/教你免费搭建个人博客，Hexo-Github/FAVYz0C.jpg" alt="img"></p>
<p>4、安装 Hexo。所有必备的应用程序安装完成后，即可使用 npm 安装 Hexo。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p><img src="/2018/05/26/教你免费搭建个人博客，Hexo-Github/xWjp6U3.jpg" alt="img"></p>
<p>（使用的cmder，超级好用~~。等待时间可能有点长）</p>
<p>好了到这一步我们环境全部安装好了。</p>
<h1 id="三、设置"><a href="#三、设置" class="headerlink" title="三、设置"></a>三、设置</h1><p>在电脑F盘（自己随意）目录下新建文件夹 test，进入test，按住Shift键点击鼠标右键</p>
<p><img src="/2018/05/26/教你免费搭建个人博客，Hexo-Github/jOekzIE.png" alt="img"></p>
<p>因为我有安装Cmder，没有安装的点击“在此处打开命令窗口”，输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo init blog</span><br></pre></td></tr></table></figure>
<p>稍微等待下，速度有点慢。成功提示</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO  Start blogging with Hexo!</span><br></pre></td></tr></table></figure>
<p>因为你初始化hexo 之后source目录下自带一篇hello world文章, 所以直接执行下方命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line"># 启动本地服务器</span><br><span class="line">$ hexo server</span><br><span class="line"># 在浏览器输入 http://localhost:4000/就可以看见网页和模板了</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>
<p>访问<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，便可以看到网站初步的模样，不要激动，我们还要把网页发布到Github上去。</p>
<p><img src="/2018/05/26/教你免费搭建个人博客，Hexo-Github/wk2ybMK.jpg" alt="img"></p>
<p>重新打开CMD，输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;Github的注册邮箱地址&quot;</span><br></pre></td></tr></table></figure>
<p>一路Enter过来就好，得到信息：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Your public key has been saved in /c/Users/user/.ssh/id_rsa.pub.</span><br></pre></td></tr></table></figure>
<p>找到该文件，打开（sublime text），Ctrl + a复制里面的所有内容，然后进入Sign in to GitHub：<a href="https://github.com/settings/ssh" target="_blank" rel="noopener">https://github.com/settings/ssh</a></p>
<p>New SSH key ——Title：blog —— Key：输入刚才复制的—— Add SSH key</p>
<h1 id="四、配置博客"><a href="#四、配置博客" class="headerlink" title="四、配置博客"></a>四、配置博客</h1><p>在blog目录下，用sublime打开_config.yml文件，修改参数信息</p>
<p><strong>特别提醒，在每个参数的：后都要加一个空格</strong></p>
<p>修改网站相关信息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 崔斯特测试所用博客</span><br><span class="line">subtitle: 副标题</span><br><span class="line">description: 网页描述</span><br><span class="line">author: 崔斯特</span><br><span class="line">language: zh-CN</span><br><span class="line">timezone: Asia/Shanghai</span><br></pre></td></tr></table></figure>
<p>配置部署（我的是zhihuya，修改成自己的）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy: </span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/zhihuya/zhihuya.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<h1 id="五、发表文章"><a href="#五、发表文章" class="headerlink" title="五、发表文章"></a>五、发表文章</h1><p>在CMD中输入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new &quot;崔斯特测试文章&quot;</span><br><span class="line">INFO  Created: F:\test\blog\source\_posts\崔斯特测试文章.md</span><br></pre></td></tr></table></figure>
<p>找到该文章，打开，使用Markdown语法，该语法介绍可以查看<a href="https://zhangslob.github.io/2017/02/26/%E5%88%A9%E7%94%A8HEXO%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">https://zhangslob.github.io/2017/02/26/%E5%88%A9%E7%94%A8HEXO%E6%90%AD%E5%BB%BA%E7%9A%84%E5%8D%9A%E5%AE%A2/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 崔斯特测试文章</span><br><span class="line">date: 2017-02-28 13:03:44</span><br><span class="line">tags:</span><br><span class="line">---</span><br><span class="line">这是一篇测试文章，欢迎关注作者博客[1]: https://zhangslob.github.io/</span><br></pre></td></tr></table></figure>
<p>保存，然后执行下列步骤：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">F:\test\blog</span><br><span class="line">$ hexo clean</span><br><span class="line">INFO  Deleted database.</span><br><span class="line">INFO  Deleted public folder.</span><br><span class="line"></span><br><span class="line">F:\test\blog</span><br><span class="line">$ hexo generate</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Files loaded in 1.48 s</span><br><span class="line">#省略</span><br><span class="line">INFO  29 files generated in 4.27 s</span><br><span class="line"></span><br><span class="line">F:\test\blog</span><br><span class="line">$ hexo server</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure>
<p>这个时候，打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，发现刚才的文章已经成功了</p>
<p><img src="/2018/05/26/教你免费搭建个人博客，Hexo-Github/fGVNxkn.jpg" alt="img"></p>
<p>最后一步，发布到网上，执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">F:\test\blog</span><br><span class="line">$ hexo deploy</span><br><span class="line">INFO  Deploying: git</span><br><span class="line">INFO  Clearing .deploy_git folder...</span><br><span class="line">INFO  Copying files from public folder...</span><br><span class="line">#省略</span><br></pre></td></tr></table></figure>
<p><img src="/2018/05/26/教你免费搭建个人博客，Hexo-Github/kKRV0UB.jpg" alt="img"></p>
<p>其中会跳出Github登录，直接登录，如果没有问题输入zhihuya（换成你的）.github.io/</p>
<p>崔斯特测试所用博客<a href="https://zhihuya.github.io/" target="_blank" rel="noopener">https://zhihuya.github.io/</a></p>
<p>然后就可以看到已经发布了</p>
<p><img src="/2018/05/26/教你免费搭建个人博客，Hexo-Github/g9wtZVk.jpg" alt="img"></p>
<h1 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h1><p>发布文章的步骤：</p>
<p>1、hexo new 创建文章</p>
<p>2、Markdown语法编辑文章</p>
<p>3、部署（所有打开CMD都是在blog目录下）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean #清除缓存 网页正常情况下可以忽略此条命令</span><br><span class="line">hexo generate #生成</span><br><span class="line">hexo server #启动服务预览，非必要，可本地浏览网页</span><br><span class="line">hexo deploy #部署发布</span><br></pre></td></tr></table></figure>
<p>简写Tips：</p>
<blockquote>
<p>hexo n “我的博客” == hexo new “我的博客” #新建文章</p>
<p>hexo p == hexo publish</p>
<p>hexo g == hexo generate#生成</p>
<p>hexo s == hexo server #启动服务预览</p>
<p>hexo d == hexo deploy#部署</p>
</blockquote>
<p>如果在执行 hexo deploy 后,出现 error deployer not found:github 的错误，执行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>出错是正常的，出错了自己先百度或google，实在不知道的可以询问我。</p>
<p>托管的话不仅有github可以用，还有个国内的<a href="https://coding.net/" target="_blank" rel="noopener">https://coding.net/</a>可选</p>
<h3 id="引用说明"><a href="#引用说明" class="headerlink" title="引用说明"></a>引用说明</h3><ul>
<li>作者：zhangslob</li>
<li>链接：<a href="https://zhangslob.github.io/2017/02/28/教你免费搭建个人博客，Hexo-Github" target="_blank" rel="noopener">https://zhangslob.github.io/2017/02/28/教你免费搭建个人博客，Hexo-Github</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo使用攻略</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>个人博客搭建</tag>
        <tag>github</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo使用攻略-添加分类及标签</title>
    <url>/2018/05/26/Hexo%E4%BD%BF%E7%94%A8%E6%94%BB%E7%95%A5-%E6%B7%BB%E5%8A%A0%E5%88%86%E7%B1%BB%E5%8F%8A%E6%A0%87%E7%AD%BE/</url>
    <content><![CDATA[<h3 id="1、创建“分类”选项"><a href="#1、创建“分类”选项" class="headerlink" title="1、创建“分类”选项"></a>1、创建“分类”选项</h3><h4 id="1-1-生成“分类”页并添加tpye属性"><a href="#1-1-生成“分类”页并添加tpye属性" class="headerlink" title="1.1 生成“分类”页并添加tpye属性"></a>1.1 生成“分类”页并添加tpye属性</h4><p>打开命令行，进入博客所在文件夹。执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure>
<p>成功后会提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO  Created: ~/Documents/blog/source/categories/index.md</span><br></pre></td></tr></table></figure>
<p>根据上面的路径，找到<code>index.md</code>这个文件，打开后默认内容是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2017-05-27 13:47:40</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>添加<code>type: &quot;categories&quot;</code>到内容中，添加后是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2017-05-27 13:47:40</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>保存并关闭文件。</p>
<h4 id="1-2-给文章添加“categories”属性"><a href="#1-2-给文章添加“categories”属性" class="headerlink" title="1.2 给文章添加“categories”属性"></a>1.2 给文章添加“categories”属性</h4><p>打开需要添加分类的文章，为其添加categories属性。下方的<code>categories: web前端</code>表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: jQuery对表单的操作及更多应用</span><br><span class="line">date: 2017-05-26 12:12:57</span><br><span class="line">categories: </span><br><span class="line">- web前端</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了<code>categories: xxx</code>的文章才会被收录到首页的“分类”中。</p>
<h3 id="2、创建“标签”选项"><a href="#2、创建“标签”选项" class="headerlink" title="2、创建“标签”选项"></a>2、创建“标签”选项</h3><h4 id="2-1-生成“标签”页并添加tpye属性"><a href="#2-1-生成“标签”页并添加tpye属性" class="headerlink" title="2.1 生成“标签”页并添加tpye属性"></a>2.1 生成“标签”页并添加tpye属性</h4><p>打开命令行，进入博客所在文件夹。执行命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure>
<p>成功后会提示：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">INFO  Created: ~/Documents/blog/source/tags/index.md</span><br></pre></td></tr></table></figure>
<p>根据上面的路径，找到<code>index.md</code>这个文件，打开后默认内容是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2017-05-27 14:22:08</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>添加<code>type: &quot;tags&quot;</code>到内容中，添加后是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章分类</span><br><span class="line">date: 2017-05-27 13:47:40</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>保存并关闭文件。</p>
<h4 id="2-2-给文章添加“tags”属性"><a href="#2-2-给文章添加“tags”属性" class="headerlink" title="2.2 给文章添加“tags”属性"></a>2.2 给文章添加“tags”属性</h4><p>打开需要添加标签的文章，为其添加tags属性。下方的<code>tags:</code>下方的<code>- jQuery</code> <code>- 表格</code><br> <code>- 表单验证</code>就是这篇文章的标签了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: jQuery对表单的操作及更多应用</span><br><span class="line">date: 2017-05-26 12:12:57</span><br><span class="line">categories: </span><br><span class="line">- web前端</span><br><span class="line">tags:</span><br><span class="line">- jQuery</span><br><span class="line">- 表格</span><br><span class="line">- 表单验证</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了<code>tags: xxx</code>的文章才会被收录到首页的“标签”中。</p>
<p>细心的朋友可能已经发现，这两个的设置几乎一模一样！是的，没错，思路都是一样的。所以我们可以打开scaffolds/post.md文件，在tages:上面加入categories:,保存后，之后执行<code>hexo new 文章名</code>命令生成的文件，页面里就有<code>categories:</code>项了。</p>
<p>scaffolds目录下，是新建页面的模板，执行新建命令时，是根据这里的模板页来完成的，所以可以在这里根据你自己的需求添加一些默认值。</p>
]]></content>
      <categories>
        <category>Hexo使用攻略</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo Hello World</title>
    <url>/2018/05/26/hexo-hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
<h3 id="hexo-algolia"><a href="#hexo-algolia" class="headerlink" title="hexo algolia"></a>hexo algolia</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">export</span> HEXO_ALGOLIA_INDEXING_KEY=[algolia.apiKey]</span><br><span class="line">$ hexo algolia</span><br></pre></td></tr></table></figure>
<h3 id="CI-with-jenkins"><a href="#CI-with-jenkins" class="headerlink" title="CI with jenkins"></a>CI with jenkins</h3><p><a href="http://www.niugm.me/2018/02/16/jenkins/" target="_blank" rel="noopener">使用Jenkins实现Hexo自动部署</a></p>
<p><a href="https://juejin.im/post/5adae7ee51882567127817ea" target="_blank" rel="noopener">hexo使用jenkins自动部署到阿里云</a></p>
<p>###Cooperation</p>
<ol>
<li><p>使用git <a href="mailto:clonegit@github.com" target="_blank" rel="noopener">clonegit@github.com</a>:vincentruan/vincentruan.github.io.git拷贝仓库（git checkout -b hexo）； </p>
</li>
<li><p>在新拷贝的vincentruan.github.io文件夹下通过Git bash依次执行下列指令：</p>
<p>npm install hexo-cli -g(首次安装)、npm install hexo、npm install、npm install hexo-deployer-git（记得，不需要<strong><em>hexo init</em></strong>这条指令,如果不慎在此时用了hexo init，则站点的配置文件_config.yml里面内容会被清空使用默认值，所以这一步一定要慎重 ）</p>
</li>
</ol>
]]></content>
      <categories>
        <category>Hexo使用攻略</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown吃了吗?</title>
    <url>/2018/05/20/Markdown%E5%90%83%E4%BA%86%E5%90%97/</url>
    <content><![CDATA[<h1 id="markdown-介绍"><a href="#markdown-介绍" class="headerlink" title="markdown 介绍"></a>markdown 介绍</h1><blockquote>
<p>Markdown 是一种轻量级标记语言，它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)文档”。 - <strong>wikipedia</strong></p>
</blockquote>
<ul>
<li><a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="noopener">Daring Fireball: Markdown</a> Project markdown</li>
<li><a href="https://zh.wikipedia.org/wiki/Markdown" target="_blank" rel="noopener">Markdown wikipedia 介绍</a></li>
<li><a href="http://fletcherpenney.net/multimarkdown/" target="_blank" rel="noopener">MultiMarkdown</a> 引入更多标记特性和输出选项的改进版Markdown</li>
</ul>
<h1 id="why-markdown"><a href="#why-markdown" class="headerlink" title="why markdown"></a>why markdown</h1><ul>
<li>纯文本，兼容性极强，可以用任意文本编辑器打开.</li>
<li>语法简单（the syntax is so simple you can barely call it “syntax.”），零学习成本，极好的可读性，让你专注于文字写作而不是页面排版，并且兼容 HTML，simple but powerful .</li>
<li>格式转换方便，Markdown 的文本你可以轻松转换为 html、pdf、epub、电子书等。</li>
<li>适合团队协作，可以使用 git/svn 等进行版本控制管理。</li>
<li><a href="http://www.yangzhiping.com/tech/r-markdown-knitr.html" target="_blank" rel="noopener">阳志平：为什么 Markdown 成为科技界写作主流？</a></li>
<li><a href="http://www.ituring.com.cn/article/828?q=markdown" target="_blank" rel="noopener">图灵社区：用Markdown来写自由书籍-开源技术的方案</a></li>
</ul>
<p>目前很多在线服务商均支持使用markdown编写：</p>
<ul>
<li><a href="https://github.com" target="_blank" rel="noopener">Github</a> 最先支持，使用Markdown的一个分支版本来格式化评论、消息以及其它内容。</li>
<li><a href="http://stackoverflow.com/" target="_blank" rel="noopener">Stack Overflow</a> 使用一种 Markdown 的分支作为它的文章格式化系统。</li>
<li><a href="http://www.cnblogs.com/" target="_blank" rel="noopener">博客园</a> 国内技术人的博客家园，每天活跃上万用户，高质量社区。</li>
<li><a href="http://www.csdn.net/" target="_blank" rel="noopener">CSDN</a> 号称全球最大中文IT社区，涵盖了多种语言、架构、博客、俱乐部等模块的技术论坛。</li>
<li><a href="http://www.ituring.com.cn/" target="_blank" rel="noopener">图灵社区</a> 使用markdown语法供用户写作电子书.</li>
<li><a href="http://www.jianshu.com/" target="_blank" rel="noopener">简书</a> 重拾文字的力量，交流故事，沟通想法，一个基于内容分享的社区。</li>
<li><a href="http://www.wiz.cn/" target="_blank" rel="noopener">为知笔记</a> 国内顶尖笔记软件，支持使用Markdown语法编辑笔记。</li>
<li><a href="http://note.youdao.com/noteintro.html" target="_blank" rel="noopener">有道云笔记</a> 最新版本开始支持，并且支持一些扩展语法。</li>
<li>……</li>
</ul>
<h1 id="markdown-使用"><a href="#markdown-使用" class="headerlink" title="markdown 使用"></a>markdown 使用</h1><ul>
<li><a href="http://wowubuntu.com/markdown/basic.html" target="_blank" rel="noopener">Markdown: Basics （快速入门）</a></li>
<li><a href="http://wowubuntu.com/markdown/" target="_blank" rel="noopener">Markdown 完整语法说明 (简体中文版)</a></li>
<li><a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="noopener">Github: Mastering Markdown</a> GitHub 帮助中关于 Markdown 的语法帮助</li>
<li><a href="https://github.com/hzlzh/1MarkDown" target="_blank" rel="noopener">MarkDown 语法团队规范</a> 语法规范简洁版</li>
<li><a href="http://www.cirosantilli.com/markdown-style-guide/" target="_blank" rel="noopener">Markdown Style Guide</a> 语法规范复杂版</li>
<li><a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet" target="_blank" rel="noopener">Markdown Cheatsheet</a></li>
<li><a href="https://help.github.com/articles/github-flavored-markdown/" target="_blank" rel="noopener">GitHub Flavored Markdown</a> GitHub 使用的 Markdown 语法，略微不同于标准 Markdown 语法。提供了一些更加简洁的语法，类似 URL autolinking, Strikethrough, Fenced code blocks, Syntax highlighting 等等</li>
<li><a href="http://fletcherpenney.net/multimarkdown/" target="_blank" rel="noopener">MultiMarkdown 介绍</a> 对 markdown 进行的扩展功能</li>
</ul>
<h1 id="markdown-工具"><a href="#markdown-工具" class="headerlink" title="markdown 工具"></a>markdown 工具</h1><ul>
<li><a href="https://maxiang.info/" target="_blank" rel="noopener">马克飞象</a> web/chrome 离线客户端，markdown 全功能支持，最大特点内容能够同步到印象笔记（evernote）中，笔记的用户重度推荐，按年收费，目前作者 <a href="http://weibo.com/u/2788354117" target="_blank" rel="noopener">@weibo</a> 正在开发跨平台的客户端。</li>
<li><a href="https://stackedit.io/" target="_blank" rel="noopener">StackEdit</a> 在线 markdown 编辑器，可同步文档到Google Drive和 Dropbox，可发布文章到 Blogger，GitHub，Google Drive，Dropbox，Tumblr和WordPress。</li>
<li><a href="https://www.zybuluo.com/mdeditor" target="_blank" rel="noopener">cmd 作业部落</a> 支持 win/mac/linux/web/chrome 全平台，支持实时同步预览，支持代码高亮、数学公式，区分写作和阅读模式，支持在线存储，分享文稿网址。</li>
<li><a href="http://macdown.uranusjr.com/" target="_blank" rel="noopener">MacDown</a> OSX 上的 Markdown 开源编辑器，支持代码高亮，实时预览等。</li>
<li><a href="http://www.markdownpad.com/" target="_blank" rel="noopener">MarkdownPad</a> Windows上的全功能Markdown编辑器，推荐win上使用，基本全部功能。</li>
<li><a href="http://marked2app.com/" target="_blank" rel="noopener">Marked2</a> 多种 md 显示方案，不能够编辑文件，只用来展示文件，配合 <a href="https://packagecontrol.io/packages/MarkdownEditing" target="_blank" rel="noopener">subline text markdown edit</a> 插件，完美使用；</li>
<li><a href="http://zh.mweb.im/" target="_blank" rel="noopener">MWeb</a> 专业的 Markdown 写作、记笔记、静态博客生成软件，由国内独立开发者<a href="http://weibo.com/oulvhai" target="_blank" rel="noopener">@oulvhai</a>开发，支持Toc、Table、代码高亮、支持发布到 Wordrpess 博客、支持 Metaweblog API 的博客服务、Wordpress.com、Evernote 和印象笔记、Blogger、Scriptogr.am、Tumblr等服务。</li>
<li><a href="http://pad.haroopress.com/user.html" target="_blank" rel="noopener">Haroopad</a> 又一款简洁多功能的跨平台编辑器，全功能支持，再加上对社交网络友好的连接，多种主题等，感兴趣的可以看看。详情参考<a href="https://github.com/xirong/my-markdown/issues/1" target="_blank" rel="noopener">issue#1</a></li>
<li><a href="http://www.typora.io/" target="_blank" rel="noopener">Typora</a> 不分栏，实时展示看到写出的内容，对于不喜欢「两栏」设计的人来说是一个选择</li>
<li><a href="http://markeditor.com/app/markeditor" target="_blank" rel="noopener">MarkEditor - ME</a> MarkEditor以markdown为基础语法，多标签栏、文件夹结构，纯文本的方式带来优雅、高效的体验。 确实很棒的工具，带来很多新鲜的理念，支持、重构、提升 markdown，加快写作的体验。具体可以查看几篇评测文章：<ul>
<li><a href="http://sspai.com/34317" target="_blank" rel="noopener">简洁与强大，从不是矛盾的事物：写作工具 MarkEditor 功能详解</a></li>
<li><a href="http://sspai.com/34656" target="_blank" rel="noopener">不止是一款简单的码字工具：MarkEditor 进阶功能介绍</a></li>
</ul>
</li>
<li><a href="http://sspai.com/32483" target="_blank" rel="noopener">码字必备：18 款优秀的 Markdown 写作工具 | 2015 年度盘点</a> 喜欢哪一款，就看你的了。</li>
<li>这几款就够了，多了就有选择症 ……</li>
</ul>
<h1 id="markdown流程图"><a href="#markdown流程图" class="headerlink" title="markdown流程图"></a>markdown流程图</h1><h2 id="1-1-流程图"><a href="#1-1-流程图" class="headerlink" title="1.1 流程图"></a>1.1 流程图</h2><h3 id="1-1-横向流程图源码格式"><a href="#1-1-横向流程图源码格式" class="headerlink" title="1.1 横向流程图源码格式:"></a>1.1 横向流程图源码格式:</h3><pre class="mermaid">graph LR
A[方形] --> B(圆角)
    B --> C{条件a}
    C --> |a=1| D[结果1]
    C --> |a=2| E[结果2]
    F[横向流程图]</pre>

<h3 id="1-2-竖向流程图源码格式"><a href="#1-2-竖向流程图源码格式" class="headerlink" title="1.2 竖向流程图源码格式:"></a>1.2 竖向流程图源码格式:</h3><pre class="mermaid">graph TD
A[方形] --> B(圆角)
    B --> C{条件a}
    C --> |a=1| D[结果1]
    C --> |a=2| E[结果2]
    F[竖向流程图]</pre>

<h3 id="1-3-标准流程图源码格式"><a href="#1-3-标准流程图源码格式" class="headerlink" title="1.3 标准流程图源码格式:"></a>1.3 标准流程图源码格式:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure>
<h3 id="1-4-标准流程图源码格式-横向"><a href="#1-4-标准流程图源码格式-横向" class="headerlink" title="1.4 标准流程图源码格式(横向):"></a>1.4 标准流程图源码格式(横向):</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">st=&gt;start: 开始框</span><br><span class="line">op=&gt;operation: 处理框</span><br><span class="line">cond=&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1=&gt;subroutine: 子流程</span><br><span class="line">io=&gt;inputoutput: 输入输出框</span><br><span class="line">e=&gt;end: 结束框</span><br><span class="line">st(right)-&gt;op(right)-&gt;cond</span><br><span class="line">cond(yes)-&gt;io(bottom)-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure>
<h2 id="1-2-UML时序图"><a href="#1-2-UML时序图" class="headerlink" title="1.2 UML时序图"></a>1.2 UML时序图</h2><h3 id="1-2-1-UML时序图源码样例"><a href="#1-2-1-UML时序图源码样例" class="headerlink" title="1.2.1 UML时序图源码样例:"></a>1.2.1 UML时序图源码样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">对象A-&gt;对象B: 对象B你好吗? (请求)</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note left of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B --&gt; 对象A: 我很好(响应)</span><br><span class="line">对象A --&gt; 对象B: 你真的好吗?</span><br></pre></td></tr></table></figure>
<h3 id="1-2-2-UML时序图源码复杂样例"><a href="#1-2-2-UML时序图源码复杂样例" class="headerlink" title="1.2.2 UML时序图源码复杂样例:"></a>1.2.2 UML时序图源码复杂样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Title: 标题: 复杂使用</span><br><span class="line">对象A -&gt; 对象B: 对象B你好吗? (请求)</span><br><span class="line">Note right of 对象B: 对象B的描述</span><br><span class="line">Note right of 对象A: 对象A的描述(提示)</span><br><span class="line">对象B --&gt; 对象A: 我很好(响应)</span><br><span class="line">对象B --&gt; 小三: 你好吗?</span><br><span class="line">小三 -&gt; 对象A: 对象B找我了</span><br><span class="line">对象A --&gt; 对象B: 你真的好吗?</span><br><span class="line">Note over 小三, 对象B: 我们是朋友</span><br><span class="line">participant C</span><br><span class="line">Note right of C: 没人陪我玩</span><br></pre></td></tr></table></figure>
<h3 id="1-2-3-UML标准时序图样例"><a href="#1-2-3-UML标准时序图样例" class="headerlink" title="1.2.3 UML标准时序图样例:"></a>1.2.3 UML标准时序图样例:</h3><pre class="mermaid">%%时序图例子, -> 实线, --> 虚线, ->> 实线箭头
    sequenceDiagram
        participant 张三
        participant 李四
        张三 -> 王五: 王五你好吗?
        loop 健康检查
            王五 -> 王五: 与疾病战斗
        end
        Note right of 王五: 合理饮食 <br>看医生...
        李四 ->> 张三: 很好!
        王五 -> 李四: 你怎么样?
        李四 --> 王五: 很好!</pre>

<h2 id="1-3-甘特图样例"><a href="#1-3-甘特图样例" class="headerlink" title="1.3 甘特图样例:"></a>1.3 甘特图样例:</h2><pre class="mermaid">%%语法示例
    gantt
    dateFormat YYYY-MM-DD
    title 软件开发甘特图

    section 设计
    需求  :done, des1, 2014-01-06, 2014-01-08
    原型  :active, des2, 2014-01-09, 3d
    UI设计    :des3, after des2, 5d
    未来任务:   :des4, after des3, 5d

    section 开发
    学习准备理解需求    :crit, done, 2014-01-06, 24h
    设计框架    :crit, done, after des2, 2d
    开发  :crit, active, 3d
    未来任务    :crit, 5d
    耍   :2d

    section 测试
    功能测试    :active, a1, after des3, 3d
    压力测试    :after a1, 20h
    测试报告    :48h</pre>

<h1 id="数学公式"><a href="#数学公式" class="headerlink" title="数学公式"></a>数学公式</h1><h2 id="矩阵方程"><a href="#矩阵方程" class="headerlink" title="矩阵方程"></a>矩阵方程</h2><p>$$<br>\begin{matrix}<br>    1 &amp; x &amp; x^2 \<br>    1 &amp; y &amp; y^2 \<br>    1 &amp; z &amp; z^2 \<br>    \end{matrix}<br>$$</p>
<h1 id="reference-参考"><a href="#reference-参考" class="headerlink" title="reference 参考"></a>reference 参考</h1><ul>
<li><a href="http://brettterpstra.com/2011/08/31/why-markdown-a-two-minute-explanation/" target="_blank" rel="noopener">Why Markdown? A two-minute explanation</a></li>
<li><a href="http://www.jianshu.com/p/q81RER" target="_blank" rel="noopener">简书：献给写作者的 Markdown 新手指南</a></li>
<li><a href="https://wizardforcel.gitbooks.io/markdown-simple-world/content/0.html" target="_blank" rel="noopener">Markdown simple world</a></li>
<li><a href="https://math.meta.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference/5044 MathJax basic tutorial and quick reference" target="_blank" rel="noopener">MathJax语法规则</a></li>
<li><a href="https://www.jianshu.com/p/7ddbb7dc8fec" target="_blank" rel="noopener">Mermaid语法规则</a></li>
<li><a href="https://mermaidjs.github.io/demos.html" target="_blank" rel="noopener">Mermaid官方教程</a></li>
<li><a href="https://github.com/webappdevelp/hexo-filter-mermaid-diagrams" target="_blank" rel="noopener">Mermaid Github仓库</a></li>
<li>[MathJax Github仓库](<a href="https://github.com/mathjax/MathJax" target="_blank" rel="noopener">https://github.com/mathjax/MathJax</a></li>
</ul>
]]></content>
      <categories>
        <category>Hexo使用攻略</category>
      </categories>
      <tags>
        <tag>markdown</tag>
        <tag>流程图</tag>
      </tags>
  </entry>
</search>
